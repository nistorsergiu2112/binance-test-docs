{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"CHANGELOG/","text":"CHANGELOG for Binance's API (2023-01-23) 2023-01-23 New API cluster has been added. Note that all endpoints are functionally equal, but may vary in performance. https://api4.binance.com RELEASE DATE TBD New Feature : Self-Trade Prevention (aka STP) will be added to the system at a later date. This will prevent orders from matching with orders from the same account, or accounts under the same tradeGroupId . Please refer to GET /api/v3/exchangeInfo from the Rest API or exchangeInfo from the Websocket API on the status. \"defaultSelfTradePreventionMode\": \"NONE\", //If selfTradePreventionMode not provided, this will be the value passed to the engine \"allowedSelfTradePreventionModes\": [ //What the allowed modes of selfTradePrevention are \"NONE\", \"EXPIRE_TAKER\", \"EXPIRE_BOTH\", \"EXPIRE_MAKER\" ] Additional details on the functionality of STP is explained in the STP FAQ document. REST API New order status: EXPIRED_IN_MATCH - This means that the order expired due to STP being triggered. New endpoint: GET /api/v3/myPreventedMatches - This queries the orders that expired due to STP being triggered. New optional parameter selfTradePreventionMode has been added to the following endpoints: POST /api/v3/order POST /api/v3/order/oco POST /api/v3/cancelReplace New responses that will appear for all order placement endpoints if there was a prevented match (i.e. if an order could have matched with an order of the same account, or the accounts are in the same tradeGroupId ): tradeGroupId - This will only appear if account is configured to a tradeGroupId and if there was a prevented match. preventedQuantity - Only appears if there was a prevented match An array preventedMatches with the following fields: preventedMatchId makerOrderId price takerPreventedQuantity - This will only appear if selfTradePreventionMode set is EXPIRE_TAKER or EXPIRE_BOTH . makerPreventedQuantity - This will only appear if selfTradePreventionMode set is EXPIRE_MAKER or EXPIRE_BOTH . New fields preventedMatchId and preventedQuantity that can appear in the order query endpoints if the order had expired due to an STP trigger: GET /api/v3/order GET /api/v3/openOrders GET /api/v3/allOrders WEBSOCKET API New order status: EXPIRED_IN_MATCH - This means that the order expired due to STP being triggered. New optional parameter selfTradePreventionMode has been added to the following requests: order.place orderList.place order.cancelReplace New request: myPreventedMatches - This queries the orders that expired due to STP being triggered. New responses that will appear for all order placement endpoints if there was a prevented match (i.e. if an order could have matched with an order of the same account, or the accounts are in the same tradeGroupId ): tradeGroupId - This will only appear if account is configured to a tradeGroupId and if there was a prevented match. preventedQuantity - Only appears if there was a prevented match. An array preventedMatches with the following fields: preventedMatchId makerOrderId price takerPreventedQuantity - This will only appear if selfTradePreventionMode set is EXPIRE_TAKER or EXPIRE_BOTH . makerPreventedQuantity - This will only appear if selfTradePreventionMode set is EXPIRE_MAKER or EXPIRE_BOTH . New fields preventedMatchId and preventedQuantity that can appear in the order query requests if the order had expired due to STP trigger: order.status openOrders.status allOrders USER DATA STREAM New execution Type: TRADE_PREVENTION New fields for executionReport (These fields will only appear if the order has expired due to STP trigger) u - tradeGroupId v - preventedMatchId U - counterOrderId A - preventedQuantity B - lastPreventedQuantity 2022-12-28 SPOT WebSocket API documentation has been updated to show how to sign a request using an RSA key. 2022-12-26 Spot WebSocket API is now available on the live exchange. Spot Websocket API can be accessed through this URL: wss://ws-api.binance.com/ws-api/v3 2022-12-15 New RSA signature Documentation has been updated to show how to create RSA keys. For security reasons, we recommend to use RSA keys instead of HMAC keys when generating an API key. We accept PKCS#8 (BEGIN PUBLIC KEY). More details on how to upload your RSA public key will be added at a later date. SPOT WebSocket API is now available on SPOT Testnet . WebSocket API allows placing orders, canceling orders, etc. through a WebSocket connection. WebSocket API is a separate service from WebSocket Market Data streams. I.e., placing orders and listening to market data requires two separate WebSocket connections. WebSocket API is subject to the same Filter and Rate Limit rules as REST API. WebSocket API and REST API are functionally equivalent: they provide the same features, accept the same parameters, return the same status and error codes. WEBSOCKET API WILL BE AVAILABLE ON THE LIVE EXCHANGE AT A LATER DATE. 2022-12-13 REST API Some error messages on error code -1003 have changed. * Previous error message: Too much request weight used; current limit is %s request weight per %s %s. Please use the websocket for live updates to avoid polling the API. has been updated to: Too much request weight used; current limit is %s request weight per %s. Please use WebSocket Streams for live updates to avoid polling the API. Previous error message Way too much request weight used; IP banned until %s. Please use the websocket for live updates to avoid bans. has been updated to: Way too much request weight used; IP banned until %s. Please use WebSocket Streams for live updates to avoid bans. 2022-12-05 Notice: These changes are being rolled out gradually to all our servers, and will take approximately a week to complete. WEBSOCKET !bookTicker will be removed by December 7, 2022 . Please use the Individual Book Ticker Streams instead ( <symbol>@bookTicker ). Multiple <symbol>@bookTicker streams can be subscribed to over one connection. (E.g. wss://stream.binance.com:9443/stream?streams=btcusdt@bookTicker/bnbbtc@bookTicker ) REST API New error code -1135 This error code will occur if a parameter requiring a JSON object is invalid. New error code -1108 This error will occur if a value to a parameter being sent was too large, potentially causing overflow. This error code can occur in the following endpoints: POST /api/v3/order POST /api/v3/order/cancelReplace POST /api/v3/order/oco Changes to GET /api/v3/aggTrades Previous behavior: startTime and endTime had to be used in combination and could only be an hour apart. New behavior: startTime and endTime can be used individually and the 1 hour limit has been removed. When using startTime only, this will return trades from that time, up to the limit provided. When using endTime only, this will return trades before that time, up to the limit provided. If limit not provided, regardless of used in combination or sent individually, the endpoint will use the default limit. Changes to GET /api/v3/myTrades Fixed a bug where symbol + orderId combination would return all trades even if the number of trades went beyond the 500 default limit. Previous behavior: The API would send specific error messages depending on the combination of parameters sent. E.g: json { \"code\": -1106, \"msg\": \"Parameter X was sent when not required.\" } * New behavior: If the combinations of optional parameters to the endpoint were not supported, then the endpoint will respond with the generic error: json { \"code\": -1128, \"msg\": \"Combination of optional parameters invalid.\" } * Added a new combination of supported parameters: symbol + orderId + fromId . * The following combinations of parameters were previously supported but no longer accepted, as these combinations were only taking fromId into consideration, ignoring startTime and endTime : * symbol + fromId + startTime * symbol + fromId + endTime * symbol + fromId + startTime + endTime * Thus, these are the supported combinations of parameters: * symbol * symbol + orderId * symbol + startTime * symbol + endTime * symbol + fromId * symbol + startTime + endTime * symbol + orderId + fromId Note: These new fields will appear approximately a week from the release date. Changes to GET /api/v3/exchangeInfo New fields defaultSelfTradePreventionMode and allowedSelfTradePreventionModes Changes to the Order Placement Endpoints/Order Query/Order Cancellation Endpoints: New field selfTradePreventionMode will appear in the response. Affects the following endpoints: POST /api/v3/order POST /api/v3/order/oco POST /api/v3/order/cancelReplace GET /api/v3/order DELETE /api/v3/order DELETE /api/v3/orderList Changes to GET /api/v3/account New field requireSelfTradePrevention will appear in the response. New field workingTime , indicating when the order started working on the order book, will appear in the following endpoints: POST /api/v3/order GET /api/v3/order POST /api/v3/order/cancelReplace POST /api/v3/order/oco GET /api/v3/order GET /api/v3/openOrders GET /api/v3/allOrders Field trailingTime , indicating the time when the trailing order is active and tracking price changes, will appear for the following order types ( TAKE_PROFIT , TAKE_PROFIT_LIMIT , STOP_LOSS , STOP_LOSS_LIMIT if trailingDelta parameter was provided) for the following endpoints: POST /api/v3/order GET /api/v3/order GET /api/v3/openOrders GET /api/v3/allOrders POST /api/v3/order/cancelReplace DELETE /api/v3/order Field commissionRates will appear in the GET /api/v3/acccount response USER DATA STREAM eventType executionReport has new fields V - selfTradePreventionMode D - trailing_time (Appears if the trailing stop order is active) W - workingTime (Appears if isWorking = true ) 2022-12-02 Added a new market data base URL https://data.binance.com . Added a new WebSocket URL wss://data-stream.binance.com . 2022-09-30 Scheduled changes to the removal of !bookTicker around November 2022. The All Book Tickers stream ( !bookTicker ) is set to be removed in November 2022 . More details of the actual removal date will be announced at a later time. Please use the Individual Book Ticker Streams instead. ( <symbol>@bookTicker ). Multiple <symbol>@bookTicker streams can be subscribed to over one connection. Example: wss://stream.binance.com:9443/stream?streams=btcusdt@bookTicker/bnbbtc@bookTicker 2022-09-15 Note that these are rolling changes, so it may take a few days for it to rollout to all our servers. Changes to GET /api/v3/exchangeInfo New optional parameter permissions added to display all symbols with the permissions matching the parameter provided. (eg. SPOT , MARGIN ) If not provided, the default value will be [\"SPOT\",\"MARGIN\",\"LEVERAGED\"] . This means the request GET /api/v3/exchangeInfo without any parameters will show all symbols that can be used for SPOT , MARGIN , and/or LEVERAGED trading. To search for symbols that can be traded on other permissions (e.g. TRD_GRP_004 , etc), then this needs to be searched for explicitly. (e.g. permissions = TRD_GRP_004 ) Cannot be combined with symbol or symbols 2022-08-23 Note that these are rolling changes, so it may take a few days for it to rollout to all our servers. Changes to GET /api/v3/ticker and GET /api/v3/ticker/24hr New optional parameter type added Supported values for parameter type are FULL and MINI FULL is the default value and the response that is currently being returned from the endpoint MINI omits the following fields from the response: priceChangePercent , weightedAvgPrice , bidPrice , bidQty , askPrice , askQty , and lastQty New error code -1008 This is sent whenever the servers are overloaded with requests. New field brokered has been added to GET /api/v3/account New kline interval: 1s New endpoint added: GET /api/v3/uiKlines 2022-08-08 REST API Changes to POST /api/v3/order and POST /api/v3/order/cancelReplace New optional fields strategyId and strategyType strategyId is a parameter used to identify an order as part of a strategy. strategyType is a parameter used to identify what strategy was running. (E.g. If all the orders are part of spot grid strategy, it can be set to strategyType=1000000 ) Note that the minimum value allowed for strategyType is 1000000 . Changes to POST /api/v3/order/oco New optional fields limitStrategyId , limitStrategyType , stopStrategyId , stopStrategyType These are the strategy metadata parameters for both legs of the OCO orders. limitStrategyType and stopStrategyType both cannot be less than 1000000 . Changes to GET /api/v3/order , GET /api/v3/openOrders , and GET /api/v3/allOrders New fields strategyId and strategyType will appear in the response JSON for orders that had these fields populated upon order placement. Changes to DELETE /api/v3/order and DELETE /api/v3/openOrders New fields strategyId and strategyType will appear in the response JSON for cancelled orders that had these fields populated upon order placement. USER DATA STREAM New fields to eventType executionReport j for strategyId J for strategyType Note that these fields only appear if these were populated upon order placement. 2022-06-20 Changes to GET /api/v3/ticker Weight has been reduced from 5 to 2 per symbol, regardless of windowSize . The max number of symbols that can be processed in a request is 100. If the number of symbols sent is more than 100, the error will be as follows: json { \"code\": -1101, \"msg\": \"Too many values sent for parameter 'symbols', maximum allowed up to 100.\" } The max Weight for this endpoint will cap at 100. I.e. If the request has more than 50 symbols, the Weight will still be 100, regardless of windowSize . 2022-06-15 Note: The update is being rolled out over the next few days, so these changes may not be visible right away. SPOT API GET /api/v3/ticker added Rolling window price change statistics based on windowSize provided. Contrary to GET /api/v3/ticker/24hr the list of symbols cannot be omitted. If windowSize not specified, the value will default to 1d . Response is similar to GET /api/v3/ticker/24hr , minus the following fields: prevClosePrice , lastQty , bidPrice , bidQty , askPrice , askQty GET /api/v3/exchangeInfo returns new field cancelReplaceAllowed in symbols list. POST /api/v3/order/cancelReplace added Cancels an existing order and places a new order on the same symbol. The filters are evaluated before the cancel order is placed. e.g. If the MAX_NUM_ORDERS filter is 10, and the total number of open orders on the account is also 10, when using POST /api/v3/order/cancelReplace both the cancel order placement and new order will fail because of the filter. The change is being rolled out in the next few days, thus this feature will be enabled once the upgrade is completed. New filter NOTIONAL has been added. Defines the allowed notional value ( price * quantity ) based on a configured minNotional and maxNotional New exchange filter EXCHANGE_MAX_NUM_ICEBERG_ORDERS has been added. Defines the limit of open iceberg orders on an account 2022-05-23 Changes to Order Book Depth Levels Quantities in the Depth levels were returning negative values in situations where they were exceeding the max value, resulting in an overflow. Going forward depth levels will not overflow, but will be capped at the max value based on the precision of the base asset. This means that the depth level is at max value or more . E.g. If the precision is 8, then the max value for quantity will be at 92,233,720,368.54775807. When the fix has been applied, a change in the order book at the affected price level is required for the changes to be visible. What does this affect? SPOT API GET /api/v3/depth Websocket Streams <symbol>@depth <symbol>@depth@100ms <symbol>@depth<levels> <symbol>@depth<levels>@100ms Updates to MAX_POSITION If an order's quantity can cause the position to overflow, this will now fail the MAX_POSITION filter. 2022-05-17 Changes to GET api/v3/aggTrades When providing startTime and endTime , the oldest items are returned. Changed error messaging on GET /api/v3/myTrades where parameter symbol is not provided: { \"code\": -1102, \"msg\": \"Mandatory parameter 'symbol' was not sent, was empty/null, or malformed.\" } The following endpoints now support multi-symbol querying using the parameter symbols . GET /api/v3/ticker/24hr GET /api/v3/ticker/price GET /api/v3/ticker/bookTicker In the above, the request weight will depend on the number of symbols provided in symbols . Please refer to the table below: Endpoint Number of Symbols Weight GET /api/v3/ticker/price Any 2 GET /api/v3/ticker/bookTicker Any 2 GET /api/v3/ticker/24hr 1-20 1 GET /api/v3/ticker/24hr 21-100 20 GET /api/v3/ticker/24hr 101 or more 40 2022-04-13 REST API Trailing Stops have been enabled. This is a type of algo order where the activation is based on a percentage of a price change in the market using the new parameter trailingDelta . This can only used with any of the following order types: STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , TAKE_PROFIT_LIMIT . The trailingDelta parameter will be done in Basis Points or BIPS. For example: a STOP_LOSS SELL order with a trailingDelta of 100 will trigger after a price decrease of 1% from the highest price after the order is placed. (100 / 10,000 => 0.01 => 1%) When used in combination with OCO Orders, the trailingDelta will determine when the contingent leg of the OCO will trigger. When trailingDelta is used in combination with stopPrice , once the stopPrice condition is met, the trailing stop starts tracking the price change from the stopPrice based on the trailingDelta provided. When no stopPrice is sent, the trailing stop starts tracking the price changes from the last price based on the trailingDelta provided. Changes to POST /api/v3/order New optional field trailingDelta Changes to POST /api/v3/order/test New optional field trailingDelta Changes to POST /api/v3/order/oco New optional field trailingDelta A new filter TRAILING_DELTA has been added. This filter is defined by the minimum and maximum values for the trailingDelta value. USER DATA STREAM New field in executionReport \"d\" for trailingDelta 2022-04-12 Note: The changes are being rolled out during the next few days, so these will not appear right away. Error message changed on GET api/v3/allOrders where symbol is not provided: json { \"code\": -1102, \"msg\": \"Mandatory parameter 'symbol' was not sent, was empty/null, or malformed.\" } Fixed a typo with an error message when an account has disabled permissions (e.g. to withdraw, to trade, etc) json \"This action is disabled on this account.\" During a market data audit, we detected some issues with the Spot aggregate trade data. Missing aggregate trades were recovered. Duplicated records were marked invalid with the following values: p = '0' // price q = '0' // qty f = -1 // \ufb01rst_trade_id l = -1 // last_trade_id 2022-02-28 New field allowTrailingStop has been added to GET /api/v3/exchangeInfo 2022-02-24 (price-minPrice) % tickSize == 0 rule in PRICE_FILTER has been changed to price % tickSize == 0 . A new filter PERCENT_PRICE_BY_SIDE has been added. Changes to GET api/v3/depth The limit value can be outside of the previous values (i.e. 5, 10, 20, 50, 100, 500, 1000,5000) and will return the correct limit. (i.e. if limit=3 then the response will be the top 3 bids and asks) The limit still cannot exceed 5000. If the limit provided is greater than 5000, then the response will be truncated to 5000. Due to the changes, these are the updated request weights based on the limit value provided: Limit Request Weight 1-100 1 101-500 5 501-1000 10 1001-5000 50 Changes to GET api/v3/aggTrades When providing startTime and endTime , the oldest items are returned. 2021-12-29 Removed out dated \"Symbol Type\" enum; added \"Permissions\" enum. 2021-11-01 GET /api/v3/rateLimit/order added The endpoint will display the user's current order count usage for all intervals. This endpoint will have a request weight of 20. 2021-09-14 Add a YAML file with OpenApi specification on the RESTful API. 2021-08-12 GET api/v3/myTrades has a new optional field orderId 2021-05-12 Added Data Source in the documentation to explain where each endpoint is retrieving its data. Added field Data Source to each API endpoint in the documentation GET api/v3/exchangeInfo now supports single or multi-symbol query 2021-04-26 On April 28, 2021 00:00 UTC the weights to the following endpoints will be adjusted: GET /api/v3/order weight increased to 2 GET /api/v3/openOrders weight increased to 3 GET /api/v3/allOrders weight increased to 10 GET /api/v3/orderList weight increased to 2 GET /api/v3/openOrderList weight increased to 3 GET /api/v3/account weight increased to 10 GET /api/v3/myTrades weight increased to 10 GET /api/v3/exchangeInfo weight increased to 10 2021-01-01 USER DATA STREAM outboundAccountInfo has been removed. 2020-11-27 New API clusters have been added in order to improve performance. Users can access any of the following API clusters, in addition to api.binance.com If there are any performance issues with accessing api.binance.com please try any of the following instead: https://api1.binance.com/api/v3/* https://api2.binance.com/api/v3/* https://api3.binance.com/api/v3/* 2020-09-09 USER DATA STREAM outboundAccountInfo has been deprecated. outboundAccountInfo will be removed in the future. (Exact date unknown) Please use outboundAccountPosition instead. outboundAccountInfo will now only show the balance of non-zero assets and assets that have been reduced to 0. 2020-05-01 From 2020-05-01 UTC 00:00, all symbols will have a limit of 200 open orders using the MAX_NUM_ORDERS filter. No existing orders will be removed or canceled. Accounts that have 200 or more open orders on a symbol will not be able to place new orders on that symbol until the open order count is below 200. OCO orders count as 2 open orders before the LIMIT order is touched or the STOP_LOSS (or STOP_LOSS_LIMIT ) order is triggered; once this happens the other order is canceled and will no longer count as an open order. 2020-04-25 REST API New field permissions Defines the trading permissions that are allowed on accounts and symbols. permissions is an enum array; values: SPOT MARGIN permissions will replace isSpotTradingAllowed and isMarginTradingAllowed on GET api/v3/exchangeInfo in future API versions (v4+). For an account to trade on a symbol, the account and symbol must share at least 1 permission in common. Updates to GET api/v3/exchangeInfo New field permissions added. New field quoteAssetPrecision added; a duplicate of the quotePrecision field. quotePrecision will be removed in future API versions (v4+). Updates to GET api/v3/account New field permissions added. New endpoint DELETE api/v3/openOrders This will allow a user to cancel all open orders on a single symbol. This endpoint will cancel all open orders including OCO orders. Orders can be canceled via the API on symbols in the BREAK or HALT status. USER DATA OutboundAccountInfo has new field P which shows the trading permissions of the account. 2020-04-23 WEB SOCKET STREAM WebSocket connections have a limit of 5 incoming messages per second. A message is considered: A PING frame A PONG frame A JSON control message (e.g. subscribe, unsubscribe) A connection that goes beyond the limit will be disconnected; IPs that are repeatedly disconnected may be banned. A single connection can listen to a maximum of 1024 streams. 2020-03-24 MAX_POSITION filter added. This filter defines the allowed maximum position an account can have on the base asset of a symbol. An account's position defined as the sum of the account's: free balance of the base asset locked balance of the base asset sum of the qty of all open BUY orders BUY orders will be rejected if the account's position is greater than the maximum position allowed. 2019-11-22 Quote Order Qty Market orders have been enabled on all symbols. Quote Order Qty MARKET orders allow a user to specify the total quoteOrderQty spent or received in the MARKET order. Quote Order Qty MARKET orders will not break LOT_SIZE filter rules; the order will execute a quantity that will have the notional value as close as possible to quoteOrderQty . Using BNBBTC as an example: On the BUY side, the order will buy as many BNB as quoteOrderQty BTC can. On the SELL side, the order will sell as much BNB as needed to receive quoteOrderQty BTC. 2019-11-13 Rest API api/v3/exchangeInfo has new fields: quoteOrderQtyMarketAllowed baseCommissionDecimalPlaces quoteCommissionDecimalPlaces MARKET orders have a new optional field: quoteOrderQty used to specify the quote quantity to BUY or SELL. This cannot be used in combination with quantity . The exact timing that quoteOrderQty MARKET orders will be enabled is TBD. There will be a separate announcement and further details at that time. All order query endpoints will return a new field origQuoteOrderQty in the JSON payload. (e.g. GET api/v3/allOrders) Updated error messages for -1128 Sending an OCO with a stopLimitPrice but without a stopLimitTimeInForce will return the error: json { \"code\": -1128, \"msg\": \"Combination of optional parameters invalid. Recommendation: 'stopLimitTimeInForce' should also be sent.\" } Updated error messages for -1003 to specify the limit is referring to the request weight, not to the number of requests. Deprecation of v1 endpoints : By end of Q1 2020, the following endpoints will be removed from the API. The documentation has been updated to use the v3 versions of these endpoints. GET api/v1/depth GET api/v1/historicalTrades GET api/v1/aggTrades GET api/v1/klines GET api/v1/ticker/24hr GET api/v1/ticker/price GET api/v1/exchangeInfo POST api/v1/userDataStream PUT api/v1/userDataStream GET api/v1/ping GET api/v1/time GET api/v1/ticker/bookTicker These endpoints however, will NOT be migrated to v3. Please use the following endpoints instead moving forward. Old V1 Endpoints New V3 Endpoints GET api/v1/ticker/allPrices GET api/v3/ticker/price GET api/v1/ticker/allBookTickers GET api/v3/ticker/bookTicker USER DATA STREAM Changes to executionReport event If the C field is empty, it will now properly return null , instead of \"null\" . New field Q which represents the quoteOrderQty . balanceUpdate event type added This event occurs when funds are deposited or withdrawn from your account. WEB SOCKET STREAM WSS now supports live subscribing/unsubscribing to streams. 2019-09-09 New WebSocket streams for bookTickers added: <symbol>@bookTicker and !bookTicker . See web-socket-streams.md for details. 2019-09-03 Faster order book data with 100ms updates: <symbol>@depth@100ms and <symbol>@depth#@100ms Added \"Update Speed:\" to web-socket-streams.md Removed deprecated v1 endpoints as per previous announcement: GET api/v1/order GET api/v1/openOrders POST api/v1/order DELETE api/v1/order GET api/v1/allOrders GET api/v1/account GET api/v1/myTrades 2019-08-16 (Update 2) GET api/v1/depth limit of 10000 has been temporarily removed 2019-08-16 In Q4 2017, the following endpoints were deprecated and removed from the API documentation. They have been permanently removed from the API as of this version. We apologize for the omission from the original changelog: GET api/v1/order GET api/v1/openOrders POST api/v1/order DELETE api/v1/order GET api/v1/allOrders GET api/v1/account GET api/v1/myTrades Streams, endpoints, parameters, payloads, etc. described in the documents in this repository are considered official and supported . The use of any other streams, endpoints, parameters, or payloads, etc. is not supported; use them at your own risk and with no guarantees. 2019-08-15 Rest API New order type: OCO (\"One Cancels the Other\") An OCO has 2 orders: (also known as legs in financial terms) STOP_LOSS or STOP_LOSS_LIMIT leg LIMIT_MAKER leg Price Restrictions: SELL Orders : Limit Price > Last Price > Stop Price BUY Orders : Limit Price < Last Price < Stop Price As stated, the prices must \"straddle\" the last traded price on the symbol. EX: If the last price is 10: A SELL OCO must have the limit price greater than 10, and the stop price less than 10. A BUY OCO must have a limit price less than 10, and the stop price greater than 10. Quantity Restrictions: Both legs must have the same quantity . ICEBERG quantities however, do not have to be the same. Execution Order: If the LIMIT_MAKER is touched, the limit maker leg will be executed first BEFORE canceling the Stop Loss Leg. if the Market Price moves such that the STOP_LOSS or STOP_LOSS_LIMIT will trigger, the Limit Maker leg will be canceled BEFORE executing the STOP_LOSS Leg. Canceling an OCO Canceling either order leg will cancel the entire OCO. The entire OCO can be canceled via the orderListId or the listClientOrderId . New Enums for OCO: ListStatusType RESPONSE - used when ListStatus is responding to a failed action. (either order list placement or cancellation) EXEC_STARTED - used when an order list has been placed or there is an update to a list's status. ALL_DONE - used when an order list has finished executing and is no longer active. ListOrderStatus EXECUTING - used when an order list has been placed or there is an update to a list's status. ALL_DONE - used when an order list has finished executing and is no longer active. REJECT - used when ListStatus is responding to a failed action. (either order list placement or cancellation) ContingencyType OCO - specifies the type of order list. New Endpoints: POST api/v3/order/oco DELETE api/v3/orderList GET api/v3/orderList recvWindow cannot exceed 60000. New intervalLetter values for headers: SECOND => S MINUTE => M HOUR => H DAY => D New Headers X-MBX-USED-WEIGHT-(intervalNum)(intervalLetter) will give your current used request weight for the (intervalNum)(intervalLetter) rate limiter. For example, if there is a one minute request rate weight limiter set, you will get a X-MBX-USED-WEIGHT-1M header in the response. The legacy header X-MBX-USED-WEIGHT will still be returned and will represent the current used weight for the one minute request rate weight limit. New Header X-MBX-ORDER-COUNT-(intervalNum)(intervalLetter) that is updated on any valid order placement and tracks your current order count for the interval; rejected/unsuccessful orders are not guaranteed to have X-MBX-ORDER-COUNT-** headers in the response. Eg. X-MBX-ORDER-COUNT-1S for \"orders per 1 second\" and X-MBX-ORDER-COUNT-1D for orders per \"one day\" GET api/v1/depth now supports limit 5000 and 10000; weights are 50 and 100 respectively. GET api/v1/exchangeInfo has a new parameter ocoAllowed . USER DATA STREAM executionReport event now contains \"g\" which has the orderListId ; it will be set to -1 for non-OCO orders. New Event Type listStatus ; listStatus is sent on an update to any OCO order. New Event Type outboundAccountPosition ; outboundAccountPosition is sent any time an account's balance changes and contains the assets that could have changed by the event that generated the balance change (a deposit, withdrawal, trade, order placement, or cancellation). NEW ERRORS -1131 BAD_RECV_WINDOW recvWindow must be less than 60000 -1099 Not found, authenticated, or authorized This replaces error code -1999 NEW -2011 ERRORS OCO_BAD_ORDER_PARAMS A parameter for one of the orders is incorrect. OCO_BAD_PRICES The relationship of the prices for the orders is not correct. UNSUPPORTED_ORD_OCO OCO orders are not supported for this symbol. 2019-03-12 Rest API X-MBX-USED-WEIGHT header added to Rest API responses. Retry-After header added to Rest API 418 and 429 responses. When canceling the Rest API can now return errorCode -1013 OR -2011 if the symbol's status isn't TRADING . api/v1/depth no longer has the ignored and empty [] . api/v3/myTrades now returns quoteQty ; the price * qty of for the trade. Websocket streams <symbol>@depth and <symbol>@depthX streams no longer have the ignored and empty [] . System improvements Matching Engine stability/reliability improvements. Rest API performance improvements. 2018-11-13 Rest API Can now cancel orders through the Rest API during a trading ban. New filters: PERCENT_PRICE , MARKET_LOT_SIZE , MAX_NUM_ICEBERG_ORDERS . Added RAW_REQUESTS rate limit. Limits based on the number of requests over X minutes regardless of weight. /api/v3/ticker/price increased to weight of 2 for a no symbol query. /api/v3/ticker/bookTicker increased weight of 2 for a no symbol query. DELETE /api/v3/order will now return an execution report of the final state of the order. MIN_NOTIONAL filter has two new parameters: applyToMarket (whether or not the filter is applied to MARKET orders) and avgPriceMins (the number of minutes over which the price averaged for the notional estimation). intervalNum added to /api/v1/exchangeInfo limits. intervalNum describes the amount of the interval. For example: intervalNum 5, with interval minute, means \"every 5 minutes\". Explanation for the average price calculation: (qty * price) of all trades / sum of qty of all trades over previous 5 minutes. If there is no trade in the last 5 minutes, it takes the first trade that happened outside of the 5min window. For example if the last trade was 20 minutes ago, that trade's price is the 5 min average. If there is no trade on the symbol, there is no average price and market orders cannot be placed. On a new symbol with applyToMarket enabled on the MIN_NOTIONAL filter, market orders cannot be placed until there is at least 1 trade. The current average price can be checked here: https://api.binance.com/api/v3/avgPrice?symbol=<symbol> For example: https://api.binance.com/api/v3/avgPrice?symbol=BNBUSDT User data stream Last quote asset transacted quantity (as variable Y ) added to execution reports. Represents the lastPrice * lastQty ( L * l ). 2018-07-18 Rest API New filter: ICEBERG_PARTS POST api/v3/order new defaults for newOrderRespType . ACK , RESULT , or FULL ; MARKET and LIMIT order types default to FULL , all other orders default to ACK . POST api/v3/order RESULT and FULL responses now have cummulativeQuoteQty GET api/v3/openOrders with no symbol weight reduced to 40. GET api/v3/ticker/24hr with no symbol weight reduced to 40. Max amount of trades from GET /api/v1/trades increased to 1000. Max amount of trades from GET /api/v1/historicalTrades increased to 1000. Max amount of aggregate trades from GET /api/v1/aggTrades increased to 1000. Max amount of aggregate trades from GET /api/v1/klines increased to 1000. Rest API Order lookups now return updateTime which represents the last time the order was updated; time is the order creation time. Order lookup endpoints will now return cummulativeQuoteQty . If cummulativeQuoteQty is < 0, it means the data isn't available for this order at this time. REQUESTS rate limit type changed to REQUEST_WEIGHT . This limit was always logically request weight and the previous name for it caused confusion. User data stream cummulativeQuoteQty field added to order responses and execution reports (as variable Z ). Represents the cummulative amount of the quote that has been spent (with a BUY order) or received (with a SELL order). Historical orders will have a value < 0 in this field indicating the data is not available at this time. cummulativeQuoteQty divided by cummulativeQty will give the average price for an order. O (order creation time) added to execution reports 2018-01-23 GET /api/v1/historicalTrades weight decreased to 5 GET /api/v1/aggTrades weight decreased to 1 GET /api/v1/klines weight decreased to 1 GET /api/v1/ticker/24hr all symbols weight decreased to number of trading symbols / 2 GET /api/v3/allOrders weight decreased to 5 GET /api/v3/myTrades weight decreased to 5 GET /api/v3/account weight decreased to 5 GET /api/v1/depth limit=500 weight decreased to 5 GET /api/v1/depth limit=1000 weight decreased to 10 -1003 error message updated to direct users to websockets 2018-01-20 GET /api/v1/ticker/24hr single symbol weight decreased to 1 GET /api/v3/openOrders all symbols weight decreased to number of trading symbols / 2 GET /api/v3/allOrders weight decreased to 15 GET /api/v3/myTrades weight decreased to 15 GET /api/v3/order weight decreased to 1 myTrades will now return both sides of a self-trade/wash-trade 2018-01-14 GET /api/v1/aggTrades weight changed to 2 GET /api/v1/klines weight changed to 2 GET /api/v3/order weight changed to 2 GET /api/v3/allOrders weight changed to 20 GET /api/v3/account weight changed to 20 GET /api/v3/myTrades weight changed to 20 GET /api/v3/historicalTrades weight changed to 20","title":"CHANGELOG for Binance's API (2023-01-23)"},{"location":"CHANGELOG/#changelog-for-binances-api-2023-01-23","text":"","title":"CHANGELOG for Binance's API (2023-01-23)"},{"location":"CHANGELOG/#2023-01-23","text":"New API cluster has been added. Note that all endpoints are functionally equal, but may vary in performance. https://api4.binance.com","title":"2023-01-23"},{"location":"CHANGELOG/#release-date-tbd","text":"New Feature : Self-Trade Prevention (aka STP) will be added to the system at a later date. This will prevent orders from matching with orders from the same account, or accounts under the same tradeGroupId . Please refer to GET /api/v3/exchangeInfo from the Rest API or exchangeInfo from the Websocket API on the status. \"defaultSelfTradePreventionMode\": \"NONE\", //If selfTradePreventionMode not provided, this will be the value passed to the engine \"allowedSelfTradePreventionModes\": [ //What the allowed modes of selfTradePrevention are \"NONE\", \"EXPIRE_TAKER\", \"EXPIRE_BOTH\", \"EXPIRE_MAKER\" ] Additional details on the functionality of STP is explained in the STP FAQ document. REST API New order status: EXPIRED_IN_MATCH - This means that the order expired due to STP being triggered. New endpoint: GET /api/v3/myPreventedMatches - This queries the orders that expired due to STP being triggered. New optional parameter selfTradePreventionMode has been added to the following endpoints: POST /api/v3/order POST /api/v3/order/oco POST /api/v3/cancelReplace New responses that will appear for all order placement endpoints if there was a prevented match (i.e. if an order could have matched with an order of the same account, or the accounts are in the same tradeGroupId ): tradeGroupId - This will only appear if account is configured to a tradeGroupId and if there was a prevented match. preventedQuantity - Only appears if there was a prevented match An array preventedMatches with the following fields: preventedMatchId makerOrderId price takerPreventedQuantity - This will only appear if selfTradePreventionMode set is EXPIRE_TAKER or EXPIRE_BOTH . makerPreventedQuantity - This will only appear if selfTradePreventionMode set is EXPIRE_MAKER or EXPIRE_BOTH . New fields preventedMatchId and preventedQuantity that can appear in the order query endpoints if the order had expired due to an STP trigger: GET /api/v3/order GET /api/v3/openOrders GET /api/v3/allOrders WEBSOCKET API New order status: EXPIRED_IN_MATCH - This means that the order expired due to STP being triggered. New optional parameter selfTradePreventionMode has been added to the following requests: order.place orderList.place order.cancelReplace New request: myPreventedMatches - This queries the orders that expired due to STP being triggered. New responses that will appear for all order placement endpoints if there was a prevented match (i.e. if an order could have matched with an order of the same account, or the accounts are in the same tradeGroupId ): tradeGroupId - This will only appear if account is configured to a tradeGroupId and if there was a prevented match. preventedQuantity - Only appears if there was a prevented match. An array preventedMatches with the following fields: preventedMatchId makerOrderId price takerPreventedQuantity - This will only appear if selfTradePreventionMode set is EXPIRE_TAKER or EXPIRE_BOTH . makerPreventedQuantity - This will only appear if selfTradePreventionMode set is EXPIRE_MAKER or EXPIRE_BOTH . New fields preventedMatchId and preventedQuantity that can appear in the order query requests if the order had expired due to STP trigger: order.status openOrders.status allOrders USER DATA STREAM New execution Type: TRADE_PREVENTION New fields for executionReport (These fields will only appear if the order has expired due to STP trigger) u - tradeGroupId v - preventedMatchId U - counterOrderId A - preventedQuantity B - lastPreventedQuantity","title":"RELEASE DATE TBD"},{"location":"CHANGELOG/#2022-12-28","text":"SPOT WebSocket API documentation has been updated to show how to sign a request using an RSA key.","title":"2022-12-28"},{"location":"CHANGELOG/#2022-12-26","text":"Spot WebSocket API is now available on the live exchange. Spot Websocket API can be accessed through this URL: wss://ws-api.binance.com/ws-api/v3","title":"2022-12-26"},{"location":"CHANGELOG/#2022-12-15","text":"New RSA signature Documentation has been updated to show how to create RSA keys. For security reasons, we recommend to use RSA keys instead of HMAC keys when generating an API key. We accept PKCS#8 (BEGIN PUBLIC KEY). More details on how to upload your RSA public key will be added at a later date. SPOT WebSocket API is now available on SPOT Testnet . WebSocket API allows placing orders, canceling orders, etc. through a WebSocket connection. WebSocket API is a separate service from WebSocket Market Data streams. I.e., placing orders and listening to market data requires two separate WebSocket connections. WebSocket API is subject to the same Filter and Rate Limit rules as REST API. WebSocket API and REST API are functionally equivalent: they provide the same features, accept the same parameters, return the same status and error codes. WEBSOCKET API WILL BE AVAILABLE ON THE LIVE EXCHANGE AT A LATER DATE.","title":"2022-12-15"},{"location":"CHANGELOG/#2022-12-13","text":"REST API Some error messages on error code -1003 have changed. * Previous error message: Too much request weight used; current limit is %s request weight per %s %s. Please use the websocket for live updates to avoid polling the API. has been updated to: Too much request weight used; current limit is %s request weight per %s. Please use WebSocket Streams for live updates to avoid polling the API. Previous error message Way too much request weight used; IP banned until %s. Please use the websocket for live updates to avoid bans. has been updated to: Way too much request weight used; IP banned until %s. Please use WebSocket Streams for live updates to avoid bans.","title":"2022-12-13"},{"location":"CHANGELOG/#2022-12-05","text":"Notice: These changes are being rolled out gradually to all our servers, and will take approximately a week to complete. WEBSOCKET !bookTicker will be removed by December 7, 2022 . Please use the Individual Book Ticker Streams instead ( <symbol>@bookTicker ). Multiple <symbol>@bookTicker streams can be subscribed to over one connection. (E.g. wss://stream.binance.com:9443/stream?streams=btcusdt@bookTicker/bnbbtc@bookTicker ) REST API New error code -1135 This error code will occur if a parameter requiring a JSON object is invalid. New error code -1108 This error will occur if a value to a parameter being sent was too large, potentially causing overflow. This error code can occur in the following endpoints: POST /api/v3/order POST /api/v3/order/cancelReplace POST /api/v3/order/oco Changes to GET /api/v3/aggTrades Previous behavior: startTime and endTime had to be used in combination and could only be an hour apart. New behavior: startTime and endTime can be used individually and the 1 hour limit has been removed. When using startTime only, this will return trades from that time, up to the limit provided. When using endTime only, this will return trades before that time, up to the limit provided. If limit not provided, regardless of used in combination or sent individually, the endpoint will use the default limit. Changes to GET /api/v3/myTrades Fixed a bug where symbol + orderId combination would return all trades even if the number of trades went beyond the 500 default limit. Previous behavior: The API would send specific error messages depending on the combination of parameters sent. E.g: json { \"code\": -1106, \"msg\": \"Parameter X was sent when not required.\" } * New behavior: If the combinations of optional parameters to the endpoint were not supported, then the endpoint will respond with the generic error: json { \"code\": -1128, \"msg\": \"Combination of optional parameters invalid.\" } * Added a new combination of supported parameters: symbol + orderId + fromId . * The following combinations of parameters were previously supported but no longer accepted, as these combinations were only taking fromId into consideration, ignoring startTime and endTime : * symbol + fromId + startTime * symbol + fromId + endTime * symbol + fromId + startTime + endTime * Thus, these are the supported combinations of parameters: * symbol * symbol + orderId * symbol + startTime * symbol + endTime * symbol + fromId * symbol + startTime + endTime * symbol + orderId + fromId Note: These new fields will appear approximately a week from the release date. Changes to GET /api/v3/exchangeInfo New fields defaultSelfTradePreventionMode and allowedSelfTradePreventionModes Changes to the Order Placement Endpoints/Order Query/Order Cancellation Endpoints: New field selfTradePreventionMode will appear in the response. Affects the following endpoints: POST /api/v3/order POST /api/v3/order/oco POST /api/v3/order/cancelReplace GET /api/v3/order DELETE /api/v3/order DELETE /api/v3/orderList Changes to GET /api/v3/account New field requireSelfTradePrevention will appear in the response. New field workingTime , indicating when the order started working on the order book, will appear in the following endpoints: POST /api/v3/order GET /api/v3/order POST /api/v3/order/cancelReplace POST /api/v3/order/oco GET /api/v3/order GET /api/v3/openOrders GET /api/v3/allOrders Field trailingTime , indicating the time when the trailing order is active and tracking price changes, will appear for the following order types ( TAKE_PROFIT , TAKE_PROFIT_LIMIT , STOP_LOSS , STOP_LOSS_LIMIT if trailingDelta parameter was provided) for the following endpoints: POST /api/v3/order GET /api/v3/order GET /api/v3/openOrders GET /api/v3/allOrders POST /api/v3/order/cancelReplace DELETE /api/v3/order Field commissionRates will appear in the GET /api/v3/acccount response USER DATA STREAM eventType executionReport has new fields V - selfTradePreventionMode D - trailing_time (Appears if the trailing stop order is active) W - workingTime (Appears if isWorking = true )","title":"2022-12-05"},{"location":"CHANGELOG/#2022-12-02","text":"Added a new market data base URL https://data.binance.com . Added a new WebSocket URL wss://data-stream.binance.com .","title":"2022-12-02"},{"location":"CHANGELOG/#2022-09-30","text":"Scheduled changes to the removal of !bookTicker around November 2022. The All Book Tickers stream ( !bookTicker ) is set to be removed in November 2022 . More details of the actual removal date will be announced at a later time. Please use the Individual Book Ticker Streams instead. ( <symbol>@bookTicker ). Multiple <symbol>@bookTicker streams can be subscribed to over one connection. Example: wss://stream.binance.com:9443/stream?streams=btcusdt@bookTicker/bnbbtc@bookTicker","title":"2022-09-30"},{"location":"CHANGELOG/#2022-09-15","text":"Note that these are rolling changes, so it may take a few days for it to rollout to all our servers. Changes to GET /api/v3/exchangeInfo New optional parameter permissions added to display all symbols with the permissions matching the parameter provided. (eg. SPOT , MARGIN ) If not provided, the default value will be [\"SPOT\",\"MARGIN\",\"LEVERAGED\"] . This means the request GET /api/v3/exchangeInfo without any parameters will show all symbols that can be used for SPOT , MARGIN , and/or LEVERAGED trading. To search for symbols that can be traded on other permissions (e.g. TRD_GRP_004 , etc), then this needs to be searched for explicitly. (e.g. permissions = TRD_GRP_004 ) Cannot be combined with symbol or symbols","title":"2022-09-15"},{"location":"CHANGELOG/#2022-08-23","text":"Note that these are rolling changes, so it may take a few days for it to rollout to all our servers. Changes to GET /api/v3/ticker and GET /api/v3/ticker/24hr New optional parameter type added Supported values for parameter type are FULL and MINI FULL is the default value and the response that is currently being returned from the endpoint MINI omits the following fields from the response: priceChangePercent , weightedAvgPrice , bidPrice , bidQty , askPrice , askQty , and lastQty New error code -1008 This is sent whenever the servers are overloaded with requests. New field brokered has been added to GET /api/v3/account New kline interval: 1s New endpoint added: GET /api/v3/uiKlines","title":"2022-08-23"},{"location":"CHANGELOG/#2022-08-08","text":"REST API Changes to POST /api/v3/order and POST /api/v3/order/cancelReplace New optional fields strategyId and strategyType strategyId is a parameter used to identify an order as part of a strategy. strategyType is a parameter used to identify what strategy was running. (E.g. If all the orders are part of spot grid strategy, it can be set to strategyType=1000000 ) Note that the minimum value allowed for strategyType is 1000000 . Changes to POST /api/v3/order/oco New optional fields limitStrategyId , limitStrategyType , stopStrategyId , stopStrategyType These are the strategy metadata parameters for both legs of the OCO orders. limitStrategyType and stopStrategyType both cannot be less than 1000000 . Changes to GET /api/v3/order , GET /api/v3/openOrders , and GET /api/v3/allOrders New fields strategyId and strategyType will appear in the response JSON for orders that had these fields populated upon order placement. Changes to DELETE /api/v3/order and DELETE /api/v3/openOrders New fields strategyId and strategyType will appear in the response JSON for cancelled orders that had these fields populated upon order placement. USER DATA STREAM New fields to eventType executionReport j for strategyId J for strategyType Note that these fields only appear if these were populated upon order placement.","title":"2022-08-08"},{"location":"CHANGELOG/#2022-06-20","text":"Changes to GET /api/v3/ticker Weight has been reduced from 5 to 2 per symbol, regardless of windowSize . The max number of symbols that can be processed in a request is 100. If the number of symbols sent is more than 100, the error will be as follows: json { \"code\": -1101, \"msg\": \"Too many values sent for parameter 'symbols', maximum allowed up to 100.\" } The max Weight for this endpoint will cap at 100. I.e. If the request has more than 50 symbols, the Weight will still be 100, regardless of windowSize .","title":"2022-06-20"},{"location":"CHANGELOG/#2022-06-15","text":"Note: The update is being rolled out over the next few days, so these changes may not be visible right away. SPOT API GET /api/v3/ticker added Rolling window price change statistics based on windowSize provided. Contrary to GET /api/v3/ticker/24hr the list of symbols cannot be omitted. If windowSize not specified, the value will default to 1d . Response is similar to GET /api/v3/ticker/24hr , minus the following fields: prevClosePrice , lastQty , bidPrice , bidQty , askPrice , askQty GET /api/v3/exchangeInfo returns new field cancelReplaceAllowed in symbols list. POST /api/v3/order/cancelReplace added Cancels an existing order and places a new order on the same symbol. The filters are evaluated before the cancel order is placed. e.g. If the MAX_NUM_ORDERS filter is 10, and the total number of open orders on the account is also 10, when using POST /api/v3/order/cancelReplace both the cancel order placement and new order will fail because of the filter. The change is being rolled out in the next few days, thus this feature will be enabled once the upgrade is completed. New filter NOTIONAL has been added. Defines the allowed notional value ( price * quantity ) based on a configured minNotional and maxNotional New exchange filter EXCHANGE_MAX_NUM_ICEBERG_ORDERS has been added. Defines the limit of open iceberg orders on an account","title":"2022-06-15"},{"location":"CHANGELOG/#2022-05-23","text":"Changes to Order Book Depth Levels Quantities in the Depth levels were returning negative values in situations where they were exceeding the max value, resulting in an overflow. Going forward depth levels will not overflow, but will be capped at the max value based on the precision of the base asset. This means that the depth level is at max value or more . E.g. If the precision is 8, then the max value for quantity will be at 92,233,720,368.54775807. When the fix has been applied, a change in the order book at the affected price level is required for the changes to be visible. What does this affect? SPOT API GET /api/v3/depth Websocket Streams <symbol>@depth <symbol>@depth@100ms <symbol>@depth<levels> <symbol>@depth<levels>@100ms Updates to MAX_POSITION If an order's quantity can cause the position to overflow, this will now fail the MAX_POSITION filter.","title":"2022-05-23"},{"location":"CHANGELOG/#2022-05-17","text":"Changes to GET api/v3/aggTrades When providing startTime and endTime , the oldest items are returned. Changed error messaging on GET /api/v3/myTrades where parameter symbol is not provided: { \"code\": -1102, \"msg\": \"Mandatory parameter 'symbol' was not sent, was empty/null, or malformed.\" } The following endpoints now support multi-symbol querying using the parameter symbols . GET /api/v3/ticker/24hr GET /api/v3/ticker/price GET /api/v3/ticker/bookTicker In the above, the request weight will depend on the number of symbols provided in symbols . Please refer to the table below: Endpoint Number of Symbols Weight GET /api/v3/ticker/price Any 2 GET /api/v3/ticker/bookTicker Any 2 GET /api/v3/ticker/24hr 1-20 1 GET /api/v3/ticker/24hr 21-100 20 GET /api/v3/ticker/24hr 101 or more 40","title":"2022-05-17"},{"location":"CHANGELOG/#2022-04-13","text":"REST API Trailing Stops have been enabled. This is a type of algo order where the activation is based on a percentage of a price change in the market using the new parameter trailingDelta . This can only used with any of the following order types: STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , TAKE_PROFIT_LIMIT . The trailingDelta parameter will be done in Basis Points or BIPS. For example: a STOP_LOSS SELL order with a trailingDelta of 100 will trigger after a price decrease of 1% from the highest price after the order is placed. (100 / 10,000 => 0.01 => 1%) When used in combination with OCO Orders, the trailingDelta will determine when the contingent leg of the OCO will trigger. When trailingDelta is used in combination with stopPrice , once the stopPrice condition is met, the trailing stop starts tracking the price change from the stopPrice based on the trailingDelta provided. When no stopPrice is sent, the trailing stop starts tracking the price changes from the last price based on the trailingDelta provided. Changes to POST /api/v3/order New optional field trailingDelta Changes to POST /api/v3/order/test New optional field trailingDelta Changes to POST /api/v3/order/oco New optional field trailingDelta A new filter TRAILING_DELTA has been added. This filter is defined by the minimum and maximum values for the trailingDelta value. USER DATA STREAM New field in executionReport \"d\" for trailingDelta","title":"2022-04-13"},{"location":"CHANGELOG/#2022-04-12","text":"Note: The changes are being rolled out during the next few days, so these will not appear right away. Error message changed on GET api/v3/allOrders where symbol is not provided: json { \"code\": -1102, \"msg\": \"Mandatory parameter 'symbol' was not sent, was empty/null, or malformed.\" } Fixed a typo with an error message when an account has disabled permissions (e.g. to withdraw, to trade, etc) json \"This action is disabled on this account.\" During a market data audit, we detected some issues with the Spot aggregate trade data. Missing aggregate trades were recovered. Duplicated records were marked invalid with the following values: p = '0' // price q = '0' // qty f = -1 // \ufb01rst_trade_id l = -1 // last_trade_id","title":"2022-04-12"},{"location":"CHANGELOG/#2022-02-28","text":"New field allowTrailingStop has been added to GET /api/v3/exchangeInfo","title":"2022-02-28"},{"location":"CHANGELOG/#2022-02-24","text":"(price-minPrice) % tickSize == 0 rule in PRICE_FILTER has been changed to price % tickSize == 0 . A new filter PERCENT_PRICE_BY_SIDE has been added. Changes to GET api/v3/depth The limit value can be outside of the previous values (i.e. 5, 10, 20, 50, 100, 500, 1000,5000) and will return the correct limit. (i.e. if limit=3 then the response will be the top 3 bids and asks) The limit still cannot exceed 5000. If the limit provided is greater than 5000, then the response will be truncated to 5000. Due to the changes, these are the updated request weights based on the limit value provided: Limit Request Weight 1-100 1 101-500 5 501-1000 10 1001-5000 50 Changes to GET api/v3/aggTrades When providing startTime and endTime , the oldest items are returned.","title":"2022-02-24"},{"location":"CHANGELOG/#2021-12-29","text":"Removed out dated \"Symbol Type\" enum; added \"Permissions\" enum.","title":"2021-12-29"},{"location":"CHANGELOG/#2021-11-01","text":"GET /api/v3/rateLimit/order added The endpoint will display the user's current order count usage for all intervals. This endpoint will have a request weight of 20.","title":"2021-11-01"},{"location":"CHANGELOG/#2021-09-14","text":"Add a YAML file with OpenApi specification on the RESTful API.","title":"2021-09-14"},{"location":"CHANGELOG/#2021-08-12","text":"GET api/v3/myTrades has a new optional field orderId","title":"2021-08-12"},{"location":"CHANGELOG/#2021-05-12","text":"Added Data Source in the documentation to explain where each endpoint is retrieving its data. Added field Data Source to each API endpoint in the documentation GET api/v3/exchangeInfo now supports single or multi-symbol query","title":"2021-05-12"},{"location":"CHANGELOG/#2021-04-26","text":"On April 28, 2021 00:00 UTC the weights to the following endpoints will be adjusted: GET /api/v3/order weight increased to 2 GET /api/v3/openOrders weight increased to 3 GET /api/v3/allOrders weight increased to 10 GET /api/v3/orderList weight increased to 2 GET /api/v3/openOrderList weight increased to 3 GET /api/v3/account weight increased to 10 GET /api/v3/myTrades weight increased to 10 GET /api/v3/exchangeInfo weight increased to 10","title":"2021-04-26"},{"location":"CHANGELOG/#2021-01-01","text":"USER DATA STREAM outboundAccountInfo has been removed.","title":"2021-01-01"},{"location":"CHANGELOG/#2020-11-27","text":"New API clusters have been added in order to improve performance. Users can access any of the following API clusters, in addition to api.binance.com If there are any performance issues with accessing api.binance.com please try any of the following instead: https://api1.binance.com/api/v3/* https://api2.binance.com/api/v3/* https://api3.binance.com/api/v3/*","title":"2020-11-27"},{"location":"CHANGELOG/#2020-09-09","text":"USER DATA STREAM outboundAccountInfo has been deprecated. outboundAccountInfo will be removed in the future. (Exact date unknown) Please use outboundAccountPosition instead. outboundAccountInfo will now only show the balance of non-zero assets and assets that have been reduced to 0.","title":"2020-09-09"},{"location":"CHANGELOG/#2020-05-01","text":"From 2020-05-01 UTC 00:00, all symbols will have a limit of 200 open orders using the MAX_NUM_ORDERS filter. No existing orders will be removed or canceled. Accounts that have 200 or more open orders on a symbol will not be able to place new orders on that symbol until the open order count is below 200. OCO orders count as 2 open orders before the LIMIT order is touched or the STOP_LOSS (or STOP_LOSS_LIMIT ) order is triggered; once this happens the other order is canceled and will no longer count as an open order.","title":"2020-05-01"},{"location":"CHANGELOG/#2020-04-25","text":"","title":"2020-04-25"},{"location":"CHANGELOG/#rest-api","text":"New field permissions Defines the trading permissions that are allowed on accounts and symbols. permissions is an enum array; values: SPOT MARGIN permissions will replace isSpotTradingAllowed and isMarginTradingAllowed on GET api/v3/exchangeInfo in future API versions (v4+). For an account to trade on a symbol, the account and symbol must share at least 1 permission in common. Updates to GET api/v3/exchangeInfo New field permissions added. New field quoteAssetPrecision added; a duplicate of the quotePrecision field. quotePrecision will be removed in future API versions (v4+). Updates to GET api/v3/account New field permissions added. New endpoint DELETE api/v3/openOrders This will allow a user to cancel all open orders on a single symbol. This endpoint will cancel all open orders including OCO orders. Orders can be canceled via the API on symbols in the BREAK or HALT status.","title":"REST API"},{"location":"CHANGELOG/#user-data","text":"OutboundAccountInfo has new field P which shows the trading permissions of the account.","title":"USER DATA"},{"location":"CHANGELOG/#2020-04-23","text":"WEB SOCKET STREAM WebSocket connections have a limit of 5 incoming messages per second. A message is considered: A PING frame A PONG frame A JSON control message (e.g. subscribe, unsubscribe) A connection that goes beyond the limit will be disconnected; IPs that are repeatedly disconnected may be banned. A single connection can listen to a maximum of 1024 streams.","title":"2020-04-23"},{"location":"CHANGELOG/#2020-03-24","text":"MAX_POSITION filter added. This filter defines the allowed maximum position an account can have on the base asset of a symbol. An account's position defined as the sum of the account's: free balance of the base asset locked balance of the base asset sum of the qty of all open BUY orders BUY orders will be rejected if the account's position is greater than the maximum position allowed.","title":"2020-03-24"},{"location":"CHANGELOG/#2019-11-22","text":"Quote Order Qty Market orders have been enabled on all symbols. Quote Order Qty MARKET orders allow a user to specify the total quoteOrderQty spent or received in the MARKET order. Quote Order Qty MARKET orders will not break LOT_SIZE filter rules; the order will execute a quantity that will have the notional value as close as possible to quoteOrderQty . Using BNBBTC as an example: On the BUY side, the order will buy as many BNB as quoteOrderQty BTC can. On the SELL side, the order will sell as much BNB as needed to receive quoteOrderQty BTC.","title":"2019-11-22"},{"location":"CHANGELOG/#2019-11-13","text":"","title":"2019-11-13"},{"location":"CHANGELOG/#rest-api_1","text":"api/v3/exchangeInfo has new fields: quoteOrderQtyMarketAllowed baseCommissionDecimalPlaces quoteCommissionDecimalPlaces MARKET orders have a new optional field: quoteOrderQty used to specify the quote quantity to BUY or SELL. This cannot be used in combination with quantity . The exact timing that quoteOrderQty MARKET orders will be enabled is TBD. There will be a separate announcement and further details at that time. All order query endpoints will return a new field origQuoteOrderQty in the JSON payload. (e.g. GET api/v3/allOrders) Updated error messages for -1128 Sending an OCO with a stopLimitPrice but without a stopLimitTimeInForce will return the error: json { \"code\": -1128, \"msg\": \"Combination of optional parameters invalid. Recommendation: 'stopLimitTimeInForce' should also be sent.\" } Updated error messages for -1003 to specify the limit is referring to the request weight, not to the number of requests. Deprecation of v1 endpoints : By end of Q1 2020, the following endpoints will be removed from the API. The documentation has been updated to use the v3 versions of these endpoints. GET api/v1/depth GET api/v1/historicalTrades GET api/v1/aggTrades GET api/v1/klines GET api/v1/ticker/24hr GET api/v1/ticker/price GET api/v1/exchangeInfo POST api/v1/userDataStream PUT api/v1/userDataStream GET api/v1/ping GET api/v1/time GET api/v1/ticker/bookTicker These endpoints however, will NOT be migrated to v3. Please use the following endpoints instead moving forward. Old V1 Endpoints New V3 Endpoints GET api/v1/ticker/allPrices GET api/v3/ticker/price GET api/v1/ticker/allBookTickers GET api/v3/ticker/bookTicker","title":"Rest API"},{"location":"CHANGELOG/#user-data-stream","text":"Changes to executionReport event If the C field is empty, it will now properly return null , instead of \"null\" . New field Q which represents the quoteOrderQty . balanceUpdate event type added This event occurs when funds are deposited or withdrawn from your account.","title":"USER DATA STREAM"},{"location":"CHANGELOG/#web-socket-stream","text":"WSS now supports live subscribing/unsubscribing to streams.","title":"WEB SOCKET STREAM"},{"location":"CHANGELOG/#2019-09-09","text":"New WebSocket streams for bookTickers added: <symbol>@bookTicker and !bookTicker . See web-socket-streams.md for details.","title":"2019-09-09"},{"location":"CHANGELOG/#2019-09-03","text":"Faster order book data with 100ms updates: <symbol>@depth@100ms and <symbol>@depth#@100ms Added \"Update Speed:\" to web-socket-streams.md Removed deprecated v1 endpoints as per previous announcement: GET api/v1/order GET api/v1/openOrders POST api/v1/order DELETE api/v1/order GET api/v1/allOrders GET api/v1/account GET api/v1/myTrades","title":"2019-09-03"},{"location":"CHANGELOG/#2019-08-16-update-2","text":"GET api/v1/depth limit of 10000 has been temporarily removed","title":"2019-08-16 (Update 2)"},{"location":"CHANGELOG/#2019-08-16","text":"In Q4 2017, the following endpoints were deprecated and removed from the API documentation. They have been permanently removed from the API as of this version. We apologize for the omission from the original changelog: GET api/v1/order GET api/v1/openOrders POST api/v1/order DELETE api/v1/order GET api/v1/allOrders GET api/v1/account GET api/v1/myTrades Streams, endpoints, parameters, payloads, etc. described in the documents in this repository are considered official and supported . The use of any other streams, endpoints, parameters, or payloads, etc. is not supported; use them at your own risk and with no guarantees.","title":"2019-08-16"},{"location":"CHANGELOG/#2019-08-15","text":"","title":"2019-08-15"},{"location":"CHANGELOG/#rest-api_2","text":"New order type: OCO (\"One Cancels the Other\") An OCO has 2 orders: (also known as legs in financial terms) STOP_LOSS or STOP_LOSS_LIMIT leg LIMIT_MAKER leg Price Restrictions: SELL Orders : Limit Price > Last Price > Stop Price BUY Orders : Limit Price < Last Price < Stop Price As stated, the prices must \"straddle\" the last traded price on the symbol. EX: If the last price is 10: A SELL OCO must have the limit price greater than 10, and the stop price less than 10. A BUY OCO must have a limit price less than 10, and the stop price greater than 10. Quantity Restrictions: Both legs must have the same quantity . ICEBERG quantities however, do not have to be the same. Execution Order: If the LIMIT_MAKER is touched, the limit maker leg will be executed first BEFORE canceling the Stop Loss Leg. if the Market Price moves such that the STOP_LOSS or STOP_LOSS_LIMIT will trigger, the Limit Maker leg will be canceled BEFORE executing the STOP_LOSS Leg. Canceling an OCO Canceling either order leg will cancel the entire OCO. The entire OCO can be canceled via the orderListId or the listClientOrderId . New Enums for OCO: ListStatusType RESPONSE - used when ListStatus is responding to a failed action. (either order list placement or cancellation) EXEC_STARTED - used when an order list has been placed or there is an update to a list's status. ALL_DONE - used when an order list has finished executing and is no longer active. ListOrderStatus EXECUTING - used when an order list has been placed or there is an update to a list's status. ALL_DONE - used when an order list has finished executing and is no longer active. REJECT - used when ListStatus is responding to a failed action. (either order list placement or cancellation) ContingencyType OCO - specifies the type of order list. New Endpoints: POST api/v3/order/oco DELETE api/v3/orderList GET api/v3/orderList recvWindow cannot exceed 60000. New intervalLetter values for headers: SECOND => S MINUTE => M HOUR => H DAY => D New Headers X-MBX-USED-WEIGHT-(intervalNum)(intervalLetter) will give your current used request weight for the (intervalNum)(intervalLetter) rate limiter. For example, if there is a one minute request rate weight limiter set, you will get a X-MBX-USED-WEIGHT-1M header in the response. The legacy header X-MBX-USED-WEIGHT will still be returned and will represent the current used weight for the one minute request rate weight limit. New Header X-MBX-ORDER-COUNT-(intervalNum)(intervalLetter) that is updated on any valid order placement and tracks your current order count for the interval; rejected/unsuccessful orders are not guaranteed to have X-MBX-ORDER-COUNT-** headers in the response. Eg. X-MBX-ORDER-COUNT-1S for \"orders per 1 second\" and X-MBX-ORDER-COUNT-1D for orders per \"one day\" GET api/v1/depth now supports limit 5000 and 10000; weights are 50 and 100 respectively. GET api/v1/exchangeInfo has a new parameter ocoAllowed .","title":"Rest API"},{"location":"CHANGELOG/#user-data-stream_1","text":"executionReport event now contains \"g\" which has the orderListId ; it will be set to -1 for non-OCO orders. New Event Type listStatus ; listStatus is sent on an update to any OCO order. New Event Type outboundAccountPosition ; outboundAccountPosition is sent any time an account's balance changes and contains the assets that could have changed by the event that generated the balance change (a deposit, withdrawal, trade, order placement, or cancellation).","title":"USER DATA STREAM"},{"location":"CHANGELOG/#new-errors","text":"-1131 BAD_RECV_WINDOW recvWindow must be less than 60000 -1099 Not found, authenticated, or authorized This replaces error code -1999","title":"NEW ERRORS"},{"location":"CHANGELOG/#new-2011-errors","text":"OCO_BAD_ORDER_PARAMS A parameter for one of the orders is incorrect. OCO_BAD_PRICES The relationship of the prices for the orders is not correct. UNSUPPORTED_ORD_OCO OCO orders are not supported for this symbol.","title":"NEW -2011 ERRORS"},{"location":"CHANGELOG/#2019-03-12","text":"","title":"2019-03-12"},{"location":"CHANGELOG/#rest-api_3","text":"X-MBX-USED-WEIGHT header added to Rest API responses. Retry-After header added to Rest API 418 and 429 responses. When canceling the Rest API can now return errorCode -1013 OR -2011 if the symbol's status isn't TRADING . api/v1/depth no longer has the ignored and empty [] . api/v3/myTrades now returns quoteQty ; the price * qty of for the trade.","title":"Rest API"},{"location":"CHANGELOG/#websocket-streams","text":"<symbol>@depth and <symbol>@depthX streams no longer have the ignored and empty [] .","title":"Websocket streams"},{"location":"CHANGELOG/#system-improvements","text":"Matching Engine stability/reliability improvements. Rest API performance improvements.","title":"System improvements"},{"location":"CHANGELOG/#2018-11-13","text":"","title":"2018-11-13"},{"location":"CHANGELOG/#rest-api_4","text":"Can now cancel orders through the Rest API during a trading ban. New filters: PERCENT_PRICE , MARKET_LOT_SIZE , MAX_NUM_ICEBERG_ORDERS . Added RAW_REQUESTS rate limit. Limits based on the number of requests over X minutes regardless of weight. /api/v3/ticker/price increased to weight of 2 for a no symbol query. /api/v3/ticker/bookTicker increased weight of 2 for a no symbol query. DELETE /api/v3/order will now return an execution report of the final state of the order. MIN_NOTIONAL filter has two new parameters: applyToMarket (whether or not the filter is applied to MARKET orders) and avgPriceMins (the number of minutes over which the price averaged for the notional estimation). intervalNum added to /api/v1/exchangeInfo limits. intervalNum describes the amount of the interval. For example: intervalNum 5, with interval minute, means \"every 5 minutes\".","title":"Rest API"},{"location":"CHANGELOG/#explanation-for-the-average-price-calculation","text":"(qty * price) of all trades / sum of qty of all trades over previous 5 minutes. If there is no trade in the last 5 minutes, it takes the first trade that happened outside of the 5min window. For example if the last trade was 20 minutes ago, that trade's price is the 5 min average. If there is no trade on the symbol, there is no average price and market orders cannot be placed. On a new symbol with applyToMarket enabled on the MIN_NOTIONAL filter, market orders cannot be placed until there is at least 1 trade. The current average price can be checked here: https://api.binance.com/api/v3/avgPrice?symbol=<symbol> For example: https://api.binance.com/api/v3/avgPrice?symbol=BNBUSDT","title":"Explanation for the average price calculation:"},{"location":"CHANGELOG/#user-data-stream_2","text":"Last quote asset transacted quantity (as variable Y ) added to execution reports. Represents the lastPrice * lastQty ( L * l ).","title":"User data stream"},{"location":"CHANGELOG/#2018-07-18","text":"","title":"2018-07-18"},{"location":"CHANGELOG/#rest-api_5","text":"New filter: ICEBERG_PARTS POST api/v3/order new defaults for newOrderRespType . ACK , RESULT , or FULL ; MARKET and LIMIT order types default to FULL , all other orders default to ACK . POST api/v3/order RESULT and FULL responses now have cummulativeQuoteQty GET api/v3/openOrders with no symbol weight reduced to 40. GET api/v3/ticker/24hr with no symbol weight reduced to 40. Max amount of trades from GET /api/v1/trades increased to 1000. Max amount of trades from GET /api/v1/historicalTrades increased to 1000. Max amount of aggregate trades from GET /api/v1/aggTrades increased to 1000. Max amount of aggregate trades from GET /api/v1/klines increased to 1000. Rest API Order lookups now return updateTime which represents the last time the order was updated; time is the order creation time. Order lookup endpoints will now return cummulativeQuoteQty . If cummulativeQuoteQty is < 0, it means the data isn't available for this order at this time. REQUESTS rate limit type changed to REQUEST_WEIGHT . This limit was always logically request weight and the previous name for it caused confusion.","title":"Rest API"},{"location":"CHANGELOG/#user-data-stream_3","text":"cummulativeQuoteQty field added to order responses and execution reports (as variable Z ). Represents the cummulative amount of the quote that has been spent (with a BUY order) or received (with a SELL order). Historical orders will have a value < 0 in this field indicating the data is not available at this time. cummulativeQuoteQty divided by cummulativeQty will give the average price for an order. O (order creation time) added to execution reports","title":"User data stream"},{"location":"CHANGELOG/#2018-01-23","text":"GET /api/v1/historicalTrades weight decreased to 5 GET /api/v1/aggTrades weight decreased to 1 GET /api/v1/klines weight decreased to 1 GET /api/v1/ticker/24hr all symbols weight decreased to number of trading symbols / 2 GET /api/v3/allOrders weight decreased to 5 GET /api/v3/myTrades weight decreased to 5 GET /api/v3/account weight decreased to 5 GET /api/v1/depth limit=500 weight decreased to 5 GET /api/v1/depth limit=1000 weight decreased to 10 -1003 error message updated to direct users to websockets","title":"2018-01-23"},{"location":"CHANGELOG/#2018-01-20","text":"GET /api/v1/ticker/24hr single symbol weight decreased to 1 GET /api/v3/openOrders all symbols weight decreased to number of trading symbols / 2 GET /api/v3/allOrders weight decreased to 15 GET /api/v3/myTrades weight decreased to 15 GET /api/v3/order weight decreased to 1 myTrades will now return both sides of a self-trade/wash-trade","title":"2018-01-20"},{"location":"CHANGELOG/#2018-01-14","text":"GET /api/v1/aggTrades weight changed to 2 GET /api/v1/klines weight changed to 2 GET /api/v3/order weight changed to 2 GET /api/v3/allOrders weight changed to 20 GET /api/v3/account weight changed to 20 GET /api/v3/myTrades weight changed to 20 GET /api/v3/historicalTrades weight changed to 20","title":"2018-01-14"},{"location":"errors/","text":"Error codes for Binance (2022-12-13) Errors consist of two parts: an error code and a message. Codes are universal, but messages can vary. Here is the error JSON payload: { \"code\":-1121, \"msg\":\"Invalid symbol.\" } 10xx - General Server or Network issues -1000 UNKNOWN An unknown error occured while processing the request. -1001 DISCONNECTED Internal error; unable to process your request. Please try again. -1002 UNAUTHORIZED You are not authorized to execute this request. -1003 TOO_MANY_REQUESTS Too many requests queued. Too much request weight used; current limit is %s request weight per %s. Please use WebSocket Streams for live updates to avoid polling the API. Way too much request weight used; IP banned until %s. Please use WebSocket Streams for live updates to avoid bans. -1006 UNEXPECTED_RESP An unexpected response was received from the message bus. Execution status unknown. -1007 TIMEOUT Timeout waiting for response from backend server. Send status unknown; execution status unknown. -1008 SERVER_BUSY Server is currently overloaded with other requests. Please try again in a few minutes. -1014 UNKNOWN_ORDER_COMPOSITION Unsupported order combination. -1015 TOO_MANY_ORDERS Too many new orders. Too many new orders; current limit is %s orders per %s. -1016 SERVICE_SHUTTING_DOWN This service is no longer available. -1020 UNSUPPORTED_OPERATION This operation is not supported. -1021 INVALID_TIMESTAMP Timestamp for this request is outside of the recvWindow. Timestamp for this request was 1000ms ahead of the server's time. -1022 INVALID_SIGNATURE Signature for this request is not valid. 11xx - Request issues -1100 ILLEGAL_CHARS Illegal characters found in a parameter. Illegal characters found in parameter '%s'; legal range is '%s'. -1101 TOO_MANY_PARAMETERS Too many parameters sent for this endpoint. Too many parameters; expected '%s' and received '%s'. Duplicate values for a parameter detected. -1102 MANDATORY_PARAM_EMPTY_OR_MALFORMED A mandatory parameter was not sent, was empty/null, or malformed. Mandatory parameter '%s' was not sent, was empty/null, or malformed. Param '%s' or '%s' must be sent, but both were empty/null! -1103 UNKNOWN_PARAM An unknown parameter was sent. -1104 UNREAD_PARAMETERS Not all sent parameters were read. Not all sent parameters were read; read '%s' parameter(s) but was sent '%s'. -1105 PARAM_EMPTY A parameter was empty. Parameter '%s' was empty. -1106 PARAM_NOT_REQUIRED A parameter was sent when not required. Parameter '%s' sent when not required. -1108 PARAM_OVERFLOW Parameter '%s' overflowed. -1111 BAD_PRECISION Precision is over the maximum defined for this asset. -1112 NO_DEPTH No orders on book for symbol. -1114 TIF_NOT_REQUIRED TimeInForce parameter sent when not required. -1115 INVALID_TIF Invalid timeInForce. -1116 INVALID_ORDER_TYPE Invalid orderType. -1117 INVALID_SIDE Invalid side. -1118 EMPTY_NEW_CL_ORD_ID New client order ID was empty. -1119 EMPTY_ORG_CL_ORD_ID Original client order ID was empty. -1120 BAD_INTERVAL Invalid interval. -1121 BAD_SYMBOL Invalid symbol. -1125 INVALID_LISTEN_KEY This listenKey does not exist. -1127 MORE_THAN_XX_HOURS Lookup interval is too big. More than %s hours between startTime and endTime. -1128 OPTIONAL_PARAMS_BAD_COMBO Combination of optional parameters invalid. -1130 INVALID_PARAMETER Invalid data sent for a parameter. Data sent for parameter '%s' is not valid. -1134 BAD_STRATEGY_TYPE strategyType was less than 1000000. -1135 INVALID_JSON Invalid JSON Request JSON sent for parameter '%s' is not valid -2010 NEW_ORDER_REJECTED NEW_ORDER_REJECTED -2011 CANCEL_REJECTED CANCEL_REJECTED -2013 NO_SUCH_ORDER Order does not exist. -2014 BAD_API_KEY_FMT API-key format invalid. -2015 REJECTED_MBX_KEY Invalid API-key, IP, or permissions for action. -2016 NO_TRADING_WINDOW No trading window could be found for the symbol. Try ticker/24hrs instead. Messages for -1010 ERROR_MSG_RECEIVED, -2010 NEW_ORDER_REJECTED, and -2011 CANCEL_REJECTED This code is sent when an error has been returned by the matching engine. The following messages which will indicate the specific error: Error message Description \"Unknown order sent.\" The order (by either orderId , clOrdId , origClOrdId ) could not be found \"Duplicate order sent.\" The clOrdId is already in use \"Market is closed.\" The symbol is not trading \"Account has insufficient balance for requested action.\" Not enough funds to complete the action \"Market orders are not supported for this symbol.\" MARKET is not enabled on the symbol \"Iceberg orders are not supported for this symbol.\" icebergQty is not enabled on the symbol \"Stop loss orders are not supported for this symbol.\" STOP_LOSS is not enabled on the symbol \"Stop loss limit orders are not supported for this symbol.\" STOP_LOSS_LIMIT is not enabled on the symbol \"Take profit orders are not supported for this symbol.\" TAKE_PROFIT is not enabled on the symbol \"Take profit limit orders are not supported for this symbol.\" TAKE_PROFIT_LIMIT is not enabled on the symbol \"Price * QTY is zero or less.\" price * quantity is too low \"IcebergQty exceeds QTY.\" icebergQty must be less than the order quantity \"This action is disabled on this account.\" Contact customer support; some actions have been disabled on the account. \"Unsupported order combination\" The orderType , timeInForce , stopPrice , and/or icebergQty combination isn't allowed. \"Order would trigger immediately.\" The order's stop price is not valid when compared to the last traded price. \"Cancel order is invalid. Check origClOrdId and orderId.\" No origClOrdId or orderId was sent in. \"Order would immediately match and take.\" LIMIT_MAKER order type would immediately match and trade, and not be a pure maker order. \"The relationship of the prices for the orders is not correct.\" The prices set in the OCO is breaking the Price rules. The rules are: SELL Orders : Limit Price > Last Price > Stop Price BUY Orders : Limit Price < Last Price < Stop Price \"OCO orders are not supported for this symbol\" OCO is not enabled on the symbol \"Quote order qty market orders are not support for this symbol.\" MARKET orders using the parameter quoteOrderQty are not enabled on the symbol. \"Trailing stop orders are not supported for this symbol.\" Orders using trailingDelta are not enabled on the symbol. \"Order cancel-replace is not supported for this symbol.\" POST /api/v3/order/cancelReplace is not enabled for the symbol. Errors regarding POST /api/v3/order/cancelReplace -2021 Order cancel-replace partially failed This code is sent when either the cancellation of the order failed or the new order placement failed but not both. -2022 Order cancel-replace failed. This code is sent when both the cancellation of the order failed and the new order placement failed. Filter failures Error message Description \"Filter failure: PRICE_FILTER\" price is too high, too low, and/or not following the tick size rule for the symbol. \"Filter failure: PERCENT_PRICE\" price is X% too high or X% too low from the average weighted price over the last Y minutes. \"Filter failure: LOT_SIZE\" quantity is too high, too low, and/or not following the step size rule for the symbol. \"Filter failure: MIN_NOTIONAL\" price * quantity is too low to be a valid order for the symbol. \"Filter failure: ICEBERG_PARTS\" ICEBERG order would break into too many parts; icebergQty is too small. \"Filter failure: MARKET_LOT_SIZE\" MARKET order's quantity is too high, too low, and/or not following the step size rule for the symbol. \"Filter failure: MAX_POSITION\" The account's position has reached the maximum defined limit. This is composed of the sum of the balance of the base asset, and the sum of the quantity of all open BUY orders. \"Filter failure: MAX_NUM_ORDERS\" Account has too many open orders on the symbol. \"Filter failure: MAX_NUM_ALGO_ORDERS\" Account has too many open stop loss and/or take profit orders on the symbol. \"Filter failure: MAX_NUM_ICEBERG_ORDERS\" Account has too many open iceberg orders on the symbol. \"Filter failure: TRAILING_DELTA\" trailingDelta is not within the defined range of the filter for that order type. \"Filter failure: EXCHANGE_MAX_NUM_ORDERS\" Account has too many open orders on the exchange. \"Filter failure: EXCHANGE_MAX_NUM_ALGO_ORDERS\" Account has too many open stop loss and/or take profit orders on the exchange. \"Filter failure: EXCHANGE_MAX_NUM_ICEBERG_ORDERS\" Account has too many open iceberg orders on the exchange.","title":"Errors"},{"location":"errors/#error-codes-for-binance-2022-12-13","text":"Errors consist of two parts: an error code and a message. Codes are universal, but messages can vary. Here is the error JSON payload: { \"code\":-1121, \"msg\":\"Invalid symbol.\" }","title":"Error codes for Binance (2022-12-13)"},{"location":"errors/#10xx-general-server-or-network-issues","text":"","title":"10xx - General Server or Network issues"},{"location":"errors/#-1000-unknown","text":"An unknown error occured while processing the request.","title":"-1000 UNKNOWN"},{"location":"errors/#-1001-disconnected","text":"Internal error; unable to process your request. Please try again.","title":"-1001 DISCONNECTED"},{"location":"errors/#-1002-unauthorized","text":"You are not authorized to execute this request.","title":"-1002 UNAUTHORIZED"},{"location":"errors/#-1003-too_many_requests","text":"Too many requests queued. Too much request weight used; current limit is %s request weight per %s. Please use WebSocket Streams for live updates to avoid polling the API. Way too much request weight used; IP banned until %s. Please use WebSocket Streams for live updates to avoid bans.","title":"-1003 TOO_MANY_REQUESTS"},{"location":"errors/#-1006-unexpected_resp","text":"An unexpected response was received from the message bus. Execution status unknown.","title":"-1006 UNEXPECTED_RESP"},{"location":"errors/#-1007-timeout","text":"Timeout waiting for response from backend server. Send status unknown; execution status unknown.","title":"-1007 TIMEOUT"},{"location":"errors/#-1008-server_busy","text":"Server is currently overloaded with other requests. Please try again in a few minutes.","title":"-1008 SERVER_BUSY"},{"location":"errors/#-1014-unknown_order_composition","text":"Unsupported order combination.","title":"-1014 UNKNOWN_ORDER_COMPOSITION"},{"location":"errors/#-1015-too_many_orders","text":"Too many new orders. Too many new orders; current limit is %s orders per %s.","title":"-1015 TOO_MANY_ORDERS"},{"location":"errors/#-1016-service_shutting_down","text":"This service is no longer available.","title":"-1016 SERVICE_SHUTTING_DOWN"},{"location":"errors/#-1020-unsupported_operation","text":"This operation is not supported.","title":"-1020 UNSUPPORTED_OPERATION"},{"location":"errors/#-1021-invalid_timestamp","text":"Timestamp for this request is outside of the recvWindow. Timestamp for this request was 1000ms ahead of the server's time.","title":"-1021 INVALID_TIMESTAMP"},{"location":"errors/#-1022-invalid_signature","text":"Signature for this request is not valid.","title":"-1022 INVALID_SIGNATURE"},{"location":"errors/#11xx-request-issues","text":"","title":"11xx - Request issues"},{"location":"errors/#-1100-illegal_chars","text":"Illegal characters found in a parameter. Illegal characters found in parameter '%s'; legal range is '%s'.","title":"-1100 ILLEGAL_CHARS"},{"location":"errors/#-1101-too_many_parameters","text":"Too many parameters sent for this endpoint. Too many parameters; expected '%s' and received '%s'. Duplicate values for a parameter detected.","title":"-1101 TOO_MANY_PARAMETERS"},{"location":"errors/#-1102-mandatory_param_empty_or_malformed","text":"A mandatory parameter was not sent, was empty/null, or malformed. Mandatory parameter '%s' was not sent, was empty/null, or malformed. Param '%s' or '%s' must be sent, but both were empty/null!","title":"-1102 MANDATORY_PARAM_EMPTY_OR_MALFORMED"},{"location":"errors/#-1103-unknown_param","text":"An unknown parameter was sent.","title":"-1103 UNKNOWN_PARAM"},{"location":"errors/#-1104-unread_parameters","text":"Not all sent parameters were read. Not all sent parameters were read; read '%s' parameter(s) but was sent '%s'.","title":"-1104 UNREAD_PARAMETERS"},{"location":"errors/#-1105-param_empty","text":"A parameter was empty. Parameter '%s' was empty.","title":"-1105 PARAM_EMPTY"},{"location":"errors/#-1106-param_not_required","text":"A parameter was sent when not required. Parameter '%s' sent when not required.","title":"-1106 PARAM_NOT_REQUIRED"},{"location":"errors/#-1108-param_overflow","text":"Parameter '%s' overflowed.","title":"-1108 PARAM_OVERFLOW"},{"location":"errors/#-1111-bad_precision","text":"Precision is over the maximum defined for this asset.","title":"-1111 BAD_PRECISION"},{"location":"errors/#-1112-no_depth","text":"No orders on book for symbol.","title":"-1112 NO_DEPTH"},{"location":"errors/#-1114-tif_not_required","text":"TimeInForce parameter sent when not required.","title":"-1114 TIF_NOT_REQUIRED"},{"location":"errors/#-1115-invalid_tif","text":"Invalid timeInForce.","title":"-1115 INVALID_TIF"},{"location":"errors/#-1116-invalid_order_type","text":"Invalid orderType.","title":"-1116 INVALID_ORDER_TYPE"},{"location":"errors/#-1117-invalid_side","text":"Invalid side.","title":"-1117 INVALID_SIDE"},{"location":"errors/#-1118-empty_new_cl_ord_id","text":"New client order ID was empty.","title":"-1118 EMPTY_NEW_CL_ORD_ID"},{"location":"errors/#-1119-empty_org_cl_ord_id","text":"Original client order ID was empty.","title":"-1119 EMPTY_ORG_CL_ORD_ID"},{"location":"errors/#-1120-bad_interval","text":"Invalid interval.","title":"-1120 BAD_INTERVAL"},{"location":"errors/#-1121-bad_symbol","text":"Invalid symbol.","title":"-1121 BAD_SYMBOL"},{"location":"errors/#-1125-invalid_listen_key","text":"This listenKey does not exist.","title":"-1125 INVALID_LISTEN_KEY"},{"location":"errors/#-1127-more_than_xx_hours","text":"Lookup interval is too big. More than %s hours between startTime and endTime.","title":"-1127 MORE_THAN_XX_HOURS"},{"location":"errors/#-1128-optional_params_bad_combo","text":"Combination of optional parameters invalid.","title":"-1128 OPTIONAL_PARAMS_BAD_COMBO"},{"location":"errors/#-1130-invalid_parameter","text":"Invalid data sent for a parameter. Data sent for parameter '%s' is not valid.","title":"-1130 INVALID_PARAMETER"},{"location":"errors/#-1134-bad_strategy_type","text":"strategyType was less than 1000000.","title":"-1134 BAD_STRATEGY_TYPE"},{"location":"errors/#-1135-invalid_json","text":"Invalid JSON Request JSON sent for parameter '%s' is not valid","title":"-1135 INVALID_JSON"},{"location":"errors/#-2010-new_order_rejected","text":"NEW_ORDER_REJECTED","title":"-2010 NEW_ORDER_REJECTED"},{"location":"errors/#-2011-cancel_rejected","text":"CANCEL_REJECTED","title":"-2011 CANCEL_REJECTED"},{"location":"errors/#-2013-no_such_order","text":"Order does not exist.","title":"-2013 NO_SUCH_ORDER"},{"location":"errors/#-2014-bad_api_key_fmt","text":"API-key format invalid.","title":"-2014 BAD_API_KEY_FMT"},{"location":"errors/#-2015-rejected_mbx_key","text":"Invalid API-key, IP, or permissions for action.","title":"-2015 REJECTED_MBX_KEY"},{"location":"errors/#-2016-no_trading_window","text":"No trading window could be found for the symbol. Try ticker/24hrs instead.","title":"-2016 NO_TRADING_WINDOW"},{"location":"errors/#messages-for-1010-error_msg_received-2010-new_order_rejected-and-2011-cancel_rejected","text":"This code is sent when an error has been returned by the matching engine. The following messages which will indicate the specific error: Error message Description \"Unknown order sent.\" The order (by either orderId , clOrdId , origClOrdId ) could not be found \"Duplicate order sent.\" The clOrdId is already in use \"Market is closed.\" The symbol is not trading \"Account has insufficient balance for requested action.\" Not enough funds to complete the action \"Market orders are not supported for this symbol.\" MARKET is not enabled on the symbol \"Iceberg orders are not supported for this symbol.\" icebergQty is not enabled on the symbol \"Stop loss orders are not supported for this symbol.\" STOP_LOSS is not enabled on the symbol \"Stop loss limit orders are not supported for this symbol.\" STOP_LOSS_LIMIT is not enabled on the symbol \"Take profit orders are not supported for this symbol.\" TAKE_PROFIT is not enabled on the symbol \"Take profit limit orders are not supported for this symbol.\" TAKE_PROFIT_LIMIT is not enabled on the symbol \"Price * QTY is zero or less.\" price * quantity is too low \"IcebergQty exceeds QTY.\" icebergQty must be less than the order quantity \"This action is disabled on this account.\" Contact customer support; some actions have been disabled on the account. \"Unsupported order combination\" The orderType , timeInForce , stopPrice , and/or icebergQty combination isn't allowed. \"Order would trigger immediately.\" The order's stop price is not valid when compared to the last traded price. \"Cancel order is invalid. Check origClOrdId and orderId.\" No origClOrdId or orderId was sent in. \"Order would immediately match and take.\" LIMIT_MAKER order type would immediately match and trade, and not be a pure maker order. \"The relationship of the prices for the orders is not correct.\" The prices set in the OCO is breaking the Price rules. The rules are: SELL Orders : Limit Price > Last Price > Stop Price BUY Orders : Limit Price < Last Price < Stop Price \"OCO orders are not supported for this symbol\" OCO is not enabled on the symbol \"Quote order qty market orders are not support for this symbol.\" MARKET orders using the parameter quoteOrderQty are not enabled on the symbol. \"Trailing stop orders are not supported for this symbol.\" Orders using trailingDelta are not enabled on the symbol. \"Order cancel-replace is not supported for this symbol.\" POST /api/v3/order/cancelReplace is not enabled for the symbol.","title":"Messages for -1010 ERROR_MSG_RECEIVED, -2010 NEW_ORDER_REJECTED, and -2011 CANCEL_REJECTED"},{"location":"errors/#errors-regarding-post-apiv3ordercancelreplace","text":"","title":"Errors regarding POST /api/v3/order/cancelReplace"},{"location":"errors/#-2021-order-cancel-replace-partially-failed","text":"This code is sent when either the cancellation of the order failed or the new order placement failed but not both.","title":"-2021 Order cancel-replace partially failed"},{"location":"errors/#-2022-order-cancel-replace-failed","text":"This code is sent when both the cancellation of the order failed and the new order placement failed.","title":"-2022 Order cancel-replace failed."},{"location":"errors/#filter-failures","text":"Error message Description \"Filter failure: PRICE_FILTER\" price is too high, too low, and/or not following the tick size rule for the symbol. \"Filter failure: PERCENT_PRICE\" price is X% too high or X% too low from the average weighted price over the last Y minutes. \"Filter failure: LOT_SIZE\" quantity is too high, too low, and/or not following the step size rule for the symbol. \"Filter failure: MIN_NOTIONAL\" price * quantity is too low to be a valid order for the symbol. \"Filter failure: ICEBERG_PARTS\" ICEBERG order would break into too many parts; icebergQty is too small. \"Filter failure: MARKET_LOT_SIZE\" MARKET order's quantity is too high, too low, and/or not following the step size rule for the symbol. \"Filter failure: MAX_POSITION\" The account's position has reached the maximum defined limit. This is composed of the sum of the balance of the base asset, and the sum of the quantity of all open BUY orders. \"Filter failure: MAX_NUM_ORDERS\" Account has too many open orders on the symbol. \"Filter failure: MAX_NUM_ALGO_ORDERS\" Account has too many open stop loss and/or take profit orders on the symbol. \"Filter failure: MAX_NUM_ICEBERG_ORDERS\" Account has too many open iceberg orders on the symbol. \"Filter failure: TRAILING_DELTA\" trailingDelta is not within the defined range of the filter for that order type. \"Filter failure: EXCHANGE_MAX_NUM_ORDERS\" Account has too many open orders on the exchange. \"Filter failure: EXCHANGE_MAX_NUM_ALGO_ORDERS\" Account has too many open stop loss and/or take profit orders on the exchange. \"Filter failure: EXCHANGE_MAX_NUM_ICEBERG_ORDERS\" Account has too many open iceberg orders on the exchange.","title":"Filter failures"},{"location":"filters/","text":"Filters Filters define trading rules on a symbol or an exchange. Filters come in two forms: symbol filters and exchange filters . Symbol filters PRICE_FILTER The PRICE_FILTER defines the price rules for a symbol. There are 3 parts: minPrice defines the minimum price / stopPrice allowed; disabled on minPrice == 0. maxPrice defines the maximum price / stopPrice allowed; disabled on maxPrice == 0. tickSize defines the intervals that a price / stopPrice can be increased/decreased by; disabled on tickSize == 0. Any of the above variables can be set to 0, which disables that rule in the price filter . In order to pass the price filter , the following must be true for price / stopPrice of the enabled rules: price >= minPrice price <= maxPrice price % tickSize == 0 /exchangeInfo format: { \"filterType\": \"PRICE_FILTER\", \"minPrice\": \"0.00000100\", \"maxPrice\": \"100000.00000000\", \"tickSize\": \"0.00000100\" } PERCENT_PRICE The PERCENT_PRICE filter defines the valid range for the price based on the average of the previous trades. avgPriceMins is the number of minutes the average price is calculated over. 0 means the last price is used. In order to pass the percent price , the following must be true for price : * price <= weightedAveragePrice * multiplierUp * price >= weightedAveragePrice * multiplierDown /exchangeInfo format: { \"filterType\": \"PERCENT_PRICE\", \"multiplierUp\": \"1.3000\", \"multiplierDown\": \"0.7000\", \"avgPriceMins\": 5 } PERCENT_PRICE_BY_SIDE The PERCENT_PRICE_BY_SIDE filter defines the valid range for the price based on the average of the previous trades. avgPriceMins is the number of minutes the average price is calculated over. 0 means the last price is used. There is a different range depending on whether the order is placed on the BUY side or the SELL side. Buy orders will succeed on this filter if: * Order price <= weightedAveragePrice * bidMultiplierUp * Order price >= weightedAveragePrice * bidMultiplierDown Sell orders will succeed on this filter if: * Order Price <= weightedAveragePrice * askMultiplierUp * Order Price >= weightedAveragePrice * askMultiplierDown /exchangeInfo format: { \"filterType\": \"PERCENT_PRICE_BY_SIDE\", \"bidMultiplierUp\": \"1.2\", \"bidMultiplierDown\": \"0.2\", \"askMultiplierUp\": \"5\", \"askMultiplierDown\": \"0.8\", \"avgPriceMins\": 1 } LOT_SIZE The LOT_SIZE filter defines the quantity (aka \"lots\" in auction terms) rules for a symbol. There are 3 parts: minQty defines the minimum quantity / icebergQty allowed. maxQty defines the maximum quantity / icebergQty allowed. stepSize defines the intervals that a quantity / icebergQty can be increased/decreased by. In order to pass the lot size , the following must be true for quantity / icebergQty : quantity >= minQty quantity <= maxQty ( quantity - minQty ) % stepSize == 0 /exchangeInfo format: { \"filterType\": \"LOT_SIZE\", \"minQty\": \"0.00100000\", \"maxQty\": \"100000.00000000\", \"stepSize\": \"0.00100000\" } MIN_NOTIONAL The MIN_NOTIONAL filter defines the minimum notional value allowed for an order on a symbol. An order's notional value is the price * quantity . applyToMarket determines whether or not the MIN_NOTIONAL filter will also be applied to MARKET orders. Since MARKET orders have no price, the average price is used over the last avgPriceMins minutes. avgPriceMins is the number of minutes the average price is calculated over. 0 means the last price is used. /exchangeInfo format: { \"filterType\": \"MIN_NOTIONAL\", \"minNotional\": \"0.00100000\", \"applyToMarket\": true, \"avgPriceMins\": 5 } NOTIONAL The NOTIONAL filter defines the acceptable notional range allowed for an order on a symbol. applyMinToMarket determines whether the minNotional will be applied to MARKET orders. applyMaxToMarket determines whether the maxNotional will be applied to MARKET orders. In order to pass this filter, the notional ( price * quantity ) has to pass the following conditions: price * quantity <= maxNotional price * quantity >= minNotional For MARKET orders, the average price used over the last avgPriceMins minutes will be used for calculation. If the avgPriceMins is 0, then the last price will be used. /exchangeInfo format: { \"filterType\": \"NOTIONAL\", \"minNotional\": \"10.00000000\", \"applyMinToMarket\": false, \"maxNotional\": \"10000.00000000\", \"applyMaxToMarket\": false, \"avgPriceMins\": 5 } ICEBERG_PARTS The ICEBERG_PARTS filter defines the maximum parts an iceberg order can have. The number of ICEBERG_PARTS is defined as CEIL(qty / icebergQty) . /exchangeInfo format: { \"filterType\": \"ICEBERG_PARTS\", \"limit\": 10 } MARKET_LOT_SIZE The MARKET_LOT_SIZE filter defines the quantity (aka \"lots\" in auction terms) rules for MARKET orders on a symbol. There are 3 parts: minQty defines the minimum quantity allowed. maxQty defines the maximum quantity allowed. stepSize defines the intervals that a quantity can be increased/decreased by. In order to pass the market lot size , the following must be true for quantity : quantity >= minQty quantity <= maxQty ( quantity - minQty ) % stepSize == 0 /exchangeInfo format: { \"filterType\": \"MARKET_LOT_SIZE\", \"minQty\": \"0.00100000\", \"maxQty\": \"100000.00000000\", \"stepSize\": \"0.00100000\" } MAX_NUM_ORDERS The MAX_NUM_ORDERS filter defines the maximum number of orders an account is allowed to have open on a symbol. Note that both \"algo\" orders and normal orders are counted for this filter. /exchangeInfo format: { \"filterType\": \"MAX_NUM_ORDERS\", \"maxNumOrders\": 25 } MAX_NUM_ALGO_ORDERS The MAX_NUM_ALGO_ORDERS filter defines the maximum number of \"algo\" orders an account is allowed to have open on a symbol. \"Algo\" orders are STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , and TAKE_PROFIT_LIMIT orders. /exchangeInfo format: { \"filterType\": \"MAX_NUM_ALGO_ORDERS\", \"maxNumAlgoOrders\": 5 } MAX_NUM_ICEBERG_ORDERS The MAX_NUM_ICEBERG_ORDERS filter defines the maximum number of ICEBERG orders an account is allowed to have open on a symbol. An ICEBERG order is any order where the icebergQty is > 0. /exchangeInfo format: { \"filterType\": \"MAX_NUM_ICEBERG_ORDERS\", \"maxNumIcebergOrders\": 5 } MAX_POSITION The MAX_POSITION filter defines the allowed maximum position an account can have on the base asset of a symbol. An account's position defined as the sum of the account's: 1. free balance of the base asset 1. locked balance of the base asset 1. sum of the qty of all open BUY orders BUY orders will be rejected if the account's position is greater than the maximum position allowed. If an order's quantity can cause the position to overflow, this will also fail the MAX_POSITION filter. /exchangeInfo format: { \"filterType\":\"MAX_POSITION\", \"maxPosition\":\"10.00000000\" } TRAILING_DELTA The TRAILING_DELTA filter defines the minimum and maximum value for the parameter trailingDelta . In order for a trailing stop order to pass this filter, the following must be true: For STOP_LOSS BUY , STOP_LOSS_LIMIT_BUY , TAKE_PROFIT SELL and TAKE_PROFIT_LIMIT SELL orders: trailingDelta >= minTrailingAboveDelta trailingDelta <= maxTrailingAboveDelta For STOP_LOSS SELL , STOP_LOSS_LIMIT SELL , TAKE_PROFIT BUY , and TAKE_PROFIT_LIMIT BUY orders: trailingDelta >= minTrailingBelowDelta trailingDelta <= maxTrailingBelowDelta /exchangeInfo format: { \"filterType\": \"TRAILING_DELTA\", \"minTrailingAboveDelta\": 10, \"maxTrailingAboveDelta\": 2000, \"minTrailingBelowDelta\": 10, \"maxTrailingBelowDelta\": 2000 } Exchange Filters EXCHANGE_MAX_NUM_ORDERS The EXCHANGE_MAX_NUM_ORDERS filter defines the maximum number of orders an account is allowed to have open on the exchange. Note that both \"algo\" orders and normal orders are counted for this filter. /exchangeInfo format: { \"filterType\": \"EXCHANGE_MAX_NUM_ORDERS\", \"maxNumOrders\": 1000 } EXCHANGE_MAX_NUM_ALGO_ORDERS The EXCHANGE_MAX_NUM_ALGO_ORDERS filter defines the maximum number of \"algo\" orders an account is allowed to have open on the exchange. \"Algo\" orders are STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , and TAKE_PROFIT_LIMIT orders. /exchangeInfo format: { \"filterType\": \"EXCHANGE_MAX_NUM_ALGO_ORDERS\", \"maxNumAlgoOrders\": 200 } EXCHANGE_MAX_NUM_ICEBERG_ORDERS The EXCHANGE_MAX_NUM_ICEBERG_ORDERS filter defines the maximum number of iceberg orders an account is allowed to have open on the exchange. /exchangeInfo format: { \"filterType\": \"EXCHANGE_MAX_NUM_ICEBERG_ORDERS\", \"maxNumIcebergOrders\": 10000 }","title":"Filters"},{"location":"filters/#filters","text":"Filters define trading rules on a symbol or an exchange. Filters come in two forms: symbol filters and exchange filters .","title":"Filters"},{"location":"filters/#symbol-filters","text":"","title":"Symbol filters"},{"location":"filters/#price_filter","text":"The PRICE_FILTER defines the price rules for a symbol. There are 3 parts: minPrice defines the minimum price / stopPrice allowed; disabled on minPrice == 0. maxPrice defines the maximum price / stopPrice allowed; disabled on maxPrice == 0. tickSize defines the intervals that a price / stopPrice can be increased/decreased by; disabled on tickSize == 0. Any of the above variables can be set to 0, which disables that rule in the price filter . In order to pass the price filter , the following must be true for price / stopPrice of the enabled rules: price >= minPrice price <= maxPrice price % tickSize == 0 /exchangeInfo format: { \"filterType\": \"PRICE_FILTER\", \"minPrice\": \"0.00000100\", \"maxPrice\": \"100000.00000000\", \"tickSize\": \"0.00000100\" }","title":"PRICE_FILTER"},{"location":"filters/#percent_price","text":"The PERCENT_PRICE filter defines the valid range for the price based on the average of the previous trades. avgPriceMins is the number of minutes the average price is calculated over. 0 means the last price is used. In order to pass the percent price , the following must be true for price : * price <= weightedAveragePrice * multiplierUp * price >= weightedAveragePrice * multiplierDown /exchangeInfo format: { \"filterType\": \"PERCENT_PRICE\", \"multiplierUp\": \"1.3000\", \"multiplierDown\": \"0.7000\", \"avgPriceMins\": 5 }","title":"PERCENT_PRICE"},{"location":"filters/#percent_price_by_side","text":"The PERCENT_PRICE_BY_SIDE filter defines the valid range for the price based on the average of the previous trades. avgPriceMins is the number of minutes the average price is calculated over. 0 means the last price is used. There is a different range depending on whether the order is placed on the BUY side or the SELL side. Buy orders will succeed on this filter if: * Order price <= weightedAveragePrice * bidMultiplierUp * Order price >= weightedAveragePrice * bidMultiplierDown Sell orders will succeed on this filter if: * Order Price <= weightedAveragePrice * askMultiplierUp * Order Price >= weightedAveragePrice * askMultiplierDown /exchangeInfo format: { \"filterType\": \"PERCENT_PRICE_BY_SIDE\", \"bidMultiplierUp\": \"1.2\", \"bidMultiplierDown\": \"0.2\", \"askMultiplierUp\": \"5\", \"askMultiplierDown\": \"0.8\", \"avgPriceMins\": 1 }","title":"PERCENT_PRICE_BY_SIDE"},{"location":"filters/#lot_size","text":"The LOT_SIZE filter defines the quantity (aka \"lots\" in auction terms) rules for a symbol. There are 3 parts: minQty defines the minimum quantity / icebergQty allowed. maxQty defines the maximum quantity / icebergQty allowed. stepSize defines the intervals that a quantity / icebergQty can be increased/decreased by. In order to pass the lot size , the following must be true for quantity / icebergQty : quantity >= minQty quantity <= maxQty ( quantity - minQty ) % stepSize == 0 /exchangeInfo format: { \"filterType\": \"LOT_SIZE\", \"minQty\": \"0.00100000\", \"maxQty\": \"100000.00000000\", \"stepSize\": \"0.00100000\" }","title":"LOT_SIZE"},{"location":"filters/#min_notional","text":"The MIN_NOTIONAL filter defines the minimum notional value allowed for an order on a symbol. An order's notional value is the price * quantity . applyToMarket determines whether or not the MIN_NOTIONAL filter will also be applied to MARKET orders. Since MARKET orders have no price, the average price is used over the last avgPriceMins minutes. avgPriceMins is the number of minutes the average price is calculated over. 0 means the last price is used. /exchangeInfo format: { \"filterType\": \"MIN_NOTIONAL\", \"minNotional\": \"0.00100000\", \"applyToMarket\": true, \"avgPriceMins\": 5 }","title":"MIN_NOTIONAL"},{"location":"filters/#notional","text":"The NOTIONAL filter defines the acceptable notional range allowed for an order on a symbol. applyMinToMarket determines whether the minNotional will be applied to MARKET orders. applyMaxToMarket determines whether the maxNotional will be applied to MARKET orders. In order to pass this filter, the notional ( price * quantity ) has to pass the following conditions: price * quantity <= maxNotional price * quantity >= minNotional For MARKET orders, the average price used over the last avgPriceMins minutes will be used for calculation. If the avgPriceMins is 0, then the last price will be used. /exchangeInfo format: { \"filterType\": \"NOTIONAL\", \"minNotional\": \"10.00000000\", \"applyMinToMarket\": false, \"maxNotional\": \"10000.00000000\", \"applyMaxToMarket\": false, \"avgPriceMins\": 5 }","title":"NOTIONAL"},{"location":"filters/#iceberg_parts","text":"The ICEBERG_PARTS filter defines the maximum parts an iceberg order can have. The number of ICEBERG_PARTS is defined as CEIL(qty / icebergQty) . /exchangeInfo format: { \"filterType\": \"ICEBERG_PARTS\", \"limit\": 10 }","title":"ICEBERG_PARTS"},{"location":"filters/#market_lot_size","text":"The MARKET_LOT_SIZE filter defines the quantity (aka \"lots\" in auction terms) rules for MARKET orders on a symbol. There are 3 parts: minQty defines the minimum quantity allowed. maxQty defines the maximum quantity allowed. stepSize defines the intervals that a quantity can be increased/decreased by. In order to pass the market lot size , the following must be true for quantity : quantity >= minQty quantity <= maxQty ( quantity - minQty ) % stepSize == 0 /exchangeInfo format: { \"filterType\": \"MARKET_LOT_SIZE\", \"minQty\": \"0.00100000\", \"maxQty\": \"100000.00000000\", \"stepSize\": \"0.00100000\" }","title":"MARKET_LOT_SIZE"},{"location":"filters/#max_num_orders","text":"The MAX_NUM_ORDERS filter defines the maximum number of orders an account is allowed to have open on a symbol. Note that both \"algo\" orders and normal orders are counted for this filter. /exchangeInfo format: { \"filterType\": \"MAX_NUM_ORDERS\", \"maxNumOrders\": 25 }","title":"MAX_NUM_ORDERS"},{"location":"filters/#max_num_algo_orders","text":"The MAX_NUM_ALGO_ORDERS filter defines the maximum number of \"algo\" orders an account is allowed to have open on a symbol. \"Algo\" orders are STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , and TAKE_PROFIT_LIMIT orders. /exchangeInfo format: { \"filterType\": \"MAX_NUM_ALGO_ORDERS\", \"maxNumAlgoOrders\": 5 }","title":"MAX_NUM_ALGO_ORDERS"},{"location":"filters/#max_num_iceberg_orders","text":"The MAX_NUM_ICEBERG_ORDERS filter defines the maximum number of ICEBERG orders an account is allowed to have open on a symbol. An ICEBERG order is any order where the icebergQty is > 0. /exchangeInfo format: { \"filterType\": \"MAX_NUM_ICEBERG_ORDERS\", \"maxNumIcebergOrders\": 5 }","title":"MAX_NUM_ICEBERG_ORDERS"},{"location":"filters/#max_position","text":"The MAX_POSITION filter defines the allowed maximum position an account can have on the base asset of a symbol. An account's position defined as the sum of the account's: 1. free balance of the base asset 1. locked balance of the base asset 1. sum of the qty of all open BUY orders BUY orders will be rejected if the account's position is greater than the maximum position allowed. If an order's quantity can cause the position to overflow, this will also fail the MAX_POSITION filter. /exchangeInfo format: { \"filterType\":\"MAX_POSITION\", \"maxPosition\":\"10.00000000\" }","title":"MAX_POSITION"},{"location":"filters/#trailing_delta","text":"The TRAILING_DELTA filter defines the minimum and maximum value for the parameter trailingDelta . In order for a trailing stop order to pass this filter, the following must be true: For STOP_LOSS BUY , STOP_LOSS_LIMIT_BUY , TAKE_PROFIT SELL and TAKE_PROFIT_LIMIT SELL orders: trailingDelta >= minTrailingAboveDelta trailingDelta <= maxTrailingAboveDelta For STOP_LOSS SELL , STOP_LOSS_LIMIT SELL , TAKE_PROFIT BUY , and TAKE_PROFIT_LIMIT BUY orders: trailingDelta >= minTrailingBelowDelta trailingDelta <= maxTrailingBelowDelta /exchangeInfo format: { \"filterType\": \"TRAILING_DELTA\", \"minTrailingAboveDelta\": 10, \"maxTrailingAboveDelta\": 2000, \"minTrailingBelowDelta\": 10, \"maxTrailingBelowDelta\": 2000 }","title":"TRAILING_DELTA"},{"location":"filters/#exchange-filters","text":"","title":"Exchange Filters"},{"location":"filters/#exchange_max_num_orders","text":"The EXCHANGE_MAX_NUM_ORDERS filter defines the maximum number of orders an account is allowed to have open on the exchange. Note that both \"algo\" orders and normal orders are counted for this filter. /exchangeInfo format: { \"filterType\": \"EXCHANGE_MAX_NUM_ORDERS\", \"maxNumOrders\": 1000 }","title":"EXCHANGE_MAX_NUM_ORDERS"},{"location":"filters/#exchange_max_num_algo_orders","text":"The EXCHANGE_MAX_NUM_ALGO_ORDERS filter defines the maximum number of \"algo\" orders an account is allowed to have open on the exchange. \"Algo\" orders are STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , and TAKE_PROFIT_LIMIT orders. /exchangeInfo format: { \"filterType\": \"EXCHANGE_MAX_NUM_ALGO_ORDERS\", \"maxNumAlgoOrders\": 200 }","title":"EXCHANGE_MAX_NUM_ALGO_ORDERS"},{"location":"filters/#exchange_max_num_iceberg_orders","text":"The EXCHANGE_MAX_NUM_ICEBERG_ORDERS filter defines the maximum number of iceberg orders an account is allowed to have open on the exchange. /exchangeInfo format: { \"filterType\": \"EXCHANGE_MAX_NUM_ICEBERG_ORDERS\", \"maxNumIcebergOrders\": 10000 }","title":"EXCHANGE_MAX_NUM_ICEBERG_ORDERS"},{"location":"rest-api/","text":"Table of Contents generated with DocToc General API Information HTTP Return Codes Error Codes General Information on Endpoints LIMITS General Info on Limits IP Limits Order Rate Limits Data Sources Endpoint security type SIGNED (TRADE and USER_DATA) Endpoint security Timing security SIGNED Endpoint Examples for POST /api/v3/order HMAC Keys Example 1: As a request body Example 2: As a query string Example 3: Mixed query string and request body RSA Keys Public API Endpoints Terminology ENUM definitions General endpoints Test connectivity Check server time Exchange information Market Data endpoints Order book Recent trades list Old trade lookup (MARKET_DATA) Compressed/Aggregate trades list Kline/Candlestick data UIKlines Current average price 24hr ticker price change statistics Symbol price ticker Symbol order book ticker Rolling window price change statistics Account endpoints New order (TRADE) Test new order (TRADE) Query order (USER_DATA) Cancel order (TRADE) Cancel All Open Orders on a Symbol (TRADE) Cancel an Existing Order and Send a New Order (TRADE) Current open orders (USER_DATA) All orders (USER_DATA) New OCO (TRADE) Cancel OCO (TRADE) Query OCO (USER_DATA) Query all OCO (USER_DATA) Query Open OCO (USER_DATA) Account information (USER_DATA) Account trade list (USER_DATA) Query Current Order Count Usage (TRADE) User data stream endpoints Start user data stream (USER_STREAM) Keepalive user data stream (USER_STREAM) Close user data stream (USER_STREAM) Public Rest API for Binance (2023-01-23) General API Information The following base endpoints are available: https://api.binance.com https://api1.binance.com https://api2.binance.com https://api3.binance.com https://api4.binance.com All endpoints are equal in functionality. Performance may vary between the base endpoints and can be freely switched between them to find which one works best for one's setup. All endpoints return either a JSON object or array. Data is returned in ascending order. Oldest first, newest last. All time and timestamp related fields are in milliseconds . The base endpoint https://data.binance.com can be used to access the following API endpoints that have NONE as security type: GET /api/v3/aggTrades GET /api/v3/avgPrice GET /api/v3/depth GET /api/v3/exchangeInfo GET /api/v3/klines GET /api/v3/ping GET /api/v3/ticker GET /api/v3/ticker/24hr GET /api/v3/ticker/bookTicker GET /api/v3/ticker/price GET /api/v3/time GET /api/v3/trades GET /api/v3/uiKlines HTTP Return Codes HTTP 4XX return codes are used for malformed requests; the issue is on the sender's side. HTTP 403 return code is used when the WAF Limit (Web Application Firewall) has been violated. HTTP 409 return code is used when a cancelReplace order partially succeeds. (i.e. if the cancellation of the order fails but the new order placement succeeds.) HTTP 429 return code is used when breaking a request rate limit. HTTP 418 return code is used when an IP has been auto-banned for continuing to send requests after receiving 429 codes. HTTP 5XX return codes are used for internal errors; the issue is on Binance's side. It is important to NOT treat this as a failure operation; the execution status is UNKNOWN and could have been a success. Error Codes Any endpoint can return an ERROR Sample Payload below: { \"code\": -1121, \"msg\": \"Invalid symbol.\" } Specific error codes and messages are defined in Errors Codes . General Information on Endpoints For GET endpoints, parameters must be sent as a query string . For POST , PUT , and DELETE endpoints, the parameters may be sent as a query string or in the request body with content type application/x-www-form-urlencoded . You may mix parameters between both the query string and request body if you wish to do so. Parameters may be sent in any order. If a parameter sent in both the query string and request body , the query string parameter will be used. LIMITS General Info on Limits The following intervalLetter values for headers: SECOND => S MINUTE => M HOUR => H DAY => D intervalNum describes the amount of the interval. For example, intervalNum 5 with intervalLetter M means \"Every 5 minutes\". The /api/v3/exchangeInfo rateLimits array contains objects related to the exchange's RAW_REQUESTS , REQUEST_WEIGHT , and ORDERS rate limits. These are further defined in the ENUM definitions section under Rate limiters (rateLimitType) . A 429 will be returned when either rate limit is violated. IP Limits Every request will contain X-MBX-USED-WEIGHT-(intervalNum)(intervalLetter) in the response headers which has the current used weight for the IP for all request rate limiters defined. Each route has a weight which determines for the number of requests each endpoint counts for. Heavier endpoints and endpoints that do operations on multiple symbols will have a heavier weight . When a 429 is received, it's your obligation as an API to back off and not spam the API. Repeatedly violating rate limits and/or failing to back off after receiving 429s will result in an automated IP ban (HTTP status 418). IP bans are tracked and scale in duration for repeat offenders, from 2 minutes to 3 days . A Retry-After header is sent with a 418 or 429 responses and will give the number of seconds required to wait, in the case of a 429, to prevent a ban, or, in the case of a 418, until the ban is over. The limits on the API are based on the IPs, not the API keys. Order Rate Limits Every successful order response will contain a X-MBX-ORDER-COUNT-(intervalNum)(intervalLetter) header which has the current order count for the account for all order rate limiters defined. To monitor order count usage, refer to GET api/v3/rateLimit/order . When the order count exceeds the limit, you will receive a 429 error without the Retry-After header. Please check the Order Rate Limit rules using GET api/v3/exchangeInfo and wait for reactivation accordingly. Rejected/unsuccessful orders are not guaranteed to have X-MBX-ORDER-COUNT-** headers in the response. The order rate limit is counted against each account . Data Sources The API system is asynchronous, so some delay in the response is normal and expected. Each endpoint has a data source indicating where the data is being retrieved, and thus which endpoints have the most up-to-date response. These are the three sources, ordered by which is has the most up-to-date response to the one with potential delays in updates. Matching Engine - the data is from the matching Engine Memory - the data is from a server's local or external memory Database - the data is taken directly from a database Some endpoints can have more than 1 data source. (e.g. Memory => Database) This means that the endpoint will check the first Data Source, and if it cannot find the value it's looking for it will check the next one. Endpoint security type Each endpoint has a security type that determines how you will interact with it. This is stated next to the NAME of the endpoint. If no security type is stated, assume the security type is NONE. API-keys are passed into the Rest API via the X-MBX-APIKEY header. API-keys and secret-keys are case sensitive . API-keys can be configured to only access certain types of secure endpoints. For example, one API-key could be used for TRADE only, while another API-key can access everything except for TRADE routes. By default, API-keys can access all secure routes. Security Type Description NONE Endpoint can be accessed freely. TRADE Endpoint requires sending a valid API-Key and signature. USER_DATA Endpoint requires sending a valid API-Key and signature. USER_STREAM Endpoint requires sending a valid API-Key. MARKET_DATA Endpoint requires sending a valid API-Key. TRADE and USER_DATA endpoints are SIGNED endpoints. SIGNED (TRADE and USER_DATA) Endpoint security SIGNED endpoints require an additional parameter, signature , to be sent in the query string or request body . Endpoints use HMAC SHA256 signatures. The HMAC SHA256 signature is a keyed HMAC SHA256 operation. Use your secretKey as the key and totalParams as the value for the HMAC operation. The signature is not case sensitive . totalParams is defined as the query string concatenated with the request body . Timing security A SIGNED endpoint also requires a parameter, timestamp , to be sent which should be the millisecond timestamp of when the request was created and sent. An additional parameter, recvWindow , may be sent to specify the number of milliseconds after timestamp the request is valid for. If recvWindow is not sent, it defaults to 5000 . The logic is as follows: javascript if (timestamp < (serverTime + 1000) && (serverTime - timestamp) <= recvWindow) { // process request } else { // reject request } Serious trading is about timing. Networks can be unstable and unreliable, which can lead to requests taking varying amounts of time to reach the servers. With recvWindow , you can specify that the request must be processed within a certain number of milliseconds or be rejected by the server. It is recommended to use a small recvWindow of 5000 or less! The max cannot go beyond 60,000! SIGNED Endpoint Examples for POST /api/v3/order HMAC Keys Here is a step-by-step example of how to send a valid signed payload from the Linux command line using echo , openssl , and curl . Key Value apiKey vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A secretKey NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j Parameter Value symbol LTCBTC side BUY type LIMIT timeInForce GTC quantity 1 price 0.1 recvWindow 5000 timestamp 1499827319559 Example 1: As a request body requestBody: symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559 HMAC SHA256 signature: [linux]$ echo -n \"symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559\" | openssl dgst -sha256 -hmac \"NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j\" (stdin)= c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71 curl command: (HMAC SHA256) [linux]$ curl -H \"X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" -X POST 'https://api.binance.com/api/v3/order' -d 'symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559&signature=c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71' Example 2: As a query string queryString: symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559 HMAC SHA256 signature: [linux]$ echo -n \"symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559\" | openssl dgst -sha256 -hmac \"NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j\" (stdin)= c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71 curl command: (HMAC SHA256) [linux]$ curl -H \"X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" -X POST 'https://api.binance.com/api/v3/order?symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559&signature=c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71' Example 3: Mixed query string and request body queryString: symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC requestBody: quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559 HMAC SHA256 signature: [linux]$ echo -n \"symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTCquantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559\" | openssl dgst -sha256 -hmac \"NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j\" (stdin)= 0fd168b8ddb4876a0358a8d14d0c9f3da0e9b20c5d52b2a00fcf7d1c602f9a77 curl command: (HMAC SHA256) [linux]$ curl -H \"X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" -X POST 'https://api.binance.com/api/v3/order?symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC' -d 'quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559&signature=0fd168b8ddb4876a0358a8d14d0c9f3da0e9b20c5d52b2a00fcf7d1c602f9a77' Note that the signature is different in example 3. There is no & between \"GTC\" and \"quantity=1\". RSA Keys This will be a step by step process how to create the signature payload to send a valid signed payload. We support PKCS#8 currently. To get your API key, you need to upload your RSA Public Key to your account and a corresponding API key will be provided for you. For this example, the private key will be referenced as ./test-prv-key.pem Key Value apiKey CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ Parameter Value symbol BTCUSDT side SELL type LIMIT timeInForce GTC quantity 1 price 0.2 timestamp 1668481559918 recvWindow 5000 Step 1: Construct the payload Arrange the list of parameters into a string. Separate each parameter with a & . For the parameters above, the signature payload would look like this: symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2&timestamp=1668481559918&recvWindow=5000 Step 2: Compute the signature: Encode signature payload as ASCII data. Sign payload using RSASSA-PKCS1-v1_5 algorithm with SHA-256 hash function. $ echo -n 'symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2&timestamp=1668481559918&recvWindow=5000' | openssl dgst -sha256 -sign ./test-prv-key.pem Encode output as base64 string. $ echo -n 'symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2&timestamp=1668481559918&recvWindow=5000' | openssl dgst -sha256 -sign ./test-prv-key.pem | openssl enc -base64 -A HZ8HOjiJ1s/igS9JA+n7+7Ti/ihtkRF5BIWcPIEluJP6tlbFM/Bf44LfZka/iemtahZAZzcO9TnI5uaXh3++lrqtNonCwp6/245UFWkiW1elpgtVAmJPbogcAv6rSlokztAfWk296ZJXzRDYAtzGH0gq7CgSJKfH+XxaCmR0WcvlKjNQnp12/eKXJYO4tDap8UCBLuyxDnR7oJKLHQHJLP0r0EAVOOSIbrFang/1WOq+Jaq4Efc4XpnTgnwlBbWTmhWDR1pvS9iVEzcSYLHT/fNnMRxFc7u+j3qI//5yuGuu14KR0MuQKKCSpViieD+fIti46sxPTsjSemoUKp0oXA== Since the signature may contain / and = , this could cause issues with sending the request. So the signature has to be URL encoded. HZ8HOjiJ1s%2FigS9JA%2Bn7%2B7Ti%2FihtkRF5BIWcPIEluJP6tlbFM%2FBf44LfZka%2FiemtahZAZzcO9TnI5uaXh3%2B%2BlrqtNonCwp6%2F245UFWkiW1elpgtVAmJPbogcAv6rSlokztAfWk296ZJXzRDYAtzGH0gq7CgSJKfH%2BXxaCmR0WcvlKjNQnp12%2FeKXJYO4tDap8UCBLuyxDnR7oJKLHQHJLP0r0EAVOOSIbrFang%2F1WOq%2BJaq4Efc4XpnTgnwlBbWTmhWDR1pvS9iVEzcSYLHT%2FfNnMRxFc7u%2Bj3qI%2F%2F5yuGuu14KR0MuQKKCSpViieD%2BfIti46sxPTsjSemoUKp0oXA%3D%3D The curl command: curl -H \"X-MBX-APIKEY: CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ\" -X POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2&timestamp=1668481559918&recvWindow=5000&signature=HZ8HOjiJ1s%2FigS9JA%2Bn7%2B7Ti%2FihtkRF5BIWcPIEluJP6tlbFM%2FBf44LfZka%2FiemtahZAZzcO9TnI5uaXh3%2B%2BlrqtNonCwp6%2F245UFWkiW1elpgtVAmJPbogcAv6rSlokztAfWk296ZJXzRDYAtzGH0gq7CgSJKfH%2BXxaCmR0WcvlKjNQnp12%2FeKXJYO4tDap8UCBLuyxDnR7oJKLHQHJLP0r0EAVOOSIbrFang%2F1WOq%2BJaq4Efc4XpnTgnwlBbWTmhWDR1pvS9iVEzcSYLHT%2FfNnMRxFc7u%2Bj3qI%2F%2F5yuGuu14KR0MuQKKCSpViieD%2BfIti46sxPTsjSemoUKp0oXA%3D%3D' A sample Bash script below does the similar steps said above. API_KEY=\"put your own API Key here\" PRIVATE_KEY_PATH=\"test-prv-key.pem\" # Set up the request: API_METHOD=\"POST\" API_CALL=\"api/v3/order\" API_PARAMS=\"symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2\" # Sign the request: timestamp=$(date +%s000) api_params_with_timestamp=\"$API_PARAMS&timestamp=$timestamp\" signature=$(echo -n \"$api_params_with_timestamp\" \\ | openssl dgst -sha256 -sign \"$PRIVATE_KEY_PATH\" \\ | openssl enc -base64 -A) # Send the request: curl -H \"X-MBX-APIKEY: $API_KEY\" -X \"$API_METHOD\" \\ \"https://api.binance.com/$API_CALL?$api_params_with_timestamp\" \\ --data-urlencode \"signature=$signature\" Public API Endpoints Terminology These terms will be used throughout the documentation, so it is recommended especially for new users to read to help their understanding of the API. base asset refers to the asset that is the quantity of a symbol. For the symbol BTCUSDT, BTC would be the base asset . quote asset refers to the asset that is the price of a symbol. For the symbol BTCUSDT, USDT would be the quote asset . ENUM definitions Symbol status (status): PRE_TRADING TRADING POST_TRADING END_OF_DAY HALT AUCTION_MATCH BREAK Account and Symbol Permissions (permissions): SPOT MARGIN LEVERAGED TRD_GRP_002 TRD_GRP_003 TRD_GRP_004 TRD_GRP_005 TRD_GRP_006 TRD_GRP_007 Order status (status): Status Description NEW The order has been accepted by the engine. PARTIALLY_FILLED A part of the order has been filled. FILLED The order has been completed. CANCELED The order has been canceled by the user. PENDING_CANCEL Currently unused REJECTED The order was not accepted by the engine and not processed. EXPIRED The order was canceled according to the order type's rules (e.g. LIMIT FOK orders with no fill, LIMIT IOC or MARKET orders that partially fill) or by the exchange, (e.g. orders canceled during liquidation, orders canceled during maintenance) EXPIRED_IN_MATCH The order was canceled by the exchange due to STP trigger. (e.g. an order with EXPIRE_TAKER will match with existing orders on the book with the same account or same tradeGroupId ) OCO Status (listStatusType): Status Description RESPONSE This is used when the ListStatus is responding to a failed action. (E.g. Orderlist placement or cancellation) EXEC_STARTED The order list has been placed or there is an update to the order list status. ALL_DONE The order list has finished executing and thus no longer active. OCO Order Status (listOrderStatus): Status Description EXECUTING Either an order list has been placed or there is an update to the status of the list. ALL_DONE An order list has completed execution and thus no longer active. REJECT The List Status is responding to a failed action either during order placement or order canceled ContingencyType * OCO Order types (orderTypes, type): LIMIT MARKET STOP_LOSS STOP_LOSS_LIMIT TAKE_PROFIT TAKE_PROFIT_LIMIT LIMIT_MAKER Order Response Type (newOrderRespType): ACK RESULT FULL Order side (side): BUY SELL Time in force (timeInForce): This sets how long an order will be active before expiration. Status Description GTC Good Til Canceled An order will be on the book unless the order is canceled. IOC Immediate Or Cancel An order will try to fill the order as much as it can before the order expires. FOK Fill or Kill An order will expire if the full order cannot be filled upon execution. Kline/Candlestick chart intervals: s-> seconds; m -> minutes; h -> hours; d -> days; w -> weeks; M -> months 1s 1m 3m 5m 15m 30m 1h 2h 4h 6h 8h 12h 1d 3d 1w 1M Rate limiters (rateLimitType) * REQUEST_WEIGHT ```json { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200 } ``` ORDERS json { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 1, \"limit\": 10 } * RAW_REQUESTS json { \"rateLimitType\": \"RAW_REQUESTS\", \"interval\": \"MINUTE\", \"intervalNum\": 5, \"limit\": 5000 } Rate limit intervals (interval) SECOND MINUTE DAY General endpoints Test connectivity GET /api/v3/ping Test connectivity to the Rest API. Weight: 1 Parameters: NONE Data Source: Memory Response: {} Check server time GET /api/v3/time Test connectivity to the Rest API and get the current server time. Weight: 1 Parameters: NONE Data Source: Memory Response: { \"serverTime\": 1499827319559 } Exchange information GET /api/v3/exchangeInfo Current exchange trading rules and symbol information Weight: 10 Parameters: There are 4 possible options: Options Example No parameter curl -X GET \"https://api.binance.com/api/v3/exchangeInfo\" symbol curl -X GET \"https://api.binance.com/api/v3/exchangeInfo?symbol=BNBBTC\" symbols curl -X GET \"https://api.binance.com/api/v3/exchangeInfo?symbols=%5B%22BNBBTC%22,%22BTCUSDT%22%5D\" or curl -g -X GET 'https://api.binance.com/api/v3/exchangeInfo?symbols=[\"BTCUSDT\",\"BNBBTC\"]' permissions curl -X GET \"https://api.binance.com/api/v3/exchangeInfo?permissions=SPOT\" or curl -X GET \"https://api.binance.com/api/v3/exchangeInfo?permissions=%5B%22MARGIN%22%2C%22LEVERAGED%22%5D\" or curl -g -X GET 'https://api.binance.com/api/v3/exchangeInfo?permissions=[\"MARGIN\",\"LEVERAGED\"]' Notes : * If the value provided to symbol or symbols do not exist, the endpoint will throw an error saying the symbol is invalid. * All parameters are optional. * permissions can support single or multiple values (e.g. SPOT , [\"MARGIN\",\"LEVERAGED\"] ) * If permissions parameter not provided, the default values will be [\"SPOT\",\"MARGIN\",\"LEVERAGED\"] . * If one wants to view all symbols on GET /api/v3/exchangeInfo , then one has to search with all permissions explicitly specified (i.e. permissions=[\"SPOT\",\"MARGIN\",\"LEVERAGED\",\"TRD_GRP_002\",\"TRD_GRP_003\",\"TRD_GRP_004\",\"TRD_GRP_005\",\"TRD_GRP_006\",\"TRD_GRP_007\"]) Data Source: Memory Response: { \"timezone\": \"UTC\", \"serverTime\": 1565246363776, \"rateLimits\": [ { //These are defined in the `ENUM definitions` section under `Rate Limiters (rateLimitType)`. //All limits are optional } ], \"exchangeFilters\": [ //These are the defined filters in the `Filters` section. //All filters are optional. ], \"symbols\": [ { \"symbol\": \"ETHBTC\", \"status\": \"TRADING\", \"baseAsset\": \"ETH\", \"baseAssetPrecision\": 8, \"quoteAsset\": \"BTC\", \"quotePrecision\": 8, // will be removed in future api versions (v4+) \"quoteAssetPrecision\": 8, \"baseCommissionPrecision\": 8, \"quoteCommissionPrecision\": 8, \"orderTypes\": [ \"LIMIT\", \"LIMIT_MAKER\", \"MARKET\", \"STOP_LOSS\", \"STOP_LOSS_LIMIT\", \"TAKE_PROFIT\", \"TAKE_PROFIT_LIMIT\" ], \"icebergAllowed\": true, \"ocoAllowed\": true, \"quoteOrderQtyMarketAllowed\": true, \"allowTrailingStop\": false, \"cancelReplaceAllowed\":false, \"isSpotTradingAllowed\": true, \"isMarginTradingAllowed\": true, \"filters\": [ //These are defined in the Filters section. //All filters are optional ], \"permissions\": [ \"SPOT\", \"MARGIN\" ], \"defaultSelfTradePreventionMode\": \"NONE\", \"allowedSelfTradePreventionModes\": [ \"NONE\" ] } ] } Market Data endpoints Order book GET /api/v3/depth Weight: Adjusted based on the limit: Limit Request Weight 1-100 1 101-500 5 501-1000 10 1001-5000 50 Parameters: Name Type Mandatory Description symbol STRING YES limit INT NO Default 100; max 5000. If limit > 5000. then the response will truncate to 5000. Data Source: Memory Response: { \"lastUpdateId\": 1027024, \"bids\": [ [ \"4.00000000\", // PRICE \"431.00000000\" // QTY ] ], \"asks\": [ [ \"4.00000200\", \"12.00000000\" ] ] } Recent trades list GET /api/v3/trades Get recent trades. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES limit INT NO Default 500; max 1000. Data Source: Memory Response: [ { \"id\": 28457, \"price\": \"4.00000100\", \"qty\": \"12.00000000\", \"quoteQty\": \"48.000012\", \"time\": 1499865549590, \"isBuyerMaker\": true, \"isBestMatch\": true } ] Old trade lookup (MARKET_DATA) GET /api/v3/historicalTrades Get older trades. Weight: 5 Parameters: Name Type Mandatory Description symbol STRING YES limit INT NO Default 500; max 1000. fromId LONG NO TradeId to fetch from. Default gets most recent trades. Data Source: Database Response: [ { \"id\": 28457, \"price\": \"4.00000100\", \"qty\": \"12.00000000\", \"quoteQty\": \"48.000012\", \"time\": 1499865549590, \"isBuyerMaker\": true, \"isBestMatch\": true } ] Compressed/Aggregate trades list GET /api/v3/aggTrades Get compressed, aggregate trades. Trades that fill at the time, from the same taker order, with the same price will have the quantity aggregated. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES fromId LONG NO ID to get aggregate trades from INCLUSIVE. startTime LONG NO Timestamp in ms to get aggregate trades from INCLUSIVE. endTime LONG NO Timestamp in ms to get aggregate trades until INCLUSIVE. limit INT NO Default 500; max 1000. If fromId, startTime, and endTime are not sent, the most recent aggregate trades will be returned. Data Source: Database Response: [ { \"a\": 26129, // Aggregate tradeId \"p\": \"0.01633102\", // Price \"q\": \"4.70443515\", // Quantity \"f\": 27781, // First tradeId \"l\": 27781, // Last tradeId \"T\": 1498793709153, // Timestamp \"m\": true, // Was the buyer the maker? \"M\": true // Was the trade the best price match? } ] Kline/Candlestick data GET /api/v3/klines Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES interval ENUM YES startTime LONG NO endTime LONG NO limit INT NO Default 500; max 1000. If startTime and endTime are not sent, the most recent klines are returned. Data Source: Database Response: [ [ 1499040000000, // Kline open time \"0.01634790\", // Open price \"0.80000000\", // High price \"0.01575800\", // Low price \"0.01577100\", // Close price \"148976.11427815\", // Volume 1499644799999, // Kline Close time \"2434.19055334\", // Quote asset volume 308, // Number of trades \"1756.87402397\", // Taker buy base asset volume \"28.46694368\", // Taker buy quote asset volume \"0\" // Unused field, ignore. ] ] UIKlines The request is similar to klines having the same parameters and response. uiKlines return modified kline data, optimized for presentation of candlestick charts. GET /api/v3/uiKlines Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES interval ENUM YES startTime LONG NO endTime LONG NO limit INT NO Default 500; max 1000. If startTime and endTime are not sent, the most recent klines are returned. Data Source: Database Response: [ [ 1499040000000, // Kline open time \"0.01634790\", // Open price \"0.80000000\", // High price \"0.01575800\", // Low price \"0.01577100\", // Close price \"148976.11427815\", // Volume 1499644799999, // Kline close time \"2434.19055334\", // Quote asset volume 308, // Number of trades \"1756.87402397\", // Taker buy base asset volume \"28.46694368\", // Taker buy quote asset volume \"0\" // Unused field. Ignore. ] ] Current average price Current average price for a symbol. GET /api/v3/avgPrice Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES Data Source: Memory Response: { \"mins\": 5, \"price\": \"9.35751834\" } 24hr ticker price change statistics GET /api/v3/ticker/24hr 24 hour rolling window price change statistics. Careful when accessing this with no symbol. Weight: Parameter Symbols Provided Weight symbol 1 1 symbol parameter is omitted 40 symbols 1-20 1 21-100 20 101 or more 40 symbols parameter is omitted 40 Parameters: Name Type Mandatory Description symbol STRING NO Parameter symbol and symbols cannot be used in combination. If neither parameter is sent, tickers for all symbols will be returned in an array. Examples of accepted format for the symbols parameter: [\"BTCUSDT\",\"BNBUSDT\"] or %5B%22BTCUSDT%22,%22BNBUSDT%22%5D symbols STRING NO type ENUM NO Supported values: FULL or MINI . If none provided, the default is FULL Data Source: Memory Response - FULL: { \"symbol\": \"BNBBTC\", \"priceChange\": \"-94.99999800\", \"priceChangePercent\": \"-95.960\", \"weightedAvgPrice\": \"0.29628482\", \"prevClosePrice\": \"0.10002000\", \"lastPrice\": \"4.00000200\", \"lastQty\": \"200.00000000\", \"bidPrice\": \"4.00000000\", \"bidQty\": \"100.00000000\", \"askPrice\": \"4.00000200\", \"askQty\": \"100.00000000\", \"openPrice\": \"99.00000000\", \"highPrice\": \"100.00000000\", \"lowPrice\": \"0.10000000\", \"volume\": \"8913.30000000\", \"quoteVolume\": \"15.30000000\", \"openTime\": 1499783499040, \"closeTime\": 1499869899040, \"firstId\": 28385, // First tradeId \"lastId\": 28460, // Last tradeId \"count\": 76 // Trade count } OR [ { \"symbol\": \"BNBBTC\", \"priceChange\": \"-94.99999800\", \"priceChangePercent\": \"-95.960\", \"weightedAvgPrice\": \"0.29628482\", \"prevClosePrice\": \"0.10002000\", \"lastPrice\": \"4.00000200\", \"lastQty\": \"200.00000000\", \"bidPrice\": \"4.00000000\", \"bidQty\": \"100.00000000\", \"askPrice\": \"4.00000200\", \"askQty\": \"100.00000000\", \"openPrice\": \"99.00000000\", \"highPrice\": \"100.00000000\", \"lowPrice\": \"0.10000000\", \"volume\": \"8913.30000000\", \"quoteVolume\": \"15.30000000\", \"openTime\": 1499783499040, \"closeTime\": 1499869899040, \"firstId\": 28385, // First tradeId \"lastId\": 28460, // Last tradeId \"count\": 76 // Trade count } ] Response - MINI { \"symbol\": \"BNBBTC\", // Symbol Name \"openPrice\": \"99.00000000\", // Opening price of the Interval \"highPrice\": \"100.00000000\", // Highest price in the interval \"lowPrice\": \"0.10000000\", // Lowest price in the interval \"lastPrice\": \"4.00000200\", // Closing price of the interval \"volume\": \"8913.30000000\", // Total trade volume (in base asset) \"quoteVolume\": \"15.30000000\", // Total trade volume (in quote asset) \"openTime\": 1499783499040, // Start of the ticker interval \"closeTime\": 1499869899040, // End of the ticker interval \"firstId\": 28385, // First tradeId considered \"lastId\": 28460, // Last tradeId considered \"count\": 76 // Total trade count } OR [ { \"symbol\": \"BNBBTC\", \"openPrice\": \"99.00000000\", \"highPrice\": \"100.00000000\", \"lowPrice\": \"0.10000000\", \"lastPrice\": \"4.00000200\", \"volume\": \"8913.30000000\", \"quoteVolume\": \"15.30000000\", \"openTime\": 1499783499040, \"closeTime\": 1499869899040, \"firstId\": 28385, \"lastId\": 28460, \"count\": 76 }, { \"symbol\": \"LTCBTC\", \"openPrice\": \"0.07000000\", \"highPrice\": \"0.07000000\", \"lowPrice\": \"0.07000000\", \"lastPrice\": \"0.07000000\", \"volume\": \"11.00000000\", \"quoteVolume\": \"0.77000000\", \"openTime\": 1656908192899, \"closeTime\": 1656994592899, \"firstId\": 0, \"lastId\": 10, \"count\": 11 } ] Symbol price ticker GET /api/v3/ticker/price Latest price for a symbol or symbols. Weight: Parameter Symbols Provided Weight symbol 1 1 symbol parameter is omitted 2 symbols Any 2 Parameters: Name Type Mandatory Description symbol STRING NO Parameter symbol and symbols cannot be used in combination. If neither parameter is sent, prices for all symbols will be returned in an array. Examples of accepted format for the symbols parameter: [\"BTCUSDT\",\"BNBUSDT\"] or %5B%22BTCUSDT%22,%22BNBUSDT%22%5D symbols STRING NO Data Source: Memory Response: { \"symbol\": \"LTCBTC\", \"price\": \"4.00000200\" } OR [ { \"symbol\": \"LTCBTC\", \"price\": \"4.00000200\" }, { \"symbol\": \"ETHBTC\", \"price\": \"0.07946600\" } ] Symbol order book ticker GET /api/v3/ticker/bookTicker Best price/qty on the order book for a symbol or symbols. Weight: Parameter Symbols Provided Weight symbol 1 1 symbol parameter is omitted 2 symbols Any 2 Parameters: Name Type Mandatory Description symbol STRING NO Parameter symbol and symbols cannot be used in combination. If neither parameter is sent, bookTickers for all symbols will be returned in an array. Examples of accepted format for the symbols parameter: [\"BTCUSDT\",\"BNBUSDT\"] or %5B%22BTCUSDT%22,%22BNBUSDT%22%5D symbols STRING NO Data Source: Memory Response: { \"symbol\": \"LTCBTC\", \"bidPrice\": \"4.00000000\", \"bidQty\": \"431.00000000\", \"askPrice\": \"4.00000200\", \"askQty\": \"9.00000000\" } OR [ { \"symbol\": \"LTCBTC\", \"bidPrice\": \"4.00000000\", \"bidQty\": \"431.00000000\", \"askPrice\": \"4.00000200\", \"askQty\": \"9.00000000\" }, { \"symbol\": \"ETHBTC\", \"bidPrice\": \"0.07946700\", \"bidQty\": \"9.00000000\", \"askPrice\": \"100000.00000000\", \"askQty\": \"1000.00000000\" } ] Rolling window price change statistics GET /api/v3/ticker Note: This endpoint is different from the GET /api/v3/ticker/24hr endpoint. The window used to compute statistics will be no more than 59999ms from the requested windowSize . openTime for /api/v3/ticker always starts on a minute, while the closeTime is the current time of the request. As such, the effective window will be up to 59999ms wider than windowSize . E.g. If the closeTime is 1641287867099 (January 04, 2022 09:17:47:099 UTC) , and the windowSize is 1d . the openTime will be: 1641201420000 (January 3, 2022, 09:17:00) Weight: 2 for each requested symbol regardless of windowSize . The weight for this request will cap at 100 once the number of symbols in the request is more than 50. Parameters Name Type Mandatory Description symbol STRING YES Either symbol or symbols must be provided Examples of accepted format for the symbols parameter: [\"BTCUSDT\",\"BNBUSDT\"] or %5B%22BTCUSDT%22,%22BNBUSDT%22%5D The maximum number of symbols allowed in a request is 100. symbols windowSize ENUM NO Defaults to 1d if no parameter provided Supported windowSize values: 1m , 2m .... 59m for minutes 1h , 2h .... 23h - for hours 1d ... 7d - for days Units cannot be combined (e.g. 1d2h is not allowed) type ENUM NO Supported values: FULL or MINI . If none provided, the default is FULL Data Source: Database Response - FULL When using symbol : { \"symbol\": \"BNBBTC\", \"priceChange\": \"-8.00000000\", // Absolute price change \"priceChangePercent\": \"-88.889\", // Relative price change in percent \"weightedAvgPrice\": \"2.60427807\", // QuoteVolume / Volume \"openPrice\": \"9.00000000\", \"highPrice\": \"9.00000000\", \"lowPrice\": \"1.00000000\", \"lastPrice\": \"1.00000000\", \"volume\": \"187.00000000\", \"quoteVolume\": \"487.00000000\", // Sum of (price * volume) for all trades \"openTime\": 1641859200000, // Open time for ticker window \"closeTime\": 1642031999999, // Close time for ticker window \"firstId\": 0, // Trade IDs \"lastId\": 60, \"count\": 61 // Number of trades in the interval } or When using symbols : [ { \"symbol\": \"BTCUSDT\", \"priceChange\": \"-154.13000000\", // Absolute price change \"priceChangePercent\": \"-0.740\", // Relative price change in percent \"weightedAvgPrice\": \"20677.46305250\", // QuoteVolume / Volume \"openPrice\": \"20825.27000000\", \"highPrice\": \"20972.46000000\", \"lowPrice\": \"20327.92000000\", \"lastPrice\": \"20671.14000000\", \"volume\": \"72.65112300\", \"quoteVolume\": \"1502240.91155513\", // Sum of (price * volume) for all trades \"openTime\": 1655432400000, // Open time for ticker window \"closeTime\": 1655446835460, // Close time for ticker window \"firstId\": 11147809, // Trade IDs \"lastId\": 11149775, \"count\": 1967 // Number of trades in the interval }, { \"symbol\": \"BNBBTC\", \"priceChange\": \"0.00008530\", \"priceChangePercent\": \"0.823\", \"weightedAvgPrice\": \"0.01043129\", \"openPrice\": \"0.01036170\", \"highPrice\": \"0.01049850\", \"lowPrice\": \"0.01033870\", \"lastPrice\": \"0.01044700\", \"volume\": \"166.67000000\", \"quoteVolume\": \"1.73858301\", \"openTime\": 1655432400000, \"closeTime\": 1655446835460, \"firstId\": 2351674, \"lastId\": 2352034, \"count\": 361 } ] Response - MINI When using symbol : { \"symbol\": \"LTCBTC\", \"openPrice\": \"0.10000000\", \"highPrice\": \"2.00000000\", \"lowPrice\": \"0.10000000\", \"lastPrice\": \"2.00000000\", \"volume\": \"39.00000000\", \"quoteVolume\": \"13.40000000\", // Sum of (price * volume) for all trades \"openTime\": 1656986580000, // Open time for ticker window \"closeTime\": 1657001016795, // Close time for ticker window \"firstId\": 0, // Trade IDs \"lastId\": 34, \"count\": 35 // Number of trades in the interval } OR When using symbols : [ { \"symbol\": \"BNBBTC\", \"openPrice\": \"0.10000000\", \"highPrice\": \"2.00000000\", \"lowPrice\": \"0.10000000\", \"lastPrice\": \"2.00000000\", \"volume\": \"39.00000000\", \"quoteVolume\": \"13.40000000\", // Sum of (price * volume) for all trades \"openTime\": 1656986880000, // Open time for ticker window \"closeTime\": 1657001297799, // Close time for ticker window \"firstId\": 0, // Trade IDs \"lastId\": 34, \"count\": 35 // Number of trades in the interval }, { \"symbol\": \"LTCBTC\", \"openPrice\": \"0.07000000\", \"highPrice\": \"0.07000000\", \"lowPrice\": \"0.07000000\", \"lastPrice\": \"0.07000000\", \"volume\": \"33.00000000\", \"quoteVolume\": \"2.31000000\", \"openTime\": 1656986880000, \"closeTime\": 1657001297799, \"firstId\": 0, \"lastId\": 32, \"count\": 33 } ] Account endpoints New order (TRADE) POST /api/v3/order (HMAC SHA256) Send in a new order. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES side ENUM YES type ENUM YES timeInForce ENUM NO quantity DECIMAL NO quoteOrderQty DECIMAL NO price DECIMAL NO newClientOrderId STRING NO A unique id among open orders. Automatically generated if not sent. Orders with the same newClientOrderID can be accepted only when the previous one is filled, otherwise the order will be rejected. strategyId INT NO strategyType INT NO The value cannot be less than 1000000 . stopPrice DECIMAL NO Used with STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , and TAKE_PROFIT_LIMIT orders. trailingDelta LONG NO Used with STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , and TAKE_PROFIT_LIMIT orders. icebergQty DECIMAL NO Used with LIMIT , STOP_LOSS_LIMIT , and TAKE_PROFIT_LIMIT to create an iceberg order. newOrderRespType ENUM NO Set the response JSON. ACK , RESULT , or FULL ; MARKET and LIMIT order types default to FULL , all other orders default to ACK . selfTradePreventionMode ENUM NO The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER , EXPIRE_MAKER , EXPIRE_BOTH , NONE . recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Some additional mandatory parameters based on order type : Type Additional mandatory parameters Additional Information LIMIT timeInForce , quantity , price MARKET quantity or quoteOrderQty MARKET orders using the quantity field specifies the amount of the base asset the user wants to buy or sell at the market price. E.g. MARKET order on BTCUSDT will specify how much BTC the user is buying or selling. MARKET orders using quoteOrderQty specifies the amount the user wants to spend (when buying) or receive (when selling) the quote asset; the correct quantity will be determined based on the market liquidity and quoteOrderQty . E.g. Using the symbol BTCUSDT: BUY side, the order will buy as many BTC as quoteOrderQty USDT can. SELL side, the order will sell as much BTC needed to receive quoteOrderQty USDT. STOP_LOSS quantity , stopPrice or trailingDelta This will execute a MARKET order when the conditions are met. (e.g. stopPrice is met or trailingDelta is activated) STOP_LOSS_LIMIT timeInForce , quantity , price , stopPrice or trailingDelta TAKE_PROFIT quantity , stopPrice or trailingDelta This will execute a MARKET order when the conditions are met. (e.g. stopPrice is met or trailingDelta is activated) TAKE_PROFIT_LIMIT timeInForce , quantity , price , stopPrice or trailingDelta LIMIT_MAKER quantity , price This is a LIMIT order that will be rejected if the order immediately matches and trades as a taker. This is also known as a POST-ONLY order. Other info: Any LIMIT or LIMIT_MAKER type order can be made an iceberg order by sending an icebergQty . Any order with an icebergQty MUST have timeInForce set to GTC . For STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT_LIMIT and TAKE_PROFIT orders, trailingDelta can be combined with stopPrice . MARKET orders using quoteOrderQty will not break LOT_SIZE filter rules; the order will execute a quantity that will have the notional value as close as possible to quoteOrderQty . Trigger order price rules against market price for both MARKET and LIMIT versions: Price above market price: STOP_LOSS BUY , TAKE_PROFIT SELL Price below market price: STOP_LOSS SELL , TAKE_PROFIT BUY Data Source: Matching Engine Response ACK: { \"symbol\": \"BTCUSDT\", \"orderId\": 28, \"orderListId\": -1, //Unless OCO, value will be -1 \"clientOrderId\": \"6gCrw2kRUAF9CvJDGP16IP\", \"transactTime\": 1507725176595 } Response RESULT: { \"symbol\": \"BTCUSDT\", \"orderId\": 28, \"orderListId\": -1, //Unless OCO, value will be -1 \"clientOrderId\": \"6gCrw2kRUAF9CvJDGP16IP\", \"transactTime\": 1507725176595, \"price\": \"0.00000000\", \"origQty\": \"10.00000000\", \"executedQty\": \"10.00000000\", \"cummulativeQuoteQty\": \"10.00000000\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"MARKET\", \"side\": \"SELL\", \"strategyId\": 1, // This is only visible if the field was populated on order placement. \"strategyType\": 1000000, // This is only visible if the field was populated on order placement. \"workingTime\": 1507725176595, \"selfTradePreventionMode\": \"NONE\" } Response FULL: { \"symbol\": \"BTCUSDT\", \"orderId\": 28, \"orderListId\": -1, //Unless OCO, value will be -1 \"clientOrderId\": \"6gCrw2kRUAF9CvJDGP16IP\", \"transactTime\": 1507725176595, \"price\": \"0.00000000\", \"origQty\": \"10.00000000\", \"executedQty\": \"10.00000000\", \"cummulativeQuoteQty\": \"10.00000000\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"MARKET\", \"side\": \"SELL\", \"strategyId\": 1, // This is only visible if the field was populated on order placement. \"strategyType\": 1000000, // This is only visible if the field was populated on order placement. \"workingTime\": 1507725176595, \"selfTradePreventionMode\": \"NONE\", \"fills\": [ { \"price\": \"4000.00000000\", \"qty\": \"1.00000000\", \"commission\": \"4.00000000\", \"commissionAsset\": \"USDT\", \"tradeId\": 56 }, { \"price\": \"3999.00000000\", \"qty\": \"5.00000000\", \"commission\": \"19.99500000\", \"commissionAsset\": \"USDT\", \"tradeId\": 57 }, { \"price\": \"3998.00000000\", \"qty\": \"2.00000000\", \"commission\": \"7.99600000\", \"commissionAsset\": \"USDT\", \"tradeId\": 58 }, { \"price\": \"3997.00000000\", \"qty\": \"1.00000000\", \"commission\": \"3.99700000\", \"commissionAsset\": \"USDT\", \"tradeId\": 59 }, { \"price\": \"3995.00000000\", \"qty\": \"1.00000000\", \"commission\": \"3.99500000\", \"commissionAsset\": \"USDT\", \"tradeId\": 60 } ] } Test new order (TRADE) POST /api/v3/order/test (HMAC SHA256) Test new order creation and signature/recvWindow long. Creates and validates a new order but does not send it into the matching engine. Weight: 1 Parameters: Same as POST /api/v3/order Data Source: Memory Response: {} Query order (USER_DATA) GET /api/v3/order (HMAC SHA256) Check an order's status. Weight: 2 Parameters: Name Type Mandatory Description symbol STRING YES orderId LONG NO origClientOrderId STRING NO recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Notes: * Either orderId or origClientOrderId must be sent. * For some historical orders cummulativeQuoteQty will be < 0, meaning the data is not available at this time. Data Source: Memory => Database Response: { \"symbol\": \"LTCBTC\", \"orderId\": 1, \"orderListId\": -1 //Unless part of an OCO, the value will always be -1. \"clientOrderId\": \"myOrder1\", \"price\": \"0.1\", \"origQty\": \"1.0\", \"executedQty\": \"0.0\", \"cummulativeQuoteQty\": \"0.0\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.0\", \"icebergQty\": \"0.0\", \"time\": 1499827319559, \"updateTime\": 1499827319559, \"isWorking\": true, \"workingTime\":1499827319559, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\" } Cancel order (TRADE) DELETE /api/v3/order (HMAC SHA256) Cancel an active order. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES orderId LONG NO origClientOrderId STRING NO newClientOrderId STRING NO Used to uniquely identify this cancel. Automatically generated by default. recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Either orderId or origClientOrderId must be sent. If both parameters are sent, orderId takes precedence. Data Source: Matching Engine Response: { \"symbol\": \"LTCBTC\", \"origClientOrderId\": \"myOrder1\", \"orderId\": 4, \"orderListId\": -1, //Unless part of an OCO, the value will always be -1. \"clientOrderId\": \"cancelMyOrder1\", \"price\": \"2.00000000\", \"origQty\": \"1.00000000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"selfTradePreventionMode\": \"NONE\" } Cancel All Open Orders on a Symbol (TRADE) DELETE /api/v3/openOrders (HMAC SHA256) Cancels all active orders on a symbol. This includes OCO orders. Weight 1 Name Type Mandatory Description symbol STRING YES recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Data Source: Matching Engine Response [ { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"E6APeyTJvkMvLMYMqu1KQ4\", \"orderId\": 11, \"orderListId\": -1, \"clientOrderId\": \"pXLV6Hz6mprAcVYpVMTGgx\", \"price\": \"0.089853\", \"origQty\": \"0.178622\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"A3EF2HCwxgZPFMrfwbgrhv\", \"orderId\": 13, \"orderListId\": -1, \"clientOrderId\": \"pXLV6Hz6mprAcVYpVMTGgx\", \"price\": \"0.090430\", \"origQty\": \"0.178622\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"selfTradePreventionMode\": \"NONE\" }, { \"orderListId\": 1929, \"contingencyType\": \"OCO\", \"listStatusType\": \"ALL_DONE\", \"listOrderStatus\": \"ALL_DONE\", \"listClientOrderId\": \"2inzWQdDvZLHbbAmAozX2N\", \"transactionTime\": 1585230948299, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 20, \"clientOrderId\": \"CwOOIPHSmYywx6jZX77TdL\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 21, \"clientOrderId\": \"461cPg51vQjV3zIMOXNz39\" } ], \"orderReports\": [ { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"CwOOIPHSmYywx6jZX77TdL\", \"orderId\": 20, \"orderListId\": 1929, \"clientOrderId\": \"pXLV6Hz6mprAcVYpVMTGgx\", \"price\": \"0.668611\", \"origQty\": \"0.690354\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS_LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.378131\", \"icebergQty\": \"0.017083\", \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"461cPg51vQjV3zIMOXNz39\", \"orderId\": 21, \"orderListId\": 1929, \"clientOrderId\": \"pXLV6Hz6mprAcVYpVMTGgx\", \"price\": \"0.008791\", \"origQty\": \"0.690354\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"BUY\", \"icebergQty\": \"0.639962\", \"selfTradePreventionMode\": \"NONE\" } ] } ] Cancel an Existing Order and Send a New Order (TRADE) POST /api/v3/order/cancelReplace Cancels an existing order and places a new order on the same symbol. Filters and Order Count are evaluated before the processing of the cancellation and order placement occurs. A new order that was not attempted (i.e. when newOrderResult: NOT_ATTEMPTED ), will still increase the order count by 1. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES side ENUM YES type ENUM YES cancelReplaceMode ENUM YES The allowed values are: STOP_ON_FAILURE - If the cancel request fails, the new order placement will not be attempted. ALLOW_FAILURE - new order placement will be attempted even if cancel request fails. timeInForce ENUM NO quantity DECIMAL NO quoteOrderQty DECIMAL NO price DECIMAL NO cancelNewClientOrderId STRING NO Used to uniquely identify this cancel. Automatically generated by default. cancelOrigClientOrderId STRING NO Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence. cancelOrderId LONG NO Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence. newClientOrderId STRING NO Used to identify the new order. strategyId INT NO strategyType INT NO The value cannot be less than 1000000 . stopPrice DECIMAL NO trailingDelta LONG NO icebergQty DECIMAL NO newOrderRespType ENUM NO Allowed values: ACK , RESULT , FULL MARKET and LIMIT orders types default to FULL ; all other orders default to ACK selfTradePreventionMode ENUM NO The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER , EXPIRE_MAKER , EXPIRE_BOTH , NONE . recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Similar to POST /api/v3/order , additional mandatory parameters are determined by type . Response format varies depending on whether the processing of the message succeeded, partially succeeded, or failed. Data Source: Matching Engine Response SUCCESS: //Both the cancel order placement and new order placement succeeded. { \"cancelResult\": \"SUCCESS\", \"newOrderResult\": \"SUCCESS\", \"cancelResponse\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"DnLo3vTAQcjha43lAZhZ0y\", \"orderId\": 9, \"orderListId\": -1, \"clientOrderId\": \"osxN3JXAtJvKvCqGeMWMVR\", \"price\": \"0.01000000\", \"origQty\": \"0.000100\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" }, \"newOrderResponse\": { \"symbol\": \"BTCUSDT\", \"orderId\": 10, \"orderListId\": -1, \"clientOrderId\": \"wOceeeOzNORyLiQfw7jd8S\", \"transactTime\": 1652928801803, \"price\": \"0.02000000\", \"origQty\": \"0.040000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"workingTime\": 1669277163808, \"fills\": [], \"selfTradePreventionMode\": \"NONE\" } } Response when Cancel Order Fails with STOP_ON FAILURE: { \"code\": -2022, \"msg\": \"Order cancel-replace failed.\", \"data\": { \"cancelResult\": \"FAILURE\", \"newOrderResult\": \"NOT_ATTEMPTED\", \"cancelResponse\": { \"code\": -2011, \"msg\": \"Unknown order sent.\" }, \"newOrderResponse\": null } } Response when Cancel Order Succeeds but New Order Placement Fails: { \"code\": -2021, \"msg\": \"Order cancel-replace partially failed.\", \"data\": { \"cancelResult\": \"SUCCESS\", \"newOrderResult\": \"FAILURE\", \"cancelResponse\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"86M8erehfExV8z2RC8Zo8k\", \"orderId\": 3, \"orderListId\": -1, \"clientOrderId\": \"G1kLo6aDv2KGNTFcjfTSFq\", \"price\": \"0.006123\", \"origQty\": \"10000.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" }, \"newOrderResponse\": { \"code\": -2010, \"msg\": \"Order would immediately match and take.\" } } } Response when Cancel Order fails with ALLOW_FAILURE: { \"code\": -2021, \"msg\": \"Order cancel-replace partially failed.\", \"data\": { \"cancelResult\": \"FAILURE\", \"newOrderResult\": \"SUCCESS\", \"cancelResponse\": { \"code\": -2011, \"msg\": \"Unknown order sent.\" }, \"newOrderResponse\": { \"symbol\": \"BTCUSDT\", \"orderId\": 11, \"orderListId\": -1, \"clientOrderId\": \"pfojJMg6IMNDKuJqDxvoxN\", \"transactTime\": 1648540168818 } } } Response when both Cancel Order and New Order Placement fail: { \"code\": -2022, \"msg\": \"Order cancel-replace failed.\", \"data\": { \"cancelResult\": \"FAILURE\", \"newOrderResult\": \"FAILURE\", \"cancelResponse\": { \"code\": -2011, \"msg\": \"Unknown order sent.\" }, \"newOrderResponse\": { \"code\": -2010, \"msg\": \"Order would immediately match and take.\" } } } Current open orders (USER_DATA) GET /api/v3/openOrders (HMAC SHA256) Get all open orders on a symbol. Careful when accessing this with no symbol. Weight: 3 for a single symbol; 40 when the symbol parameter is omitted Parameters: Name Type Mandatory Description symbol STRING NO recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES If the symbol is not sent, orders for all symbols will be returned in an array. Data Source: Memory => Database Response: [ { \"symbol\": \"LTCBTC\", \"orderId\": 1, \"orderListId\": -1, //Unless OCO, the value will always be -1 \"clientOrderId\": \"myOrder1\", \"price\": \"0.1\", \"origQty\": \"1.0\", \"executedQty\": \"0.0\", \"cummulativeQuoteQty\": \"0.0\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.0\", \"icebergQty\": \"0.0\", \"time\": 1499827319559, \"updateTime\": 1499827319559, \"isWorking\": true, \"origQuoteOrderQty\": \"0.000000\", \"workingTime\": 1499827319559, \"selfTradePreventionMode\": \"NONE\" } ] All orders (USER_DATA) GET /api/v3/allOrders (HMAC SHA256) Get all account orders; active, canceled, or filled. Weight: 10 with symbol Data Source: Database Parameters: Name Type Mandatory Description symbol STRING YES orderId LONG NO startTime LONG NO endTime LONG NO limit INT NO Default 500; max 1000. recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Notes: * If orderId is set, it will get orders >= that orderId . Otherwise most recent orders are returned. * For some historical orders cummulativeQuoteQty will be < 0, meaning the data is not available at this time. * If startTime and/or endTime provided, orderId is not required. Response: [ { \"symbol\": \"LTCBTC\", \"orderId\": 1, \"orderListId\": -1, //Unless OCO, the value will always be -1 \"clientOrderId\": \"myOrder1\", \"price\": \"0.1\", \"origQty\": \"1.0\", \"executedQty\": \"0.0\", \"cummulativeQuoteQty\": \"0.0\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.0\", \"icebergQty\": \"0.0\", \"time\": 1499827319559, \"updateTime\": 1499827319559, \"isWorking\": true, \"origQuoteOrderQty\": \"0.000000\", \"workingTime\": 1499827319559, \"selfTradePreventionMode\": \"NONE\" } ] New OCO (TRADE) POST /api/v3/order/oco (HMAC SHA256) Weight : 1 Send in a new OCO Parameters : Name Type Mandatory Description symbol STRING YES listClientOrderId STRING NO A unique Id for the entire orderList side ENUM YES quantity DECIMAL YES limitClientOrderId STRING NO A unique Id for the limit order price DECIMAL YES limitStrategyId INT NO limitStrategyType INT NO The value cannot be less than 1000000 . limitIcebergQty DECIMAL NO Used to make the LIMIT_MAKER leg an iceberg order. trailingDelta LONG NO stopClientOrderId STRING NO A unique Id for the stop loss/stop loss limit leg stopPrice DECIMAL YES stopStrategyId INT NO stopStrategyType INT NO The value cannot be less than 1000000 . stopLimitPrice DECIMAL NO If provided, stopLimitTimeInForce is required. stopIcebergQty DECIMAL NO Used with STOP_LOSS_LIMIT leg to make an iceberg order. stopLimitTimeInForce ENUM NO Valid values are GTC / FOK / IOC newOrderRespType ENUM NO Set the response JSON. selfTradePreventionMode ENUM NO The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER , EXPIRE_MAKER , EXPIRE_BOTH , NONE . recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Additional Info: * Price Restrictions: * SELL : Limit Price > Last Price > Stop Price * BUY : Limit Price < Last Price < Stop Price * Quantity Restrictions: * Both legs must have the same quantity. * ICEBERG quantities however do not have to be the same * Order Rate Limit * OCO counts as 2 orders against the order rate limit. Data Source: Matching Engine Response: { \"orderListId\": 0, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"JYVpp3F0f5CAG15DhtrqLp\", \"transactionTime\": 1563417480525, \"symbol\": \"LTCBTC\", \"orders\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 2, \"clientOrderId\": \"Kk7sqHb9J6mJWTMDVW7Vos\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 3, \"clientOrderId\": \"xTXKaGYd4bluPVp78IVRvl\" } ], \"orderReports\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 2, \"orderListId\": 0, \"clientOrderId\": \"Kk7sqHb9J6mJWTMDVW7Vos\", \"transactTime\": 1563417480525, \"price\": \"0.000000\", \"origQty\": \"0.624363\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS\", \"side\": \"BUY\", \"stopPrice\": \"0.960664\", \"workingTime\": -1, \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 3, \"orderListId\": 0, \"clientOrderId\": \"xTXKaGYd4bluPVp78IVRvl\", \"transactTime\": 1563417480525, \"price\": \"0.036435\", \"origQty\": \"0.624363\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"BUY\", \"workingTime\": 1563417480525, \"selfTradePreventionMode\": \"NONE\" } ] } Cancel OCO (TRADE) DELETE /api/v3/orderList (HMAC SHA256) Weight : 1 Cancel an entire Order List Parameters: Name Type Mandatory Description symbol STRING YES orderListId LONG NO Either orderListId or listClientOrderId must be provided listClientOrderId STRING NO Either orderListId or listClientOrderId must be provided newClientOrderId STRING NO Used to uniquely identify this cancel. Automatically generated by default recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Additional notes: * Canceling an individual leg will cancel the entire OCO * If both orderListId and listClientOrderId are sent, orderListId takes precedence. Data Source: Matching Engine Response { \"orderListId\": 0, \"contingencyType\": \"OCO\", \"listStatusType\": \"ALL_DONE\", \"listOrderStatus\": \"ALL_DONE\", \"listClientOrderId\": \"C3wyj4WVEktd7u9aVBRXcN\", \"transactionTime\": 1574040868128, \"symbol\": \"LTCBTC\", \"orders\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 2, \"clientOrderId\": \"pO9ufTiFGg3nw2fOdgeOXa\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 3, \"clientOrderId\": \"TXOvglzXuaubXAaENpaRCB\" } ], \"orderReports\": [ { \"symbol\": \"LTCBTC\", \"origClientOrderId\": \"pO9ufTiFGg3nw2fOdgeOXa\", \"orderId\": 2, \"orderListId\": 0, \"clientOrderId\": \"unfWT8ig8i0uj6lPuYLez6\", \"price\": \"1.00000000\", \"origQty\": \"10.00000000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS_LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"1.00000000\", \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"LTCBTC\", \"origClientOrderId\": \"TXOvglzXuaubXAaENpaRCB\", \"orderId\": 3, \"orderListId\": 0, \"clientOrderId\": \"unfWT8ig8i0uj6lPuYLez6\", \"price\": \"3.00000000\", \"origQty\": \"10.00000000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" } ] } Query OCO (USER_DATA) GET /api/v3/orderList (HMAC SHA256) Weight : 2 Retrieves a specific OCO based on provided optional parameters Parameters : Name Type Mandatory Description orderListId LONG NO Either orderListId or listClientOrderId must be provided origClientOrderId STRING NO Either orderListId or listClientOrderId must be provided recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Data Source: Database Response: { \"orderListId\": 27, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"h2USkA5YQpaXHPIrkd96xE\", \"transactionTime\": 1565245656253, \"symbol\": \"LTCBTC\", \"orders\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 4, \"clientOrderId\": \"qD1gy3kc3Gx0rihm9Y3xwS\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 5, \"clientOrderId\": \"ARzZ9I00CPM8i3NhmU9Ega\" } ] } Query all OCO (USER_DATA) GET /api/v3/allOrderList (HMAC SHA256) Weight : 10 Retrieves all OCO based on provided optional parameters Parameters Name Type Mandatory Description fromId LONG NO If supplied, neither startTime or endTime can be provided startTime LONG NO endTime LONG NO limit INT NO Default Value: 500; Max Value: 1000 recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Data Source: Database Response: [ { \"orderListId\": 29, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"amEEAXryFzFwYF1FeRpUoZ\", \"transactionTime\": 1565245913483, \"symbol\": \"LTCBTC\", \"orders\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 4, \"clientOrderId\": \"oD7aesZqjEGlZrbtRpy5zB\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 5, \"clientOrderId\": \"Jr1h6xirOxgeJOUuYQS7V3\" } ] }, { \"orderListId\": 28, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"hG7hFNxJV6cZy3Ze4AUT4d\", \"transactionTime\": 1565245913407, \"symbol\": \"LTCBTC\", \"orders\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 2, \"clientOrderId\": \"j6lFOfbmFMRjTYA7rRJ0LP\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 3, \"clientOrderId\": \"z0KCjOdditiLS5ekAFtK81\" } ] } ] Query Open OCO (USER_DATA) GET /api/v3/openOrderList (HMAC SHA256) Weight: 3 Parameters Name Type Mandatory Description recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Data Source: Database Response: [ { \"orderListId\": 31, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"wuB13fmulKj3YjdqWEcsnp\", \"transactionTime\": 1565246080644, \"symbol\": \"LTCBTC\", \"orders\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 4, \"clientOrderId\": \"r3EH2N76dHfLoSZWIUw1bT\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 5, \"clientOrderId\": \"Cv1SnyPD3qhqpbjpYEHbd2\" } ] } ] Account information (USER_DATA) GET /api/v3/account (HMAC SHA256) Get current account information. Weight: 10 Parameters: Name Type Mandatory Description recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Data Source: Memory => Database Response: { \"makerCommission\": 15, \"takerCommission\": 15, \"buyerCommission\": 0, \"sellerCommission\": 0, \"commissionRates\": { \"maker\": \"0.00150000\", \"taker\": \"0.00150000\", \"buyer\": \"0.00000000\", \"seller\": \"0.00000000\" }, \"canTrade\": true, \"canWithdraw\": true, \"canDeposit\": true, \"brokered\":false, \"requireSelfTradePrevention\": false, \"updateTime\": 123456789, \"accountType\": \"SPOT\", \"balances\": [ { \"asset\": \"BTC\", \"free\": \"4723846.89208129\", \"locked\": \"0.00000000\" }, { \"asset\": \"LTC\", \"free\": \"4763368.68006011\", \"locked\": \"0.00000000\" } ], \"permissions\": [ \"SPOT\" ] } Account trade list (USER_DATA) GET /api/v3/myTrades (HMAC SHA256) Get trades for a specific account and symbol. Weight: 10 with symbol Parameters: Name Type Mandatory Description symbol STRING YES orderId LONG NO This can only be used in combination with symbol . startTime LONG NO endTime LONG NO fromId LONG NO TradeId to fetch from. Default gets most recent trades. limit INT NO Default 500; max 1000. recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Notes: * If fromId is set, it will get trades >= that fromId . Otherwise most recent trades are returned. * The time between startTime and endTime can't be longer than 24 hours. * These are the supported combinations of all parameters: * symbol * symbol + orderId * symbol + startTime * symbol + endTime * symbol + fromId * symbol + startTime + endTime * symbol + orderId + fromId Data Source: Memory => Database Response: [ { \"symbol\": \"BNBBTC\", \"id\": 28457, \"orderId\": 100234, \"orderListId\": -1, \"price\": \"4.00000100\", \"qty\": \"12.00000000\", \"quoteQty\": \"48.000012\", \"commission\": \"10.10000000\", \"commissionAsset\": \"BNB\", \"time\": 1499865549590, \"isBuyer\": true, \"isMaker\": false, \"isBestMatch\": true } ] Query Current Order Count Usage (TRADE) GET /api/v3/rateLimit/order Displays the user's current order count usage for all intervals. Weight: 20 Parameters: Name Type Mandatory Description recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Data Source: Memory Response: [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 0 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 0 } ] Query Prevented Matches (USER_DATA) GET /api/v3/myPreventedMatches Displays the list of orders that were expired because of STP trigger. These are the combinations supported: symbol + preventedMatchId symbol + orderId symbol + orderId + fromPreventedMatchId ( limit will default to 500) symbol + orderId + fromPreventedMatchId + limit Parameters: Name Type Mandatory Description symbol STRING YES preventedMatchId LONG NO orderId LONG NO fromPreventedMatchId LONG NO limit INT NO Default: 500 ; Max: 1000 recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Weight Case Weight If symbol is invalid 1 Querying by preventedMatchId 1 Querying by orderId 10 Data Source: Database Response: [ { \"symbol\": \"BTCUSDT\", \"preventedMatchId\": 1, \"takerOrderId\": 5, \"makerOrderId\": 3, \"tradeGroupId\": 1, \"selfTradePreventionMode\": \"EXPIRE_MAKER\", \"price\": \"1.100000\", \"makerPreventedQuantity\": \"1.300000\", \"transactTime\": 1669101687094 } ] User data stream endpoints Specifics on how user data streams work can be found here. Start user data stream (USER_STREAM) POST /api/v3/userDataStream Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent. Weight: 1 Parameters: NONE Data Source: Memory Response: { \"listenKey\": \"pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1\" } Keepalive user data stream (USER_STREAM) PUT /api/v3/userDataStream Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes. Weight: 1 Data Source\" Memory Parameters: Name Type Mandatory Description listenKey STRING YES Response: {} Close user data stream (USER_STREAM) DELETE /api/v3/userDataStream Close out a user data stream. Weight: 1 Parameters: Name Type Mandatory Description listenKey STRING YES Data Source: Memory Response: {}","title":"Rest Api"},{"location":"rest-api/#public-rest-api-for-binance-2023-01-23","text":"","title":"Public Rest API for Binance (2023-01-23)"},{"location":"rest-api/#general-api-information","text":"The following base endpoints are available: https://api.binance.com https://api1.binance.com https://api2.binance.com https://api3.binance.com https://api4.binance.com All endpoints are equal in functionality. Performance may vary between the base endpoints and can be freely switched between them to find which one works best for one's setup. All endpoints return either a JSON object or array. Data is returned in ascending order. Oldest first, newest last. All time and timestamp related fields are in milliseconds . The base endpoint https://data.binance.com can be used to access the following API endpoints that have NONE as security type: GET /api/v3/aggTrades GET /api/v3/avgPrice GET /api/v3/depth GET /api/v3/exchangeInfo GET /api/v3/klines GET /api/v3/ping GET /api/v3/ticker GET /api/v3/ticker/24hr GET /api/v3/ticker/bookTicker GET /api/v3/ticker/price GET /api/v3/time GET /api/v3/trades GET /api/v3/uiKlines","title":"General API Information"},{"location":"rest-api/#http-return-codes","text":"HTTP 4XX return codes are used for malformed requests; the issue is on the sender's side. HTTP 403 return code is used when the WAF Limit (Web Application Firewall) has been violated. HTTP 409 return code is used when a cancelReplace order partially succeeds. (i.e. if the cancellation of the order fails but the new order placement succeeds.) HTTP 429 return code is used when breaking a request rate limit. HTTP 418 return code is used when an IP has been auto-banned for continuing to send requests after receiving 429 codes. HTTP 5XX return codes are used for internal errors; the issue is on Binance's side. It is important to NOT treat this as a failure operation; the execution status is UNKNOWN and could have been a success.","title":"HTTP Return Codes"},{"location":"rest-api/#error-codes","text":"Any endpoint can return an ERROR Sample Payload below: { \"code\": -1121, \"msg\": \"Invalid symbol.\" } Specific error codes and messages are defined in Errors Codes .","title":"Error Codes"},{"location":"rest-api/#general-information-on-endpoints","text":"For GET endpoints, parameters must be sent as a query string . For POST , PUT , and DELETE endpoints, the parameters may be sent as a query string or in the request body with content type application/x-www-form-urlencoded . You may mix parameters between both the query string and request body if you wish to do so. Parameters may be sent in any order. If a parameter sent in both the query string and request body , the query string parameter will be used.","title":"General Information on Endpoints"},{"location":"rest-api/#limits","text":"","title":"LIMITS"},{"location":"rest-api/#general-info-on-limits","text":"The following intervalLetter values for headers: SECOND => S MINUTE => M HOUR => H DAY => D intervalNum describes the amount of the interval. For example, intervalNum 5 with intervalLetter M means \"Every 5 minutes\". The /api/v3/exchangeInfo rateLimits array contains objects related to the exchange's RAW_REQUESTS , REQUEST_WEIGHT , and ORDERS rate limits. These are further defined in the ENUM definitions section under Rate limiters (rateLimitType) . A 429 will be returned when either rate limit is violated.","title":"General Info on Limits"},{"location":"rest-api/#ip-limits","text":"Every request will contain X-MBX-USED-WEIGHT-(intervalNum)(intervalLetter) in the response headers which has the current used weight for the IP for all request rate limiters defined. Each route has a weight which determines for the number of requests each endpoint counts for. Heavier endpoints and endpoints that do operations on multiple symbols will have a heavier weight . When a 429 is received, it's your obligation as an API to back off and not spam the API. Repeatedly violating rate limits and/or failing to back off after receiving 429s will result in an automated IP ban (HTTP status 418). IP bans are tracked and scale in duration for repeat offenders, from 2 minutes to 3 days . A Retry-After header is sent with a 418 or 429 responses and will give the number of seconds required to wait, in the case of a 429, to prevent a ban, or, in the case of a 418, until the ban is over. The limits on the API are based on the IPs, not the API keys.","title":"IP Limits"},{"location":"rest-api/#order-rate-limits","text":"Every successful order response will contain a X-MBX-ORDER-COUNT-(intervalNum)(intervalLetter) header which has the current order count for the account for all order rate limiters defined. To monitor order count usage, refer to GET api/v3/rateLimit/order . When the order count exceeds the limit, you will receive a 429 error without the Retry-After header. Please check the Order Rate Limit rules using GET api/v3/exchangeInfo and wait for reactivation accordingly. Rejected/unsuccessful orders are not guaranteed to have X-MBX-ORDER-COUNT-** headers in the response. The order rate limit is counted against each account .","title":"Order Rate Limits"},{"location":"rest-api/#data-sources","text":"The API system is asynchronous, so some delay in the response is normal and expected. Each endpoint has a data source indicating where the data is being retrieved, and thus which endpoints have the most up-to-date response. These are the three sources, ordered by which is has the most up-to-date response to the one with potential delays in updates. Matching Engine - the data is from the matching Engine Memory - the data is from a server's local or external memory Database - the data is taken directly from a database Some endpoints can have more than 1 data source. (e.g. Memory => Database) This means that the endpoint will check the first Data Source, and if it cannot find the value it's looking for it will check the next one.","title":"Data Sources"},{"location":"rest-api/#endpoint-security-type","text":"Each endpoint has a security type that determines how you will interact with it. This is stated next to the NAME of the endpoint. If no security type is stated, assume the security type is NONE. API-keys are passed into the Rest API via the X-MBX-APIKEY header. API-keys and secret-keys are case sensitive . API-keys can be configured to only access certain types of secure endpoints. For example, one API-key could be used for TRADE only, while another API-key can access everything except for TRADE routes. By default, API-keys can access all secure routes. Security Type Description NONE Endpoint can be accessed freely. TRADE Endpoint requires sending a valid API-Key and signature. USER_DATA Endpoint requires sending a valid API-Key and signature. USER_STREAM Endpoint requires sending a valid API-Key. MARKET_DATA Endpoint requires sending a valid API-Key. TRADE and USER_DATA endpoints are SIGNED endpoints.","title":"Endpoint security type"},{"location":"rest-api/#signed-trade-and-user_data-endpoint-security","text":"SIGNED endpoints require an additional parameter, signature , to be sent in the query string or request body . Endpoints use HMAC SHA256 signatures. The HMAC SHA256 signature is a keyed HMAC SHA256 operation. Use your secretKey as the key and totalParams as the value for the HMAC operation. The signature is not case sensitive . totalParams is defined as the query string concatenated with the request body .","title":"SIGNED (TRADE and USER_DATA) Endpoint security"},{"location":"rest-api/#timing-security","text":"A SIGNED endpoint also requires a parameter, timestamp , to be sent which should be the millisecond timestamp of when the request was created and sent. An additional parameter, recvWindow , may be sent to specify the number of milliseconds after timestamp the request is valid for. If recvWindow is not sent, it defaults to 5000 . The logic is as follows: javascript if (timestamp < (serverTime + 1000) && (serverTime - timestamp) <= recvWindow) { // process request } else { // reject request } Serious trading is about timing. Networks can be unstable and unreliable, which can lead to requests taking varying amounts of time to reach the servers. With recvWindow , you can specify that the request must be processed within a certain number of milliseconds or be rejected by the server. It is recommended to use a small recvWindow of 5000 or less! The max cannot go beyond 60,000!","title":"Timing security"},{"location":"rest-api/#signed-endpoint-examples-for-post-apiv3order","text":"","title":"SIGNED Endpoint Examples for POST /api/v3/order"},{"location":"rest-api/#hmac-keys","text":"Here is a step-by-step example of how to send a valid signed payload from the Linux command line using echo , openssl , and curl . Key Value apiKey vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A secretKey NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j Parameter Value symbol LTCBTC side BUY type LIMIT timeInForce GTC quantity 1 price 0.1 recvWindow 5000 timestamp 1499827319559","title":"HMAC Keys"},{"location":"rest-api/#example-1-as-a-request-body","text":"requestBody: symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559 HMAC SHA256 signature: [linux]$ echo -n \"symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559\" | openssl dgst -sha256 -hmac \"NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j\" (stdin)= c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71 curl command: (HMAC SHA256) [linux]$ curl -H \"X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" -X POST 'https://api.binance.com/api/v3/order' -d 'symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559&signature=c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71'","title":"Example 1: As a request body"},{"location":"rest-api/#example-2-as-a-query-string","text":"queryString: symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559 HMAC SHA256 signature: [linux]$ echo -n \"symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559\" | openssl dgst -sha256 -hmac \"NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j\" (stdin)= c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71 curl command: (HMAC SHA256) [linux]$ curl -H \"X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" -X POST 'https://api.binance.com/api/v3/order?symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559&signature=c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71'","title":"Example 2: As a query string"},{"location":"rest-api/#example-3-mixed-query-string-and-request-body","text":"queryString: symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC requestBody: quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559 HMAC SHA256 signature: [linux]$ echo -n \"symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTCquantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559\" | openssl dgst -sha256 -hmac \"NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j\" (stdin)= 0fd168b8ddb4876a0358a8d14d0c9f3da0e9b20c5d52b2a00fcf7d1c602f9a77 curl command: (HMAC SHA256) [linux]$ curl -H \"X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" -X POST 'https://api.binance.com/api/v3/order?symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC' -d 'quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559&signature=0fd168b8ddb4876a0358a8d14d0c9f3da0e9b20c5d52b2a00fcf7d1c602f9a77' Note that the signature is different in example 3. There is no & between \"GTC\" and \"quantity=1\".","title":"Example 3: Mixed query string and request body"},{"location":"rest-api/#rsa-keys","text":"This will be a step by step process how to create the signature payload to send a valid signed payload. We support PKCS#8 currently. To get your API key, you need to upload your RSA Public Key to your account and a corresponding API key will be provided for you. For this example, the private key will be referenced as ./test-prv-key.pem Key Value apiKey CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ Parameter Value symbol BTCUSDT side SELL type LIMIT timeInForce GTC quantity 1 price 0.2 timestamp 1668481559918 recvWindow 5000 Step 1: Construct the payload Arrange the list of parameters into a string. Separate each parameter with a & . For the parameters above, the signature payload would look like this: symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2&timestamp=1668481559918&recvWindow=5000 Step 2: Compute the signature: Encode signature payload as ASCII data. Sign payload using RSASSA-PKCS1-v1_5 algorithm with SHA-256 hash function. $ echo -n 'symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2&timestamp=1668481559918&recvWindow=5000' | openssl dgst -sha256 -sign ./test-prv-key.pem Encode output as base64 string. $ echo -n 'symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2&timestamp=1668481559918&recvWindow=5000' | openssl dgst -sha256 -sign ./test-prv-key.pem | openssl enc -base64 -A HZ8HOjiJ1s/igS9JA+n7+7Ti/ihtkRF5BIWcPIEluJP6tlbFM/Bf44LfZka/iemtahZAZzcO9TnI5uaXh3++lrqtNonCwp6/245UFWkiW1elpgtVAmJPbogcAv6rSlokztAfWk296ZJXzRDYAtzGH0gq7CgSJKfH+XxaCmR0WcvlKjNQnp12/eKXJYO4tDap8UCBLuyxDnR7oJKLHQHJLP0r0EAVOOSIbrFang/1WOq+Jaq4Efc4XpnTgnwlBbWTmhWDR1pvS9iVEzcSYLHT/fNnMRxFc7u+j3qI//5yuGuu14KR0MuQKKCSpViieD+fIti46sxPTsjSemoUKp0oXA== Since the signature may contain / and = , this could cause issues with sending the request. So the signature has to be URL encoded. HZ8HOjiJ1s%2FigS9JA%2Bn7%2B7Ti%2FihtkRF5BIWcPIEluJP6tlbFM%2FBf44LfZka%2FiemtahZAZzcO9TnI5uaXh3%2B%2BlrqtNonCwp6%2F245UFWkiW1elpgtVAmJPbogcAv6rSlokztAfWk296ZJXzRDYAtzGH0gq7CgSJKfH%2BXxaCmR0WcvlKjNQnp12%2FeKXJYO4tDap8UCBLuyxDnR7oJKLHQHJLP0r0EAVOOSIbrFang%2F1WOq%2BJaq4Efc4XpnTgnwlBbWTmhWDR1pvS9iVEzcSYLHT%2FfNnMRxFc7u%2Bj3qI%2F%2F5yuGuu14KR0MuQKKCSpViieD%2BfIti46sxPTsjSemoUKp0oXA%3D%3D The curl command: curl -H \"X-MBX-APIKEY: CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ\" -X POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2&timestamp=1668481559918&recvWindow=5000&signature=HZ8HOjiJ1s%2FigS9JA%2Bn7%2B7Ti%2FihtkRF5BIWcPIEluJP6tlbFM%2FBf44LfZka%2FiemtahZAZzcO9TnI5uaXh3%2B%2BlrqtNonCwp6%2F245UFWkiW1elpgtVAmJPbogcAv6rSlokztAfWk296ZJXzRDYAtzGH0gq7CgSJKfH%2BXxaCmR0WcvlKjNQnp12%2FeKXJYO4tDap8UCBLuyxDnR7oJKLHQHJLP0r0EAVOOSIbrFang%2F1WOq%2BJaq4Efc4XpnTgnwlBbWTmhWDR1pvS9iVEzcSYLHT%2FfNnMRxFc7u%2Bj3qI%2F%2F5yuGuu14KR0MuQKKCSpViieD%2BfIti46sxPTsjSemoUKp0oXA%3D%3D' A sample Bash script below does the similar steps said above. API_KEY=\"put your own API Key here\" PRIVATE_KEY_PATH=\"test-prv-key.pem\" # Set up the request: API_METHOD=\"POST\" API_CALL=\"api/v3/order\" API_PARAMS=\"symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2\" # Sign the request: timestamp=$(date +%s000) api_params_with_timestamp=\"$API_PARAMS&timestamp=$timestamp\" signature=$(echo -n \"$api_params_with_timestamp\" \\ | openssl dgst -sha256 -sign \"$PRIVATE_KEY_PATH\" \\ | openssl enc -base64 -A) # Send the request: curl -H \"X-MBX-APIKEY: $API_KEY\" -X \"$API_METHOD\" \\ \"https://api.binance.com/$API_CALL?$api_params_with_timestamp\" \\ --data-urlencode \"signature=$signature\"","title":"RSA Keys"},{"location":"rest-api/#public-api-endpoints","text":"","title":"Public API Endpoints"},{"location":"rest-api/#terminology","text":"These terms will be used throughout the documentation, so it is recommended especially for new users to read to help their understanding of the API. base asset refers to the asset that is the quantity of a symbol. For the symbol BTCUSDT, BTC would be the base asset . quote asset refers to the asset that is the price of a symbol. For the symbol BTCUSDT, USDT would be the quote asset .","title":"Terminology"},{"location":"rest-api/#enum-definitions","text":"Symbol status (status): PRE_TRADING TRADING POST_TRADING END_OF_DAY HALT AUCTION_MATCH BREAK Account and Symbol Permissions (permissions): SPOT MARGIN LEVERAGED TRD_GRP_002 TRD_GRP_003 TRD_GRP_004 TRD_GRP_005 TRD_GRP_006 TRD_GRP_007 Order status (status): Status Description NEW The order has been accepted by the engine. PARTIALLY_FILLED A part of the order has been filled. FILLED The order has been completed. CANCELED The order has been canceled by the user. PENDING_CANCEL Currently unused REJECTED The order was not accepted by the engine and not processed. EXPIRED The order was canceled according to the order type's rules (e.g. LIMIT FOK orders with no fill, LIMIT IOC or MARKET orders that partially fill) or by the exchange, (e.g. orders canceled during liquidation, orders canceled during maintenance) EXPIRED_IN_MATCH The order was canceled by the exchange due to STP trigger. (e.g. an order with EXPIRE_TAKER will match with existing orders on the book with the same account or same tradeGroupId ) OCO Status (listStatusType): Status Description RESPONSE This is used when the ListStatus is responding to a failed action. (E.g. Orderlist placement or cancellation) EXEC_STARTED The order list has been placed or there is an update to the order list status. ALL_DONE The order list has finished executing and thus no longer active. OCO Order Status (listOrderStatus): Status Description EXECUTING Either an order list has been placed or there is an update to the status of the list. ALL_DONE An order list has completed execution and thus no longer active. REJECT The List Status is responding to a failed action either during order placement or order canceled ContingencyType * OCO Order types (orderTypes, type): LIMIT MARKET STOP_LOSS STOP_LOSS_LIMIT TAKE_PROFIT TAKE_PROFIT_LIMIT LIMIT_MAKER Order Response Type (newOrderRespType): ACK RESULT FULL Order side (side): BUY SELL Time in force (timeInForce): This sets how long an order will be active before expiration. Status Description GTC Good Til Canceled An order will be on the book unless the order is canceled. IOC Immediate Or Cancel An order will try to fill the order as much as it can before the order expires. FOK Fill or Kill An order will expire if the full order cannot be filled upon execution. Kline/Candlestick chart intervals: s-> seconds; m -> minutes; h -> hours; d -> days; w -> weeks; M -> months 1s 1m 3m 5m 15m 30m 1h 2h 4h 6h 8h 12h 1d 3d 1w 1M Rate limiters (rateLimitType) * REQUEST_WEIGHT ```json { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200 } ``` ORDERS json { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 1, \"limit\": 10 } * RAW_REQUESTS json { \"rateLimitType\": \"RAW_REQUESTS\", \"interval\": \"MINUTE\", \"intervalNum\": 5, \"limit\": 5000 } Rate limit intervals (interval) SECOND MINUTE DAY","title":"ENUM definitions"},{"location":"rest-api/#general-endpoints","text":"","title":"General endpoints"},{"location":"rest-api/#test-connectivity","text":"GET /api/v3/ping Test connectivity to the Rest API. Weight: 1 Parameters: NONE Data Source: Memory Response: {}","title":"Test connectivity"},{"location":"rest-api/#check-server-time","text":"GET /api/v3/time Test connectivity to the Rest API and get the current server time. Weight: 1 Parameters: NONE Data Source: Memory Response: { \"serverTime\": 1499827319559 }","title":"Check server time"},{"location":"rest-api/#exchange-information","text":"GET /api/v3/exchangeInfo Current exchange trading rules and symbol information Weight: 10 Parameters: There are 4 possible options: Options Example No parameter curl -X GET \"https://api.binance.com/api/v3/exchangeInfo\" symbol curl -X GET \"https://api.binance.com/api/v3/exchangeInfo?symbol=BNBBTC\" symbols curl -X GET \"https://api.binance.com/api/v3/exchangeInfo?symbols=%5B%22BNBBTC%22,%22BTCUSDT%22%5D\" or curl -g -X GET 'https://api.binance.com/api/v3/exchangeInfo?symbols=[\"BTCUSDT\",\"BNBBTC\"]' permissions curl -X GET \"https://api.binance.com/api/v3/exchangeInfo?permissions=SPOT\" or curl -X GET \"https://api.binance.com/api/v3/exchangeInfo?permissions=%5B%22MARGIN%22%2C%22LEVERAGED%22%5D\" or curl -g -X GET 'https://api.binance.com/api/v3/exchangeInfo?permissions=[\"MARGIN\",\"LEVERAGED\"]' Notes : * If the value provided to symbol or symbols do not exist, the endpoint will throw an error saying the symbol is invalid. * All parameters are optional. * permissions can support single or multiple values (e.g. SPOT , [\"MARGIN\",\"LEVERAGED\"] ) * If permissions parameter not provided, the default values will be [\"SPOT\",\"MARGIN\",\"LEVERAGED\"] . * If one wants to view all symbols on GET /api/v3/exchangeInfo , then one has to search with all permissions explicitly specified (i.e. permissions=[\"SPOT\",\"MARGIN\",\"LEVERAGED\",\"TRD_GRP_002\",\"TRD_GRP_003\",\"TRD_GRP_004\",\"TRD_GRP_005\",\"TRD_GRP_006\",\"TRD_GRP_007\"]) Data Source: Memory Response: { \"timezone\": \"UTC\", \"serverTime\": 1565246363776, \"rateLimits\": [ { //These are defined in the `ENUM definitions` section under `Rate Limiters (rateLimitType)`. //All limits are optional } ], \"exchangeFilters\": [ //These are the defined filters in the `Filters` section. //All filters are optional. ], \"symbols\": [ { \"symbol\": \"ETHBTC\", \"status\": \"TRADING\", \"baseAsset\": \"ETH\", \"baseAssetPrecision\": 8, \"quoteAsset\": \"BTC\", \"quotePrecision\": 8, // will be removed in future api versions (v4+) \"quoteAssetPrecision\": 8, \"baseCommissionPrecision\": 8, \"quoteCommissionPrecision\": 8, \"orderTypes\": [ \"LIMIT\", \"LIMIT_MAKER\", \"MARKET\", \"STOP_LOSS\", \"STOP_LOSS_LIMIT\", \"TAKE_PROFIT\", \"TAKE_PROFIT_LIMIT\" ], \"icebergAllowed\": true, \"ocoAllowed\": true, \"quoteOrderQtyMarketAllowed\": true, \"allowTrailingStop\": false, \"cancelReplaceAllowed\":false, \"isSpotTradingAllowed\": true, \"isMarginTradingAllowed\": true, \"filters\": [ //These are defined in the Filters section. //All filters are optional ], \"permissions\": [ \"SPOT\", \"MARGIN\" ], \"defaultSelfTradePreventionMode\": \"NONE\", \"allowedSelfTradePreventionModes\": [ \"NONE\" ] } ] }","title":"Exchange information"},{"location":"rest-api/#market-data-endpoints","text":"","title":"Market Data endpoints"},{"location":"rest-api/#order-book","text":"GET /api/v3/depth Weight: Adjusted based on the limit: Limit Request Weight 1-100 1 101-500 5 501-1000 10 1001-5000 50 Parameters: Name Type Mandatory Description symbol STRING YES limit INT NO Default 100; max 5000. If limit > 5000. then the response will truncate to 5000. Data Source: Memory Response: { \"lastUpdateId\": 1027024, \"bids\": [ [ \"4.00000000\", // PRICE \"431.00000000\" // QTY ] ], \"asks\": [ [ \"4.00000200\", \"12.00000000\" ] ] }","title":"Order book"},{"location":"rest-api/#recent-trades-list","text":"GET /api/v3/trades Get recent trades. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES limit INT NO Default 500; max 1000. Data Source: Memory Response: [ { \"id\": 28457, \"price\": \"4.00000100\", \"qty\": \"12.00000000\", \"quoteQty\": \"48.000012\", \"time\": 1499865549590, \"isBuyerMaker\": true, \"isBestMatch\": true } ]","title":"Recent trades list"},{"location":"rest-api/#old-trade-lookup-market_data","text":"GET /api/v3/historicalTrades Get older trades. Weight: 5 Parameters: Name Type Mandatory Description symbol STRING YES limit INT NO Default 500; max 1000. fromId LONG NO TradeId to fetch from. Default gets most recent trades. Data Source: Database Response: [ { \"id\": 28457, \"price\": \"4.00000100\", \"qty\": \"12.00000000\", \"quoteQty\": \"48.000012\", \"time\": 1499865549590, \"isBuyerMaker\": true, \"isBestMatch\": true } ]","title":"Old trade lookup (MARKET_DATA)"},{"location":"rest-api/#compressedaggregate-trades-list","text":"GET /api/v3/aggTrades Get compressed, aggregate trades. Trades that fill at the time, from the same taker order, with the same price will have the quantity aggregated. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES fromId LONG NO ID to get aggregate trades from INCLUSIVE. startTime LONG NO Timestamp in ms to get aggregate trades from INCLUSIVE. endTime LONG NO Timestamp in ms to get aggregate trades until INCLUSIVE. limit INT NO Default 500; max 1000. If fromId, startTime, and endTime are not sent, the most recent aggregate trades will be returned. Data Source: Database Response: [ { \"a\": 26129, // Aggregate tradeId \"p\": \"0.01633102\", // Price \"q\": \"4.70443515\", // Quantity \"f\": 27781, // First tradeId \"l\": 27781, // Last tradeId \"T\": 1498793709153, // Timestamp \"m\": true, // Was the buyer the maker? \"M\": true // Was the trade the best price match? } ]","title":"Compressed/Aggregate trades list"},{"location":"rest-api/#klinecandlestick-data","text":"GET /api/v3/klines Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES interval ENUM YES startTime LONG NO endTime LONG NO limit INT NO Default 500; max 1000. If startTime and endTime are not sent, the most recent klines are returned. Data Source: Database Response: [ [ 1499040000000, // Kline open time \"0.01634790\", // Open price \"0.80000000\", // High price \"0.01575800\", // Low price \"0.01577100\", // Close price \"148976.11427815\", // Volume 1499644799999, // Kline Close time \"2434.19055334\", // Quote asset volume 308, // Number of trades \"1756.87402397\", // Taker buy base asset volume \"28.46694368\", // Taker buy quote asset volume \"0\" // Unused field, ignore. ] ]","title":"Kline/Candlestick data"},{"location":"rest-api/#uiklines","text":"The request is similar to klines having the same parameters and response. uiKlines return modified kline data, optimized for presentation of candlestick charts. GET /api/v3/uiKlines Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES interval ENUM YES startTime LONG NO endTime LONG NO limit INT NO Default 500; max 1000. If startTime and endTime are not sent, the most recent klines are returned. Data Source: Database Response: [ [ 1499040000000, // Kline open time \"0.01634790\", // Open price \"0.80000000\", // High price \"0.01575800\", // Low price \"0.01577100\", // Close price \"148976.11427815\", // Volume 1499644799999, // Kline close time \"2434.19055334\", // Quote asset volume 308, // Number of trades \"1756.87402397\", // Taker buy base asset volume \"28.46694368\", // Taker buy quote asset volume \"0\" // Unused field. Ignore. ] ]","title":"UIKlines"},{"location":"rest-api/#current-average-price","text":"Current average price for a symbol. GET /api/v3/avgPrice Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES Data Source: Memory Response: { \"mins\": 5, \"price\": \"9.35751834\" }","title":"Current average price"},{"location":"rest-api/#24hr-ticker-price-change-statistics","text":"GET /api/v3/ticker/24hr 24 hour rolling window price change statistics. Careful when accessing this with no symbol. Weight: Parameter Symbols Provided Weight symbol 1 1 symbol parameter is omitted 40 symbols 1-20 1 21-100 20 101 or more 40 symbols parameter is omitted 40 Parameters: Name Type Mandatory Description symbol STRING NO Parameter symbol and symbols cannot be used in combination. If neither parameter is sent, tickers for all symbols will be returned in an array. Examples of accepted format for the symbols parameter: [\"BTCUSDT\",\"BNBUSDT\"] or %5B%22BTCUSDT%22,%22BNBUSDT%22%5D symbols STRING NO type ENUM NO Supported values: FULL or MINI . If none provided, the default is FULL Data Source: Memory Response - FULL: { \"symbol\": \"BNBBTC\", \"priceChange\": \"-94.99999800\", \"priceChangePercent\": \"-95.960\", \"weightedAvgPrice\": \"0.29628482\", \"prevClosePrice\": \"0.10002000\", \"lastPrice\": \"4.00000200\", \"lastQty\": \"200.00000000\", \"bidPrice\": \"4.00000000\", \"bidQty\": \"100.00000000\", \"askPrice\": \"4.00000200\", \"askQty\": \"100.00000000\", \"openPrice\": \"99.00000000\", \"highPrice\": \"100.00000000\", \"lowPrice\": \"0.10000000\", \"volume\": \"8913.30000000\", \"quoteVolume\": \"15.30000000\", \"openTime\": 1499783499040, \"closeTime\": 1499869899040, \"firstId\": 28385, // First tradeId \"lastId\": 28460, // Last tradeId \"count\": 76 // Trade count } OR [ { \"symbol\": \"BNBBTC\", \"priceChange\": \"-94.99999800\", \"priceChangePercent\": \"-95.960\", \"weightedAvgPrice\": \"0.29628482\", \"prevClosePrice\": \"0.10002000\", \"lastPrice\": \"4.00000200\", \"lastQty\": \"200.00000000\", \"bidPrice\": \"4.00000000\", \"bidQty\": \"100.00000000\", \"askPrice\": \"4.00000200\", \"askQty\": \"100.00000000\", \"openPrice\": \"99.00000000\", \"highPrice\": \"100.00000000\", \"lowPrice\": \"0.10000000\", \"volume\": \"8913.30000000\", \"quoteVolume\": \"15.30000000\", \"openTime\": 1499783499040, \"closeTime\": 1499869899040, \"firstId\": 28385, // First tradeId \"lastId\": 28460, // Last tradeId \"count\": 76 // Trade count } ] Response - MINI { \"symbol\": \"BNBBTC\", // Symbol Name \"openPrice\": \"99.00000000\", // Opening price of the Interval \"highPrice\": \"100.00000000\", // Highest price in the interval \"lowPrice\": \"0.10000000\", // Lowest price in the interval \"lastPrice\": \"4.00000200\", // Closing price of the interval \"volume\": \"8913.30000000\", // Total trade volume (in base asset) \"quoteVolume\": \"15.30000000\", // Total trade volume (in quote asset) \"openTime\": 1499783499040, // Start of the ticker interval \"closeTime\": 1499869899040, // End of the ticker interval \"firstId\": 28385, // First tradeId considered \"lastId\": 28460, // Last tradeId considered \"count\": 76 // Total trade count } OR [ { \"symbol\": \"BNBBTC\", \"openPrice\": \"99.00000000\", \"highPrice\": \"100.00000000\", \"lowPrice\": \"0.10000000\", \"lastPrice\": \"4.00000200\", \"volume\": \"8913.30000000\", \"quoteVolume\": \"15.30000000\", \"openTime\": 1499783499040, \"closeTime\": 1499869899040, \"firstId\": 28385, \"lastId\": 28460, \"count\": 76 }, { \"symbol\": \"LTCBTC\", \"openPrice\": \"0.07000000\", \"highPrice\": \"0.07000000\", \"lowPrice\": \"0.07000000\", \"lastPrice\": \"0.07000000\", \"volume\": \"11.00000000\", \"quoteVolume\": \"0.77000000\", \"openTime\": 1656908192899, \"closeTime\": 1656994592899, \"firstId\": 0, \"lastId\": 10, \"count\": 11 } ]","title":"24hr ticker price change statistics"},{"location":"rest-api/#symbol-price-ticker","text":"GET /api/v3/ticker/price Latest price for a symbol or symbols. Weight: Parameter Symbols Provided Weight symbol 1 1 symbol parameter is omitted 2 symbols Any 2 Parameters: Name Type Mandatory Description symbol STRING NO Parameter symbol and symbols cannot be used in combination. If neither parameter is sent, prices for all symbols will be returned in an array. Examples of accepted format for the symbols parameter: [\"BTCUSDT\",\"BNBUSDT\"] or %5B%22BTCUSDT%22,%22BNBUSDT%22%5D symbols STRING NO Data Source: Memory Response: { \"symbol\": \"LTCBTC\", \"price\": \"4.00000200\" } OR [ { \"symbol\": \"LTCBTC\", \"price\": \"4.00000200\" }, { \"symbol\": \"ETHBTC\", \"price\": \"0.07946600\" } ]","title":"Symbol price ticker"},{"location":"rest-api/#symbol-order-book-ticker","text":"GET /api/v3/ticker/bookTicker Best price/qty on the order book for a symbol or symbols. Weight: Parameter Symbols Provided Weight symbol 1 1 symbol parameter is omitted 2 symbols Any 2 Parameters: Name Type Mandatory Description symbol STRING NO Parameter symbol and symbols cannot be used in combination. If neither parameter is sent, bookTickers for all symbols will be returned in an array. Examples of accepted format for the symbols parameter: [\"BTCUSDT\",\"BNBUSDT\"] or %5B%22BTCUSDT%22,%22BNBUSDT%22%5D symbols STRING NO Data Source: Memory Response: { \"symbol\": \"LTCBTC\", \"bidPrice\": \"4.00000000\", \"bidQty\": \"431.00000000\", \"askPrice\": \"4.00000200\", \"askQty\": \"9.00000000\" } OR [ { \"symbol\": \"LTCBTC\", \"bidPrice\": \"4.00000000\", \"bidQty\": \"431.00000000\", \"askPrice\": \"4.00000200\", \"askQty\": \"9.00000000\" }, { \"symbol\": \"ETHBTC\", \"bidPrice\": \"0.07946700\", \"bidQty\": \"9.00000000\", \"askPrice\": \"100000.00000000\", \"askQty\": \"1000.00000000\" } ]","title":"Symbol order book ticker"},{"location":"rest-api/#rolling-window-price-change-statistics","text":"GET /api/v3/ticker Note: This endpoint is different from the GET /api/v3/ticker/24hr endpoint. The window used to compute statistics will be no more than 59999ms from the requested windowSize . openTime for /api/v3/ticker always starts on a minute, while the closeTime is the current time of the request. As such, the effective window will be up to 59999ms wider than windowSize . E.g. If the closeTime is 1641287867099 (January 04, 2022 09:17:47:099 UTC) , and the windowSize is 1d . the openTime will be: 1641201420000 (January 3, 2022, 09:17:00) Weight: 2 for each requested symbol regardless of windowSize . The weight for this request will cap at 100 once the number of symbols in the request is more than 50. Parameters Name Type Mandatory Description symbol STRING YES Either symbol or symbols must be provided Examples of accepted format for the symbols parameter: [\"BTCUSDT\",\"BNBUSDT\"] or %5B%22BTCUSDT%22,%22BNBUSDT%22%5D The maximum number of symbols allowed in a request is 100. symbols windowSize ENUM NO Defaults to 1d if no parameter provided Supported windowSize values: 1m , 2m .... 59m for minutes 1h , 2h .... 23h - for hours 1d ... 7d - for days Units cannot be combined (e.g. 1d2h is not allowed) type ENUM NO Supported values: FULL or MINI . If none provided, the default is FULL Data Source: Database Response - FULL When using symbol : { \"symbol\": \"BNBBTC\", \"priceChange\": \"-8.00000000\", // Absolute price change \"priceChangePercent\": \"-88.889\", // Relative price change in percent \"weightedAvgPrice\": \"2.60427807\", // QuoteVolume / Volume \"openPrice\": \"9.00000000\", \"highPrice\": \"9.00000000\", \"lowPrice\": \"1.00000000\", \"lastPrice\": \"1.00000000\", \"volume\": \"187.00000000\", \"quoteVolume\": \"487.00000000\", // Sum of (price * volume) for all trades \"openTime\": 1641859200000, // Open time for ticker window \"closeTime\": 1642031999999, // Close time for ticker window \"firstId\": 0, // Trade IDs \"lastId\": 60, \"count\": 61 // Number of trades in the interval } or When using symbols : [ { \"symbol\": \"BTCUSDT\", \"priceChange\": \"-154.13000000\", // Absolute price change \"priceChangePercent\": \"-0.740\", // Relative price change in percent \"weightedAvgPrice\": \"20677.46305250\", // QuoteVolume / Volume \"openPrice\": \"20825.27000000\", \"highPrice\": \"20972.46000000\", \"lowPrice\": \"20327.92000000\", \"lastPrice\": \"20671.14000000\", \"volume\": \"72.65112300\", \"quoteVolume\": \"1502240.91155513\", // Sum of (price * volume) for all trades \"openTime\": 1655432400000, // Open time for ticker window \"closeTime\": 1655446835460, // Close time for ticker window \"firstId\": 11147809, // Trade IDs \"lastId\": 11149775, \"count\": 1967 // Number of trades in the interval }, { \"symbol\": \"BNBBTC\", \"priceChange\": \"0.00008530\", \"priceChangePercent\": \"0.823\", \"weightedAvgPrice\": \"0.01043129\", \"openPrice\": \"0.01036170\", \"highPrice\": \"0.01049850\", \"lowPrice\": \"0.01033870\", \"lastPrice\": \"0.01044700\", \"volume\": \"166.67000000\", \"quoteVolume\": \"1.73858301\", \"openTime\": 1655432400000, \"closeTime\": 1655446835460, \"firstId\": 2351674, \"lastId\": 2352034, \"count\": 361 } ] Response - MINI When using symbol : { \"symbol\": \"LTCBTC\", \"openPrice\": \"0.10000000\", \"highPrice\": \"2.00000000\", \"lowPrice\": \"0.10000000\", \"lastPrice\": \"2.00000000\", \"volume\": \"39.00000000\", \"quoteVolume\": \"13.40000000\", // Sum of (price * volume) for all trades \"openTime\": 1656986580000, // Open time for ticker window \"closeTime\": 1657001016795, // Close time for ticker window \"firstId\": 0, // Trade IDs \"lastId\": 34, \"count\": 35 // Number of trades in the interval } OR When using symbols : [ { \"symbol\": \"BNBBTC\", \"openPrice\": \"0.10000000\", \"highPrice\": \"2.00000000\", \"lowPrice\": \"0.10000000\", \"lastPrice\": \"2.00000000\", \"volume\": \"39.00000000\", \"quoteVolume\": \"13.40000000\", // Sum of (price * volume) for all trades \"openTime\": 1656986880000, // Open time for ticker window \"closeTime\": 1657001297799, // Close time for ticker window \"firstId\": 0, // Trade IDs \"lastId\": 34, \"count\": 35 // Number of trades in the interval }, { \"symbol\": \"LTCBTC\", \"openPrice\": \"0.07000000\", \"highPrice\": \"0.07000000\", \"lowPrice\": \"0.07000000\", \"lastPrice\": \"0.07000000\", \"volume\": \"33.00000000\", \"quoteVolume\": \"2.31000000\", \"openTime\": 1656986880000, \"closeTime\": 1657001297799, \"firstId\": 0, \"lastId\": 32, \"count\": 33 } ]","title":"Rolling window price change statistics"},{"location":"rest-api/#account-endpoints","text":"","title":"Account endpoints"},{"location":"rest-api/#new-order-trade","text":"POST /api/v3/order (HMAC SHA256) Send in a new order. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES side ENUM YES type ENUM YES timeInForce ENUM NO quantity DECIMAL NO quoteOrderQty DECIMAL NO price DECIMAL NO newClientOrderId STRING NO A unique id among open orders. Automatically generated if not sent. Orders with the same newClientOrderID can be accepted only when the previous one is filled, otherwise the order will be rejected. strategyId INT NO strategyType INT NO The value cannot be less than 1000000 . stopPrice DECIMAL NO Used with STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , and TAKE_PROFIT_LIMIT orders. trailingDelta LONG NO Used with STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , and TAKE_PROFIT_LIMIT orders. icebergQty DECIMAL NO Used with LIMIT , STOP_LOSS_LIMIT , and TAKE_PROFIT_LIMIT to create an iceberg order. newOrderRespType ENUM NO Set the response JSON. ACK , RESULT , or FULL ; MARKET and LIMIT order types default to FULL , all other orders default to ACK . selfTradePreventionMode ENUM NO The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER , EXPIRE_MAKER , EXPIRE_BOTH , NONE . recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Some additional mandatory parameters based on order type : Type Additional mandatory parameters Additional Information LIMIT timeInForce , quantity , price MARKET quantity or quoteOrderQty MARKET orders using the quantity field specifies the amount of the base asset the user wants to buy or sell at the market price. E.g. MARKET order on BTCUSDT will specify how much BTC the user is buying or selling. MARKET orders using quoteOrderQty specifies the amount the user wants to spend (when buying) or receive (when selling) the quote asset; the correct quantity will be determined based on the market liquidity and quoteOrderQty . E.g. Using the symbol BTCUSDT: BUY side, the order will buy as many BTC as quoteOrderQty USDT can. SELL side, the order will sell as much BTC needed to receive quoteOrderQty USDT. STOP_LOSS quantity , stopPrice or trailingDelta This will execute a MARKET order when the conditions are met. (e.g. stopPrice is met or trailingDelta is activated) STOP_LOSS_LIMIT timeInForce , quantity , price , stopPrice or trailingDelta TAKE_PROFIT quantity , stopPrice or trailingDelta This will execute a MARKET order when the conditions are met. (e.g. stopPrice is met or trailingDelta is activated) TAKE_PROFIT_LIMIT timeInForce , quantity , price , stopPrice or trailingDelta LIMIT_MAKER quantity , price This is a LIMIT order that will be rejected if the order immediately matches and trades as a taker. This is also known as a POST-ONLY order. Other info: Any LIMIT or LIMIT_MAKER type order can be made an iceberg order by sending an icebergQty . Any order with an icebergQty MUST have timeInForce set to GTC . For STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT_LIMIT and TAKE_PROFIT orders, trailingDelta can be combined with stopPrice . MARKET orders using quoteOrderQty will not break LOT_SIZE filter rules; the order will execute a quantity that will have the notional value as close as possible to quoteOrderQty . Trigger order price rules against market price for both MARKET and LIMIT versions: Price above market price: STOP_LOSS BUY , TAKE_PROFIT SELL Price below market price: STOP_LOSS SELL , TAKE_PROFIT BUY Data Source: Matching Engine Response ACK: { \"symbol\": \"BTCUSDT\", \"orderId\": 28, \"orderListId\": -1, //Unless OCO, value will be -1 \"clientOrderId\": \"6gCrw2kRUAF9CvJDGP16IP\", \"transactTime\": 1507725176595 } Response RESULT: { \"symbol\": \"BTCUSDT\", \"orderId\": 28, \"orderListId\": -1, //Unless OCO, value will be -1 \"clientOrderId\": \"6gCrw2kRUAF9CvJDGP16IP\", \"transactTime\": 1507725176595, \"price\": \"0.00000000\", \"origQty\": \"10.00000000\", \"executedQty\": \"10.00000000\", \"cummulativeQuoteQty\": \"10.00000000\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"MARKET\", \"side\": \"SELL\", \"strategyId\": 1, // This is only visible if the field was populated on order placement. \"strategyType\": 1000000, // This is only visible if the field was populated on order placement. \"workingTime\": 1507725176595, \"selfTradePreventionMode\": \"NONE\" } Response FULL: { \"symbol\": \"BTCUSDT\", \"orderId\": 28, \"orderListId\": -1, //Unless OCO, value will be -1 \"clientOrderId\": \"6gCrw2kRUAF9CvJDGP16IP\", \"transactTime\": 1507725176595, \"price\": \"0.00000000\", \"origQty\": \"10.00000000\", \"executedQty\": \"10.00000000\", \"cummulativeQuoteQty\": \"10.00000000\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"MARKET\", \"side\": \"SELL\", \"strategyId\": 1, // This is only visible if the field was populated on order placement. \"strategyType\": 1000000, // This is only visible if the field was populated on order placement. \"workingTime\": 1507725176595, \"selfTradePreventionMode\": \"NONE\", \"fills\": [ { \"price\": \"4000.00000000\", \"qty\": \"1.00000000\", \"commission\": \"4.00000000\", \"commissionAsset\": \"USDT\", \"tradeId\": 56 }, { \"price\": \"3999.00000000\", \"qty\": \"5.00000000\", \"commission\": \"19.99500000\", \"commissionAsset\": \"USDT\", \"tradeId\": 57 }, { \"price\": \"3998.00000000\", \"qty\": \"2.00000000\", \"commission\": \"7.99600000\", \"commissionAsset\": \"USDT\", \"tradeId\": 58 }, { \"price\": \"3997.00000000\", \"qty\": \"1.00000000\", \"commission\": \"3.99700000\", \"commissionAsset\": \"USDT\", \"tradeId\": 59 }, { \"price\": \"3995.00000000\", \"qty\": \"1.00000000\", \"commission\": \"3.99500000\", \"commissionAsset\": \"USDT\", \"tradeId\": 60 } ] }","title":"New order  (TRADE)"},{"location":"rest-api/#test-new-order-trade","text":"POST /api/v3/order/test (HMAC SHA256) Test new order creation and signature/recvWindow long. Creates and validates a new order but does not send it into the matching engine. Weight: 1 Parameters: Same as POST /api/v3/order Data Source: Memory Response: {}","title":"Test new order (TRADE)"},{"location":"rest-api/#query-order-user_data","text":"GET /api/v3/order (HMAC SHA256) Check an order's status. Weight: 2 Parameters: Name Type Mandatory Description symbol STRING YES orderId LONG NO origClientOrderId STRING NO recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Notes: * Either orderId or origClientOrderId must be sent. * For some historical orders cummulativeQuoteQty will be < 0, meaning the data is not available at this time. Data Source: Memory => Database Response: { \"symbol\": \"LTCBTC\", \"orderId\": 1, \"orderListId\": -1 //Unless part of an OCO, the value will always be -1. \"clientOrderId\": \"myOrder1\", \"price\": \"0.1\", \"origQty\": \"1.0\", \"executedQty\": \"0.0\", \"cummulativeQuoteQty\": \"0.0\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.0\", \"icebergQty\": \"0.0\", \"time\": 1499827319559, \"updateTime\": 1499827319559, \"isWorking\": true, \"workingTime\":1499827319559, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\" }","title":"Query order (USER_DATA)"},{"location":"rest-api/#cancel-order-trade","text":"DELETE /api/v3/order (HMAC SHA256) Cancel an active order. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES orderId LONG NO origClientOrderId STRING NO newClientOrderId STRING NO Used to uniquely identify this cancel. Automatically generated by default. recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Either orderId or origClientOrderId must be sent. If both parameters are sent, orderId takes precedence. Data Source: Matching Engine Response: { \"symbol\": \"LTCBTC\", \"origClientOrderId\": \"myOrder1\", \"orderId\": 4, \"orderListId\": -1, //Unless part of an OCO, the value will always be -1. \"clientOrderId\": \"cancelMyOrder1\", \"price\": \"2.00000000\", \"origQty\": \"1.00000000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"selfTradePreventionMode\": \"NONE\" }","title":"Cancel order (TRADE)"},{"location":"rest-api/#cancel-all-open-orders-on-a-symbol-trade","text":"DELETE /api/v3/openOrders (HMAC SHA256) Cancels all active orders on a symbol. This includes OCO orders. Weight 1 Name Type Mandatory Description symbol STRING YES recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Data Source: Matching Engine Response [ { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"E6APeyTJvkMvLMYMqu1KQ4\", \"orderId\": 11, \"orderListId\": -1, \"clientOrderId\": \"pXLV6Hz6mprAcVYpVMTGgx\", \"price\": \"0.089853\", \"origQty\": \"0.178622\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"A3EF2HCwxgZPFMrfwbgrhv\", \"orderId\": 13, \"orderListId\": -1, \"clientOrderId\": \"pXLV6Hz6mprAcVYpVMTGgx\", \"price\": \"0.090430\", \"origQty\": \"0.178622\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"selfTradePreventionMode\": \"NONE\" }, { \"orderListId\": 1929, \"contingencyType\": \"OCO\", \"listStatusType\": \"ALL_DONE\", \"listOrderStatus\": \"ALL_DONE\", \"listClientOrderId\": \"2inzWQdDvZLHbbAmAozX2N\", \"transactionTime\": 1585230948299, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 20, \"clientOrderId\": \"CwOOIPHSmYywx6jZX77TdL\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 21, \"clientOrderId\": \"461cPg51vQjV3zIMOXNz39\" } ], \"orderReports\": [ { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"CwOOIPHSmYywx6jZX77TdL\", \"orderId\": 20, \"orderListId\": 1929, \"clientOrderId\": \"pXLV6Hz6mprAcVYpVMTGgx\", \"price\": \"0.668611\", \"origQty\": \"0.690354\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS_LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.378131\", \"icebergQty\": \"0.017083\", \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"461cPg51vQjV3zIMOXNz39\", \"orderId\": 21, \"orderListId\": 1929, \"clientOrderId\": \"pXLV6Hz6mprAcVYpVMTGgx\", \"price\": \"0.008791\", \"origQty\": \"0.690354\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"BUY\", \"icebergQty\": \"0.639962\", \"selfTradePreventionMode\": \"NONE\" } ] } ]","title":"Cancel All Open Orders on a Symbol (TRADE)"},{"location":"rest-api/#cancel-an-existing-order-and-send-a-new-order-trade","text":"POST /api/v3/order/cancelReplace Cancels an existing order and places a new order on the same symbol. Filters and Order Count are evaluated before the processing of the cancellation and order placement occurs. A new order that was not attempted (i.e. when newOrderResult: NOT_ATTEMPTED ), will still increase the order count by 1. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES side ENUM YES type ENUM YES cancelReplaceMode ENUM YES The allowed values are: STOP_ON_FAILURE - If the cancel request fails, the new order placement will not be attempted. ALLOW_FAILURE - new order placement will be attempted even if cancel request fails. timeInForce ENUM NO quantity DECIMAL NO quoteOrderQty DECIMAL NO price DECIMAL NO cancelNewClientOrderId STRING NO Used to uniquely identify this cancel. Automatically generated by default. cancelOrigClientOrderId STRING NO Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence. cancelOrderId LONG NO Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence. newClientOrderId STRING NO Used to identify the new order. strategyId INT NO strategyType INT NO The value cannot be less than 1000000 . stopPrice DECIMAL NO trailingDelta LONG NO icebergQty DECIMAL NO newOrderRespType ENUM NO Allowed values: ACK , RESULT , FULL MARKET and LIMIT orders types default to FULL ; all other orders default to ACK selfTradePreventionMode ENUM NO The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER , EXPIRE_MAKER , EXPIRE_BOTH , NONE . recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Similar to POST /api/v3/order , additional mandatory parameters are determined by type . Response format varies depending on whether the processing of the message succeeded, partially succeeded, or failed. Data Source: Matching Engine Response SUCCESS: //Both the cancel order placement and new order placement succeeded. { \"cancelResult\": \"SUCCESS\", \"newOrderResult\": \"SUCCESS\", \"cancelResponse\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"DnLo3vTAQcjha43lAZhZ0y\", \"orderId\": 9, \"orderListId\": -1, \"clientOrderId\": \"osxN3JXAtJvKvCqGeMWMVR\", \"price\": \"0.01000000\", \"origQty\": \"0.000100\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" }, \"newOrderResponse\": { \"symbol\": \"BTCUSDT\", \"orderId\": 10, \"orderListId\": -1, \"clientOrderId\": \"wOceeeOzNORyLiQfw7jd8S\", \"transactTime\": 1652928801803, \"price\": \"0.02000000\", \"origQty\": \"0.040000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"workingTime\": 1669277163808, \"fills\": [], \"selfTradePreventionMode\": \"NONE\" } } Response when Cancel Order Fails with STOP_ON FAILURE: { \"code\": -2022, \"msg\": \"Order cancel-replace failed.\", \"data\": { \"cancelResult\": \"FAILURE\", \"newOrderResult\": \"NOT_ATTEMPTED\", \"cancelResponse\": { \"code\": -2011, \"msg\": \"Unknown order sent.\" }, \"newOrderResponse\": null } } Response when Cancel Order Succeeds but New Order Placement Fails: { \"code\": -2021, \"msg\": \"Order cancel-replace partially failed.\", \"data\": { \"cancelResult\": \"SUCCESS\", \"newOrderResult\": \"FAILURE\", \"cancelResponse\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"86M8erehfExV8z2RC8Zo8k\", \"orderId\": 3, \"orderListId\": -1, \"clientOrderId\": \"G1kLo6aDv2KGNTFcjfTSFq\", \"price\": \"0.006123\", \"origQty\": \"10000.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" }, \"newOrderResponse\": { \"code\": -2010, \"msg\": \"Order would immediately match and take.\" } } } Response when Cancel Order fails with ALLOW_FAILURE: { \"code\": -2021, \"msg\": \"Order cancel-replace partially failed.\", \"data\": { \"cancelResult\": \"FAILURE\", \"newOrderResult\": \"SUCCESS\", \"cancelResponse\": { \"code\": -2011, \"msg\": \"Unknown order sent.\" }, \"newOrderResponse\": { \"symbol\": \"BTCUSDT\", \"orderId\": 11, \"orderListId\": -1, \"clientOrderId\": \"pfojJMg6IMNDKuJqDxvoxN\", \"transactTime\": 1648540168818 } } } Response when both Cancel Order and New Order Placement fail: { \"code\": -2022, \"msg\": \"Order cancel-replace failed.\", \"data\": { \"cancelResult\": \"FAILURE\", \"newOrderResult\": \"FAILURE\", \"cancelResponse\": { \"code\": -2011, \"msg\": \"Unknown order sent.\" }, \"newOrderResponse\": { \"code\": -2010, \"msg\": \"Order would immediately match and take.\" } } }","title":"Cancel an Existing Order and Send a New Order (TRADE)"},{"location":"rest-api/#current-open-orders-user_data","text":"GET /api/v3/openOrders (HMAC SHA256) Get all open orders on a symbol. Careful when accessing this with no symbol. Weight: 3 for a single symbol; 40 when the symbol parameter is omitted Parameters: Name Type Mandatory Description symbol STRING NO recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES If the symbol is not sent, orders for all symbols will be returned in an array. Data Source: Memory => Database Response: [ { \"symbol\": \"LTCBTC\", \"orderId\": 1, \"orderListId\": -1, //Unless OCO, the value will always be -1 \"clientOrderId\": \"myOrder1\", \"price\": \"0.1\", \"origQty\": \"1.0\", \"executedQty\": \"0.0\", \"cummulativeQuoteQty\": \"0.0\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.0\", \"icebergQty\": \"0.0\", \"time\": 1499827319559, \"updateTime\": 1499827319559, \"isWorking\": true, \"origQuoteOrderQty\": \"0.000000\", \"workingTime\": 1499827319559, \"selfTradePreventionMode\": \"NONE\" } ]","title":"Current open orders (USER_DATA)"},{"location":"rest-api/#all-orders-user_data","text":"GET /api/v3/allOrders (HMAC SHA256) Get all account orders; active, canceled, or filled. Weight: 10 with symbol Data Source: Database Parameters: Name Type Mandatory Description symbol STRING YES orderId LONG NO startTime LONG NO endTime LONG NO limit INT NO Default 500; max 1000. recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Notes: * If orderId is set, it will get orders >= that orderId . Otherwise most recent orders are returned. * For some historical orders cummulativeQuoteQty will be < 0, meaning the data is not available at this time. * If startTime and/or endTime provided, orderId is not required. Response: [ { \"symbol\": \"LTCBTC\", \"orderId\": 1, \"orderListId\": -1, //Unless OCO, the value will always be -1 \"clientOrderId\": \"myOrder1\", \"price\": \"0.1\", \"origQty\": \"1.0\", \"executedQty\": \"0.0\", \"cummulativeQuoteQty\": \"0.0\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.0\", \"icebergQty\": \"0.0\", \"time\": 1499827319559, \"updateTime\": 1499827319559, \"isWorking\": true, \"origQuoteOrderQty\": \"0.000000\", \"workingTime\": 1499827319559, \"selfTradePreventionMode\": \"NONE\" } ]","title":"All orders (USER_DATA)"},{"location":"rest-api/#new-oco-trade","text":"POST /api/v3/order/oco (HMAC SHA256) Weight : 1 Send in a new OCO Parameters : Name Type Mandatory Description symbol STRING YES listClientOrderId STRING NO A unique Id for the entire orderList side ENUM YES quantity DECIMAL YES limitClientOrderId STRING NO A unique Id for the limit order price DECIMAL YES limitStrategyId INT NO limitStrategyType INT NO The value cannot be less than 1000000 . limitIcebergQty DECIMAL NO Used to make the LIMIT_MAKER leg an iceberg order. trailingDelta LONG NO stopClientOrderId STRING NO A unique Id for the stop loss/stop loss limit leg stopPrice DECIMAL YES stopStrategyId INT NO stopStrategyType INT NO The value cannot be less than 1000000 . stopLimitPrice DECIMAL NO If provided, stopLimitTimeInForce is required. stopIcebergQty DECIMAL NO Used with STOP_LOSS_LIMIT leg to make an iceberg order. stopLimitTimeInForce ENUM NO Valid values are GTC / FOK / IOC newOrderRespType ENUM NO Set the response JSON. selfTradePreventionMode ENUM NO The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER , EXPIRE_MAKER , EXPIRE_BOTH , NONE . recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Additional Info: * Price Restrictions: * SELL : Limit Price > Last Price > Stop Price * BUY : Limit Price < Last Price < Stop Price * Quantity Restrictions: * Both legs must have the same quantity. * ICEBERG quantities however do not have to be the same * Order Rate Limit * OCO counts as 2 orders against the order rate limit. Data Source: Matching Engine Response: { \"orderListId\": 0, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"JYVpp3F0f5CAG15DhtrqLp\", \"transactionTime\": 1563417480525, \"symbol\": \"LTCBTC\", \"orders\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 2, \"clientOrderId\": \"Kk7sqHb9J6mJWTMDVW7Vos\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 3, \"clientOrderId\": \"xTXKaGYd4bluPVp78IVRvl\" } ], \"orderReports\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 2, \"orderListId\": 0, \"clientOrderId\": \"Kk7sqHb9J6mJWTMDVW7Vos\", \"transactTime\": 1563417480525, \"price\": \"0.000000\", \"origQty\": \"0.624363\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS\", \"side\": \"BUY\", \"stopPrice\": \"0.960664\", \"workingTime\": -1, \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 3, \"orderListId\": 0, \"clientOrderId\": \"xTXKaGYd4bluPVp78IVRvl\", \"transactTime\": 1563417480525, \"price\": \"0.036435\", \"origQty\": \"0.624363\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"BUY\", \"workingTime\": 1563417480525, \"selfTradePreventionMode\": \"NONE\" } ] }","title":"New OCO (TRADE)"},{"location":"rest-api/#cancel-oco-trade","text":"DELETE /api/v3/orderList (HMAC SHA256) Weight : 1 Cancel an entire Order List Parameters: Name Type Mandatory Description symbol STRING YES orderListId LONG NO Either orderListId or listClientOrderId must be provided listClientOrderId STRING NO Either orderListId or listClientOrderId must be provided newClientOrderId STRING NO Used to uniquely identify this cancel. Automatically generated by default recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Additional notes: * Canceling an individual leg will cancel the entire OCO * If both orderListId and listClientOrderId are sent, orderListId takes precedence. Data Source: Matching Engine Response { \"orderListId\": 0, \"contingencyType\": \"OCO\", \"listStatusType\": \"ALL_DONE\", \"listOrderStatus\": \"ALL_DONE\", \"listClientOrderId\": \"C3wyj4WVEktd7u9aVBRXcN\", \"transactionTime\": 1574040868128, \"symbol\": \"LTCBTC\", \"orders\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 2, \"clientOrderId\": \"pO9ufTiFGg3nw2fOdgeOXa\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 3, \"clientOrderId\": \"TXOvglzXuaubXAaENpaRCB\" } ], \"orderReports\": [ { \"symbol\": \"LTCBTC\", \"origClientOrderId\": \"pO9ufTiFGg3nw2fOdgeOXa\", \"orderId\": 2, \"orderListId\": 0, \"clientOrderId\": \"unfWT8ig8i0uj6lPuYLez6\", \"price\": \"1.00000000\", \"origQty\": \"10.00000000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS_LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"1.00000000\", \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"LTCBTC\", \"origClientOrderId\": \"TXOvglzXuaubXAaENpaRCB\", \"orderId\": 3, \"orderListId\": 0, \"clientOrderId\": \"unfWT8ig8i0uj6lPuYLez6\", \"price\": \"3.00000000\", \"origQty\": \"10.00000000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" } ] }","title":"Cancel OCO (TRADE)"},{"location":"rest-api/#query-oco-user_data","text":"GET /api/v3/orderList (HMAC SHA256) Weight : 2 Retrieves a specific OCO based on provided optional parameters Parameters : Name Type Mandatory Description orderListId LONG NO Either orderListId or listClientOrderId must be provided origClientOrderId STRING NO Either orderListId or listClientOrderId must be provided recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Data Source: Database Response: { \"orderListId\": 27, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"h2USkA5YQpaXHPIrkd96xE\", \"transactionTime\": 1565245656253, \"symbol\": \"LTCBTC\", \"orders\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 4, \"clientOrderId\": \"qD1gy3kc3Gx0rihm9Y3xwS\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 5, \"clientOrderId\": \"ARzZ9I00CPM8i3NhmU9Ega\" } ] }","title":"Query OCO (USER_DATA)"},{"location":"rest-api/#query-all-oco-user_data","text":"GET /api/v3/allOrderList (HMAC SHA256) Weight : 10 Retrieves all OCO based on provided optional parameters Parameters Name Type Mandatory Description fromId LONG NO If supplied, neither startTime or endTime can be provided startTime LONG NO endTime LONG NO limit INT NO Default Value: 500; Max Value: 1000 recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Data Source: Database Response: [ { \"orderListId\": 29, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"amEEAXryFzFwYF1FeRpUoZ\", \"transactionTime\": 1565245913483, \"symbol\": \"LTCBTC\", \"orders\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 4, \"clientOrderId\": \"oD7aesZqjEGlZrbtRpy5zB\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 5, \"clientOrderId\": \"Jr1h6xirOxgeJOUuYQS7V3\" } ] }, { \"orderListId\": 28, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"hG7hFNxJV6cZy3Ze4AUT4d\", \"transactionTime\": 1565245913407, \"symbol\": \"LTCBTC\", \"orders\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 2, \"clientOrderId\": \"j6lFOfbmFMRjTYA7rRJ0LP\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 3, \"clientOrderId\": \"z0KCjOdditiLS5ekAFtK81\" } ] } ]","title":"Query all OCO (USER_DATA)"},{"location":"rest-api/#query-open-oco-user_data","text":"GET /api/v3/openOrderList (HMAC SHA256) Weight: 3 Parameters Name Type Mandatory Description recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Data Source: Database Response: [ { \"orderListId\": 31, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"wuB13fmulKj3YjdqWEcsnp\", \"transactionTime\": 1565246080644, \"symbol\": \"LTCBTC\", \"orders\": [ { \"symbol\": \"LTCBTC\", \"orderId\": 4, \"clientOrderId\": \"r3EH2N76dHfLoSZWIUw1bT\" }, { \"symbol\": \"LTCBTC\", \"orderId\": 5, \"clientOrderId\": \"Cv1SnyPD3qhqpbjpYEHbd2\" } ] } ]","title":"Query Open OCO (USER_DATA)"},{"location":"rest-api/#account-information-user_data","text":"GET /api/v3/account (HMAC SHA256) Get current account information. Weight: 10 Parameters: Name Type Mandatory Description recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Data Source: Memory => Database Response: { \"makerCommission\": 15, \"takerCommission\": 15, \"buyerCommission\": 0, \"sellerCommission\": 0, \"commissionRates\": { \"maker\": \"0.00150000\", \"taker\": \"0.00150000\", \"buyer\": \"0.00000000\", \"seller\": \"0.00000000\" }, \"canTrade\": true, \"canWithdraw\": true, \"canDeposit\": true, \"brokered\":false, \"requireSelfTradePrevention\": false, \"updateTime\": 123456789, \"accountType\": \"SPOT\", \"balances\": [ { \"asset\": \"BTC\", \"free\": \"4723846.89208129\", \"locked\": \"0.00000000\" }, { \"asset\": \"LTC\", \"free\": \"4763368.68006011\", \"locked\": \"0.00000000\" } ], \"permissions\": [ \"SPOT\" ] }","title":"Account information (USER_DATA)"},{"location":"rest-api/#account-trade-list-user_data","text":"GET /api/v3/myTrades (HMAC SHA256) Get trades for a specific account and symbol. Weight: 10 with symbol Parameters: Name Type Mandatory Description symbol STRING YES orderId LONG NO This can only be used in combination with symbol . startTime LONG NO endTime LONG NO fromId LONG NO TradeId to fetch from. Default gets most recent trades. limit INT NO Default 500; max 1000. recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Notes: * If fromId is set, it will get trades >= that fromId . Otherwise most recent trades are returned. * The time between startTime and endTime can't be longer than 24 hours. * These are the supported combinations of all parameters: * symbol * symbol + orderId * symbol + startTime * symbol + endTime * symbol + fromId * symbol + startTime + endTime * symbol + orderId + fromId Data Source: Memory => Database Response: [ { \"symbol\": \"BNBBTC\", \"id\": 28457, \"orderId\": 100234, \"orderListId\": -1, \"price\": \"4.00000100\", \"qty\": \"12.00000000\", \"quoteQty\": \"48.000012\", \"commission\": \"10.10000000\", \"commissionAsset\": \"BNB\", \"time\": 1499865549590, \"isBuyer\": true, \"isMaker\": false, \"isBestMatch\": true } ]","title":"Account trade list (USER_DATA)"},{"location":"rest-api/#query-current-order-count-usage-trade","text":"GET /api/v3/rateLimit/order Displays the user's current order count usage for all intervals. Weight: 20 Parameters: Name Type Mandatory Description recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Data Source: Memory Response: [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 0 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 0 } ]","title":"Query Current Order Count Usage (TRADE)"},{"location":"rest-api/#query-prevented-matches-user_data","text":"GET /api/v3/myPreventedMatches Displays the list of orders that were expired because of STP trigger. These are the combinations supported: symbol + preventedMatchId symbol + orderId symbol + orderId + fromPreventedMatchId ( limit will default to 500) symbol + orderId + fromPreventedMatchId + limit Parameters: Name Type Mandatory Description symbol STRING YES preventedMatchId LONG NO orderId LONG NO fromPreventedMatchId LONG NO limit INT NO Default: 500 ; Max: 1000 recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Weight Case Weight If symbol is invalid 1 Querying by preventedMatchId 1 Querying by orderId 10 Data Source: Database Response: [ { \"symbol\": \"BTCUSDT\", \"preventedMatchId\": 1, \"takerOrderId\": 5, \"makerOrderId\": 3, \"tradeGroupId\": 1, \"selfTradePreventionMode\": \"EXPIRE_MAKER\", \"price\": \"1.100000\", \"makerPreventedQuantity\": \"1.300000\", \"transactTime\": 1669101687094 } ]","title":"Query Prevented Matches (USER_DATA)"},{"location":"rest-api/#user-data-stream-endpoints","text":"Specifics on how user data streams work can be found here.","title":"User data stream endpoints"},{"location":"rest-api/#start-user-data-stream-user_stream","text":"POST /api/v3/userDataStream Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent. Weight: 1 Parameters: NONE Data Source: Memory Response: { \"listenKey\": \"pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1\" }","title":"Start user data stream (USER_STREAM)"},{"location":"rest-api/#keepalive-user-data-stream-user_stream","text":"PUT /api/v3/userDataStream Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes. Weight: 1 Data Source\" Memory Parameters: Name Type Mandatory Description listenKey STRING YES Response: {}","title":"Keepalive user data stream (USER_STREAM)"},{"location":"rest-api/#close-user-data-stream-user_stream","text":"DELETE /api/v3/userDataStream Close out a user data stream. Weight: 1 Parameters: Name Type Mandatory Description listenKey STRING YES Data Source: Memory Response: {}","title":"Close user data stream (USER_STREAM)"},{"location":"user-data-stream/","text":"Table of Contents generated with DocToc General WSS information API Endpoints Create a listenKey (USER_STREAM) Ping/Keep-alive a listenKey (USER_STREAM) Close a listenKey (USER_STREAM) Web Socket Payloads Account Update Balance Update Order Update Execution types User Data Streams for Binance (2023-01-18) General WSS information The base API endpoint is: https://api.binance.com A User Data Stream listenKey is valid for 60 minutes after creation. Doing a PUT on an active listenKey will extend its validity for 60 minutes. Doing a DELETE on an active listenKey will close the stream and invalidate the listenKey . Doing a POST on an account with an active listenKey will return the currently active listenKey and extend its validity for 60 minutes. The base websocket endpoint is: wss://stream.binance.com:9443 User Data Streams are accessed at /ws/\\<listenKey> or /stream?streams=\\<listenKey> A single connection to stream.binance.com is only valid for 24 hours; expect to be disconnected at the 24 hour mark API Endpoints Create a listenKey (USER_STREAM) POST /api/v3/userDataStream Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey , that listenKey will be returned and its validity will be extended for 60 minutes. Weight: 1 Parameters: NONE Response: { \"listenKey\": \"pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1\" } Ping/Keep-alive a listenKey (USER_STREAM) PUT /api/v3/userDataStream Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes. Weight: 1 Parameters: Name Type Mandatory Description listenKey STRING YES Response: {} Close a listenKey (USER_STREAM) DELETE /api/v3/userDataStream Close out a user data stream. Weight: 1 Parameters: Name Type Mandatory Description listenKey STRING YES Response: {} Web Socket Payloads Account Update outboundAccountPosition is sent any time an account balance has changed and contains the assets that were possibly changed by the event that generated the balance change. { \"e\": \"outboundAccountPosition\", //Event type \"E\": 1564034571105, //Event Time \"u\": 1564034571073, //Time of last account update \"B\": [ //Balances Array { \"a\": \"ETH\", //Asset \"f\": \"10000.000000\", //Free \"l\": \"0.000000\" //Locked } ] } Balance Update Balance Update occurs during the following: * Deposits or withdrawals from the account * Transfer of funds between accounts (e.g. Spot to Margin) Payload { \"e\": \"balanceUpdate\", //Event Type \"E\": 1573200697110, //Event Time \"a\": \"BTC\", //Asset \"d\": \"100.00000000\", //Balance Delta \"T\": 1573200697068 //Clear Time } Order Update Orders are updated with the executionReport event. Payload: { \"e\": \"executionReport\", // Event type \"E\": 1499405658658, // Event time \"s\": \"ETHBTC\", // Symbol \"c\": \"mUvoqJxFIILMdfAW5iGSOW\", // Client order ID \"S\": \"BUY\", // Side \"o\": \"LIMIT\", // Order type \"f\": \"GTC\", // Time in force \"q\": \"1.00000000\", // Order quantity \"p\": \"0.10264410\", // Order price \"P\": \"0.00000000\", // Stop price \"d\": 4, // Trailing Delta; This is only visible if the order was a trailing stop order. \"F\": \"0.00000000\", // Iceberg quantity \"g\": -1, // OrderListId \"C\": \"\", // Original client order ID; This is the ID of the order being canceled \"x\": \"NEW\", // Current execution type \"X\": \"NEW\", // Current order status \"r\": \"NONE\", // Order reject reason; will be an error code. \"i\": 4293153, // Order ID \"l\": \"0.00000000\", // Last executed quantity \"z\": \"0.00000000\", // Cumulative filled quantity \"L\": \"0.00000000\", // Last executed price \"n\": \"0\", // Commission amount \"N\": null, // Commission asset \"T\": 1499405658657, // Transaction time \"t\": -1, // Trade ID \"v\": 3, // Prevented Match Id; This is only visible if the order expire due to STP trigger \"I\": 8641984, // Ignore \"w\": true, // Is the order on the book? \"m\": false, // Is this trade the maker side? \"M\": false, // Ignore \"O\": 1499405658657, // Order creation time \"Z\": \"0.00000000\", // Cumulative quote asset transacted quantity \"Y\": \"0.00000000\", // Last quote asset transacted quantity (i.e. lastPrice * lastQty) \"Q\": \"0.00000000\", // Quote Order Quantity \"D\": 1668680518494, // Trailing Time; This is only visible if the trailing stop order has been activated. \"j\": 1, // Strategy ID; This is only visible if the strategyId parameter was provided upon order placement \"J\": 1000000, // Strategy Type; This is only visible if the strategyType parameter was provided upon order placement \"W\": 1499405658657, // Working Time; This is only visible if the order has been placed on the book. \"V\": \"NONE\" // SelfTradePreventionMode \"u\":1, // TradeGroupId; This is only visible if the account is part of a trade group and the order expired due to STP trigger. \"U\":37, // CounterOrderId; This is only visible if the order expired due to STP trigger. \"A\":\"3.000000\", // Prevented Quantity; This is only visible if the order expired due to STP trigger. \"B\":\"3.000000\" // Last Prevented Quantity; This is only visible if the order expired due to STP trigger. } Note: Average price can be found by doing Z divided by z . If the order is an OCO, an event will be displayed named ListStatus in addition to the executionReport event. Payload { \"e\": \"listStatus\", //Event Type \"E\": 1564035303637, //Event Time \"s\": \"ETHBTC\", //Symbol \"g\": 2, //OrderListId \"c\": \"OCO\", //Contingency Type \"l\": \"EXEC_STARTED\", //List Status Type \"L\": \"EXECUTING\", //List Order Status \"r\": \"NONE\", //List Reject Reason \"C\": \"F4QN4G8DlFATFlIUQ0cjdD\", //List Client Order ID \"T\": 1564035303625, //Transaction Time \"O\": [ //An array of objects { \"s\": \"ETHBTC\", //Symbol \"i\": 17, // orderId \"c\": \"AJYsMjErWJesZvqlJCTUgL\" //ClientOrderId }, { \"s\": \"ETHBTC\", \"i\": 18, \"c\": \"bfYPSQdLoqAJeNrOr9adzq\" } ] } Execution types NEW - The order has been accepted into the engine. CANCELED - The order has been canceled by the user. REPLACED (currently unused) REJECTED - The order has been rejected and was not processed (This message appears only with Cancel Replace Orders wherein the new order placement is rejected but the request to cancel request succeeds.) TRADE - Part of the order or all of the order's quantity has filled. EXPIRED - The order was canceled according to the order type's rules (e.g. LIMIT FOK orders with no fill, LIMIT IOC or MARKET orders that partially fill) or by the exchange, (e.g. orders canceled during liquidation, orders canceled during maintenance). TRADE_PREVENTION - The order has expired due to STP trigger. Check the Rest API Documentation for more relevant enum definitions.","title":"User data stream"},{"location":"user-data-stream/#user-data-streams-for-binance-2023-01-18","text":"","title":"User Data Streams for Binance (2023-01-18)"},{"location":"user-data-stream/#general-wss-information","text":"The base API endpoint is: https://api.binance.com A User Data Stream listenKey is valid for 60 minutes after creation. Doing a PUT on an active listenKey will extend its validity for 60 minutes. Doing a DELETE on an active listenKey will close the stream and invalidate the listenKey . Doing a POST on an account with an active listenKey will return the currently active listenKey and extend its validity for 60 minutes. The base websocket endpoint is: wss://stream.binance.com:9443 User Data Streams are accessed at /ws/\\<listenKey> or /stream?streams=\\<listenKey> A single connection to stream.binance.com is only valid for 24 hours; expect to be disconnected at the 24 hour mark","title":"General WSS information"},{"location":"user-data-stream/#api-endpoints","text":"","title":"API Endpoints"},{"location":"user-data-stream/#create-a-listenkey-user_stream","text":"POST /api/v3/userDataStream Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey , that listenKey will be returned and its validity will be extended for 60 minutes. Weight: 1 Parameters: NONE Response: { \"listenKey\": \"pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1\" }","title":"Create a listenKey (USER_STREAM)"},{"location":"user-data-stream/#pingkeep-alive-a-listenkey-user_stream","text":"PUT /api/v3/userDataStream Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes. Weight: 1 Parameters: Name Type Mandatory Description listenKey STRING YES Response: {}","title":"Ping/Keep-alive a listenKey (USER_STREAM)"},{"location":"user-data-stream/#close-a-listenkey-user_stream","text":"DELETE /api/v3/userDataStream Close out a user data stream. Weight: 1 Parameters: Name Type Mandatory Description listenKey STRING YES Response: {}","title":"Close a listenKey (USER_STREAM)"},{"location":"user-data-stream/#web-socket-payloads","text":"","title":"Web Socket Payloads"},{"location":"user-data-stream/#account-update","text":"outboundAccountPosition is sent any time an account balance has changed and contains the assets that were possibly changed by the event that generated the balance change. { \"e\": \"outboundAccountPosition\", //Event type \"E\": 1564034571105, //Event Time \"u\": 1564034571073, //Time of last account update \"B\": [ //Balances Array { \"a\": \"ETH\", //Asset \"f\": \"10000.000000\", //Free \"l\": \"0.000000\" //Locked } ] }","title":"Account Update"},{"location":"user-data-stream/#balance-update","text":"Balance Update occurs during the following: * Deposits or withdrawals from the account * Transfer of funds between accounts (e.g. Spot to Margin) Payload { \"e\": \"balanceUpdate\", //Event Type \"E\": 1573200697110, //Event Time \"a\": \"BTC\", //Asset \"d\": \"100.00000000\", //Balance Delta \"T\": 1573200697068 //Clear Time }","title":"Balance Update"},{"location":"user-data-stream/#order-update","text":"Orders are updated with the executionReport event. Payload: { \"e\": \"executionReport\", // Event type \"E\": 1499405658658, // Event time \"s\": \"ETHBTC\", // Symbol \"c\": \"mUvoqJxFIILMdfAW5iGSOW\", // Client order ID \"S\": \"BUY\", // Side \"o\": \"LIMIT\", // Order type \"f\": \"GTC\", // Time in force \"q\": \"1.00000000\", // Order quantity \"p\": \"0.10264410\", // Order price \"P\": \"0.00000000\", // Stop price \"d\": 4, // Trailing Delta; This is only visible if the order was a trailing stop order. \"F\": \"0.00000000\", // Iceberg quantity \"g\": -1, // OrderListId \"C\": \"\", // Original client order ID; This is the ID of the order being canceled \"x\": \"NEW\", // Current execution type \"X\": \"NEW\", // Current order status \"r\": \"NONE\", // Order reject reason; will be an error code. \"i\": 4293153, // Order ID \"l\": \"0.00000000\", // Last executed quantity \"z\": \"0.00000000\", // Cumulative filled quantity \"L\": \"0.00000000\", // Last executed price \"n\": \"0\", // Commission amount \"N\": null, // Commission asset \"T\": 1499405658657, // Transaction time \"t\": -1, // Trade ID \"v\": 3, // Prevented Match Id; This is only visible if the order expire due to STP trigger \"I\": 8641984, // Ignore \"w\": true, // Is the order on the book? \"m\": false, // Is this trade the maker side? \"M\": false, // Ignore \"O\": 1499405658657, // Order creation time \"Z\": \"0.00000000\", // Cumulative quote asset transacted quantity \"Y\": \"0.00000000\", // Last quote asset transacted quantity (i.e. lastPrice * lastQty) \"Q\": \"0.00000000\", // Quote Order Quantity \"D\": 1668680518494, // Trailing Time; This is only visible if the trailing stop order has been activated. \"j\": 1, // Strategy ID; This is only visible if the strategyId parameter was provided upon order placement \"J\": 1000000, // Strategy Type; This is only visible if the strategyType parameter was provided upon order placement \"W\": 1499405658657, // Working Time; This is only visible if the order has been placed on the book. \"V\": \"NONE\" // SelfTradePreventionMode \"u\":1, // TradeGroupId; This is only visible if the account is part of a trade group and the order expired due to STP trigger. \"U\":37, // CounterOrderId; This is only visible if the order expired due to STP trigger. \"A\":\"3.000000\", // Prevented Quantity; This is only visible if the order expired due to STP trigger. \"B\":\"3.000000\" // Last Prevented Quantity; This is only visible if the order expired due to STP trigger. } Note: Average price can be found by doing Z divided by z . If the order is an OCO, an event will be displayed named ListStatus in addition to the executionReport event. Payload { \"e\": \"listStatus\", //Event Type \"E\": 1564035303637, //Event Time \"s\": \"ETHBTC\", //Symbol \"g\": 2, //OrderListId \"c\": \"OCO\", //Contingency Type \"l\": \"EXEC_STARTED\", //List Status Type \"L\": \"EXECUTING\", //List Order Status \"r\": \"NONE\", //List Reject Reason \"C\": \"F4QN4G8DlFATFlIUQ0cjdD\", //List Client Order ID \"T\": 1564035303625, //Transaction Time \"O\": [ //An array of objects { \"s\": \"ETHBTC\", //Symbol \"i\": 17, // orderId \"c\": \"AJYsMjErWJesZvqlJCTUgL\" //ClientOrderId }, { \"s\": \"ETHBTC\", \"i\": 18, \"c\": \"bfYPSQdLoqAJeNrOr9adzq\" } ] }","title":"Order Update"},{"location":"user-data-stream/#execution-types","text":"NEW - The order has been accepted into the engine. CANCELED - The order has been canceled by the user. REPLACED (currently unused) REJECTED - The order has been rejected and was not processed (This message appears only with Cancel Replace Orders wherein the new order placement is rejected but the request to cancel request succeeds.) TRADE - Part of the order or all of the order's quantity has filled. EXPIRED - The order was canceled according to the order type's rules (e.g. LIMIT FOK orders with no fill, LIMIT IOC or MARKET orders that partially fill) or by the exchange, (e.g. orders canceled during liquidation, orders canceled during maintenance). TRADE_PREVENTION - The order has expired due to STP trigger. Check the Rest API Documentation for more relevant enum definitions.","title":"Execution types"},{"location":"web-socket-api/","text":"Table of Contents generated with DocToc General API Information Request format Response format Status codes Rate limits General information on rate limits How to interpret rate limits How to show/hide rate limit information IP limits Order rate limits Request security SIGNED (TRADE and USER_DATA) request security Timing security SIGNED request example (HMAC) SIGNED request example (RSA) Data sources Public API requests Terminology ENUM definitions General requests Test connectivity Check server time Exchange information Market data requests Order book Recent trades Historical trades (MARKET_DATA) Aggregate trades Klines UI Klines Current average price 24hr ticker price change statistics Rolling window price change statistics Symbol price ticker Symbol order book ticker Trading requests Place new order (TRADE) Test new order (TRADE) Query order (USER_DATA) Cancel order (TRADE) Cancel and replace order (TRADE) Current open orders (USER_DATA) Cancel open orders (TRADE) Place new OCO (TRADE) Query OCO (USER_DATA) Cancel OCO (TRADE) Current open OCOs (USER_DATA) Account requests Account information (USER_DATA) Account order rate limits (USER_DATA) Account order history (USER_DATA) Account OCO history (USER_DATA) Account trade history (USER_DATA) Account prevented matches (USER_DATA) User Data Stream requests Start user data stream (USER_STREAM) Ping user data stream (USER_STREAM) Stop user data stream (USER_STREAM) Public WebSocket API for Binance (2023-01-18) General API Information The base endpoint is: wss://ws-api.binance.com:443/ws-api/v3 If you experience issues with the standard 443 port, alternative port 9443 is also available. The base endpoint for testnet is: wss://testnet.binance.vision/ws-api/v3 A single connection to the API is only valid for 24 hours; expect to be disconnected after the 24-hour mark. WebSocket server will send a ping frame every 3 minutes. If the server does not receive a pong frame response within 10 minutes, you will be disconnected. Unsolicited pong frames are allowed and will prevent disconnection. Lists are returned in chronological order , unless noted otherwise. All timestamps are in milliseconds in UTC, unless noted otherwise. All field names and values are case-sensitive , unless noted otherwise. Request format Requests must be sent as JSON in text frames , one request per frame. Example of request: { \"id\": \"e2a85d9f-07a5-4f94-8d5f-789dc3deb097\", \"method\": \"order.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"BUY\", \"type\": \"LIMIT\", \"price\": \"0.1\", \"quantity\": \"10\", \"timeInForce\": \"GTC\", \"timestamp\": 1655716096498, \"apiKey\": \"T59MTDLWlpRW16JVeZ2Nju5A5C98WkMm8CSzWC4oqynUlTm1zXOxyauT8LmwXEv9\", \"signature\": \"5942ad337e6779f2f4c62cd1c26dba71c91514400a24990a3e7f5edec9323f90\" } } Request fields: Name Type Mandatory Description id INT / STRING / null YES Arbitrary ID used to match responses to requests method STRING YES Request method name params OBJECT NO Request parameters. May be omitted if there are no parameters Request id is truly arbitrary. You can use UUIDs, sequential IDs, current timestamp, etc. The server does not interpret id in any way, simply echoing it back in the response. You can freely reuse IDs within a session. However, be careful to not send more than one request at a time with the same ID, since otherwise it might be impossible to tell the responses apart. Request method names may be prefixed with explicit version: e.g., \"v3/order.place\" . The order of params is not significant. Response format Responses are returned as JSON in text frames , one response per frame. Example of successful response: { \"id\": \"e2a85d9f-07a5-4f94-8d5f-789dc3deb097\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12510053279, \"orderListId\": -1, \"clientOrderId\": \"a097fe6304b20a7e4fc436\", \"transactTime\": 1655716096505, \"price\": \"0.10000000\", \"origQty\": \"10.00000000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"workingTime\": 1655716096505, \"selfTradePreventionMode\": \"NONE\" }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 12 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 4043 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 321 } ] } Example of failed response: { \"id\": \"e2a85d9f-07a5-4f94-8d5f-789dc3deb097\", \"status\": 400, \"error\": { \"code\": -2010, \"msg\": \"Account has insufficient balance for requested action.\" }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 13 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 4044 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 322 } ] } Response fields: Name Type Mandatory Description id INT / STRING / null YES Same as in the original request status INT YES Response status. See Status codes result OBJECT / ARRAY YES Response content. Present if request succeeded error OBJECT Error description. Present if request failed rateLimits ARRAY NO Rate limiting status. See Rate limits Status codes Status codes in the status field are the same as in HTTP. Here are some common status codes that you might encounter: 200 indicates a successful response. 4XX status codes indicate invalid requests; the issue is on your side. 400 \u2013 your request failed, see error for the reason. 403 \u2013 you have been blocked by the Web Application Firewall. 409 \u2013 your request partially failed but also partially succeeded, see error for details. 418 \u2013 you have been auto-banned for repeated violation of rate limits. 429 \u2013 you have exceeded API request rate limit, please slow down. 5XX status codes indicate internal errors; the issue is on Binance's side. Important: If a response contains 5xx status code, it does not necessarily mean that your request has failed. Execution status is unknown and the request might have actually succeeded. Please use query methods to confirm the status. You might also want to establish a new WebSocket connection for that. See Error codes for Binance for a list of error codes and messages. Rate limits General information on rate limits Current API rate limits can be queried using the exchangeInfo request. There are multiple rate limit types across multiple intervals. Responses can indicate current rate limit status in the optional rateLimits field. Requests fail with status 429 when rate limits are violated. How to interpret rate limits A response with rate limit status may look like this: { \"id\": \"7069b743-f477-4ae3-81db-db9b8df085d2\", \"status\": 200, \"result\": { \"serverTime\": 1656400526260 }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 70 } ] } The rateLimits array describes all currently active rate limits affected by the request. Name Type Mandatory Description rateLimitType ENUM YES Rate limit type: REQUEST_WEIGHT , ORDERS interval ENUM YES Rate limit interval: SECOND , MINUTE , HOUR , DAY intervalNum INT YES Rate limit interval multiplier limit INT YES Request limit per interval count INT YES Current usage per interval Rate limits are accounted by intervals. For example, a 1 MINUTE interval starts every minute. Request submitted at 00:01:23.456 counts towards the 00:01:00 minute's limit. Once the 00:02:00 minute starts, the count will reset to zero again. Other intervals behave in a similar manner. For example, 1 DAY rate limit resets at 00:00 UTC every day, and 10 SECOND interval resets at 00, 10, 20... seconds of each minute. APIs have multiple rate-limiting intervals. If you exhaust a shorter interval but the longer interval still allows requests, you will have to wait for the shorter interval to expire and reset. If you exhaust a longer interval, you will have to wait for that interval to reset, even if shorter rate limit count is zero. How to show/hide rate limit information rateLimits field is included with every response by default. However, rate limit information can be quite bulky. If you are not interested in detailed rate limit status of every request, the rateLimits field can be omitted from responses to reduce their size. Optional returnRateLimits boolean parameter in request. Use returnRateLimits parameter to control whether to include rateLimits fields in response to individual requests. Default request and response: json {\"id\":1,\"method\":\"time\"} json {\"id\":1,\"status\":200,\"result\":{\"serverTime\":1656400526260},\"rateLimits\":[{\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200,\"count\":70}]} Request and response without rate limit status: json {\"id\":2,\"method\":\"time\",\"params\":{\"returnRateLimits\":false}} json {\"id\":2,\"status\":200,\"result\":{\"serverTime\":1656400527891}} Optional returnRateLimits boolean parameter in connection URL. If you wish to omit rateLimits from all responses by default, use returnRateLimits parameter in the query string instead: wss://ws-api.binance.com/ws-api/v3?returnRateLimits=false This will make all requests made through this connection behave as if you have passed \"returnRateLimits\": false . If you want to see rate limits for a particular request, you need to explicitly pass the \"returnRateLimits\": true parameter. Note: Your requests are still rate limited if you hide the rateLimits field in responses. IP limits Every request has a certain weight , added to your limit as you perform requests. Most requests cost 1 unit of weight, heavier requests acting on multiple symbols cost more. Connecting to WebSocket API costs 1 weight. Current weight usage is indicated by the REQUEST_WEIGHT rate limit type. Use the exchangeInfo request to keep track of the current weight limits. Weight is accumulated per IP address and is shared by all connections from that address. If you go over the weight limit, requests fail with status 429 . This status code indicates you should back off and stop spamming the API. Rate-limited responses include a retryAfter field, indicating when you can retry the request. Repeatedly violating rate limits and/or failing to back off after receiving 429s will result in an automated IP ban. Requests from a banned IP address fail with status 418 . retryAfter field indicates the timestamp when the ban will be lifted. IP bans are tracked and scale in duration for repeat offenders, from 2 minutes to 3 days . Successful response indicating that in 1 minute you have used 70 weight out of your 1200 limit: { \"id\": \"7069b743-f477-4ae3-81db-db9b8df085d2\", \"status\": 200, \"result\": [], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 70 } ] } Failed response indicating that you are banned and the ban will last until epoch 1659146400000 : { \"id\": \"fc93a61a-a192-4cf4-bb2a-a8f0f0c51e06\", \"status\": 418, \"error\": { \"code\": -1003, \"msg\": \"Way too much request weight used; IP banned until 1659146400000. Please use WebSocket Streams for live updates to avoid bans.\", \"data\": { \"serverTime\": 1659142907531, \"retryAfter\": 1659146400000 } }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2411 } ] } Order rate limits Every request to place an order counts towards your order limit . Successfully placed orders update the ORDERS rate limit type. Rejected or unsuccessful orders might or might not update the ORDERS count. Use the account.rateLimits.orders request to keep track of the current order rate limits. Order rate limit is maintained per account and is shared by all API keys of the account. If you go over the order rate limit, requests fail with status 429 . This status code indicates you should back off and stop spamming the API. Rate-limited responses include a retryAfter field, indicating when you can retry the request. Successful response indicating that you have placed 12 orders in 10 seconds, and 4043 orders in the past 24 hours: { \"id\": \"e2a85d9f-07a5-4f94-8d5f-789dc3deb097\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12510053279, \"orderListId\": -1, \"clientOrderId\": \"a097fe6304b20a7e4fc436\", \"transactTime\": 1655716096505, \"price\": \"0.10000000\", \"origQty\": \"10.00000000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"workingTime\": 1655716096505, \"selfTradePreventionMode\": \"NONE\" }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 12 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 4043 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 321 } ] } Request security Every method has a security type which determines how to call it. Security type is stated next to the method name. For example, Place new order (TRADE) . If no security type is stated, the security type is NONE. Security type API key Signature Description NONE Public market data TRADE required required Trading on the exchange, placing and canceling orders USER_DATA required required Private account information, such as order status and your trading history USER_STREAM required Managing User Data Stream subscriptions MARKET_DATA required Historical market data access Secure methods require a valid API key to be specified and authenticated. API keys can be created on the API Management page of your Binance account. Both API key and secret key are sensitive. Never share them with anyone. If you notice unusual activity in your account, immediately revoke all the keys and contact Binance support. API keys can be configured to allow access only to certain types of secure methods. For example, you can have an API key with TRADE permission for trading, while using a separate API key with USER_DATA permission to monitor your order status. By default, an API key cannot TRADE . You need to enable trading in API Management first. TRADE and USER_DATA requests are also known as SIGNED requests. SIGNED (TRADE and USER_DATA) request security SIGNED requests require an additional parameter: signature , authorizing the request. Please consult SIGNED request example (HMAC) and SIGNED request example (RSA) on how to compute signature. Timing security SIGNED requests also require a timestamp parameter which should be the current millisecond timestamp. An additional optional parameter, recvWindow , specifies for how long the request stays valid. If recvWindow is not sent, it defaults to 5000 milliseconds . Maximum recvWindow is 60000 milliseconds. Request processing logic is as follows: javascript if (timestamp < (serverTime + 1000) && (serverTime - timestamp) <= recvWindow) { // process request } else { // reject request } Serious trading is about timing. Networks can be unstable and unreliable, which can lead to requests taking varying amounts of time to reach the servers. With recvWindow , you can specify that the request must be processed within a certain number of milliseconds or be rejected by the server. It is recommended to use a small recvWindow of 5000 or less! SIGNED request example (HMAC) Here is a step-by-step guide on how to sign requests using HMAC secret key. Example API key and secret key: Key Value apiKey vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A secretKey NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j WARNING: DO NOT SHARE YOUR API KEY AND SECRET KEY WITH ANYONE. The example keys are provided here only for illustrative purposes. Example of request: { \"id\": \"4885f793-e5ad-4c3b-8f6c-55d891472b71\", \"method\": \"order.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"quantity\": \"0.01000000\", \"price\": \"52000.00\", \"newOrderRespType\": \"ACK\", \"recvWindow\": 100, \"timestamp\": 1645423376532, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"------ FILL ME ------\" } } As you can see, the signature parameter is currently missing. Step 1. Construct the signature payload Take all request params except for the signature , sort them by name in alphabetical order: Parameter Value apiKey vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A newOrderRespType ACK price 52000.00 quantity 0.01000000 recvWindow 100 side SELL symbol BTCUSDT timeInForce GTC timestamp 1645423376532 type LIMIT Format parameters as parameter=value pairs separated by & . Resulting signature payload: apiKey=vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A&newOrderRespType=ACK&price=52000.00&quantity=0.01000000&recvWindow=100&side=SELL&symbol=BTCUSDT&timeInForce=GTC&timestamp=1645423376532&type=LIMIT Step 2. Compute the signature Interpret secretKey as ASCII data, using it as a key for HMAC-SHA-256. Sign signature payload as ASCII data. Encode HMAC-SHA-256 output as a hex string. Note that apiKey , secretKey , and the payload are case-sensitive , while resulting signature value is case-insensitive. You can cross-check your signature algorithm implementation with OpenSSL: $ echo -n 'apiKey=vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A&newOrderRespType=ACK&price=52000.00&quantity=0.01000000&recvWindow=100&side=SELL&symbol=BTCUSDT&timeInForce=GTC&timestamp=1645423376532&type=LIMIT' \\ | openssl dgst -hex -sha256 -hmac 'NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j' cc15477742bd704c29492d96c7ead9414dfd8e0ec4a00f947bb5bb454ddbd08a Step 3. Add signature to request params Finally, complete the request by adding the signature parameter with the signature string. { \"id\": \"4885f793-e5ad-4c3b-8f6c-55d891472b71\", \"method\": \"order.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"quantity\": \"0.01000000\", \"price\": \"52000.00\", \"newOrderRespType\": \"ACK\", \"recvWindow\": 100, \"timestamp\": 1645423376532, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"cc15477742bd704c29492d96c7ead9414dfd8e0ec4a00f947bb5bb454ddbd08a\" } } SIGNED request example (RSA) Here is a step-by-step guide on how to sign requests using your RSA private key. Key Value apiKey CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ In this example, we assume the private key is stored in the test-prv-key.pem file. WARNING: DO NOT SHARE YOUR API KEY AND PRIVATE KEY WITH ANYONE. The example keys are provided here only for illustrative purposes. Example of request: { \"id\": \"4885f793-e5ad-4c3b-8f6c-55d891472b71\", \"method\": \"order.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"quantity\": \"0.01000000\", \"price\": \"52000.00\", \"newOrderRespType\": \"ACK\", \"recvWindow\": 100, \"timestamp\": 1645423376532, \"apiKey\": \"CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ\", \"signature\": \"------ FILL ME ------\" } } Step 1. Construct the signature payload Take all request params except for the signature , sort them by name in alphabetical order: Parameter Value apiKey CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ newOrderRespType ACK price 52000.00 quantity 0.01000000 recvWindow 100 side SELL symbol BTCUSDT timeInForce GTC timestamp 1645423376532 type LIMIT Format parameters as parameter=value pairs separated by & . Resulting signature payload: apiKey=CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ&newOrderRespType=ACK&price=52000.00&quantity=0.01000000&recvWindow=100&side=SELL&symbol=BTCUSDT&timeInForce=GTC&timestamp=1645423376532&type=LIMIT Step 2. Compute the signature Encode signature payload as ASCII data. Sign payload using RSASSA-PKCS1-v1_5 algorithm with SHA-256 hash function. Encode output as base64 string. Note that apiKey , the payload, and the resulting signature are case-sensitive . You can cross-check your signature algorithm implementation with OpenSSL: $ echo -n 'apiKey=CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ&newOrderRespType=ACK&price=52000.00&quantity=0.01000000&recvWindow=100&side=SELL&symbol=BTCUSDT&timeInForce=GTC&timestamp=1645423376532&type=LIMIT' \\ | openssl dgst -sha256 -sign test-prv-key.pem \\ | openssl enc -base64 -A OJJaf8C/3VGrU4ATTR4GiUDqL2FboSE1Qw7UnnoYNfXTXHubIl1iaePGuGyfct4NPu5oVEZCH4Q6ZStfB1w4ssgu0uiB/Bg+fBrRFfVgVaLKBdYHMvT+ljUJzqVaeoThG9oXlduiw8PbS9U8DYAbDvWN3jqZLo4Z2YJbyovyDAvDTr/oC0+vssLqP7NmlNb3fF3Bj7StmOwJvQJTbRAtzxK5PP7OQe+0mbW+D7RqVkUiSswR8qJFWTeSe4nXXNIdZdueYhF/Xf25L+KitJS5IHdIHcKfEw3MQzHFb2ZsGWkjDQwxkwr7Noi0Zaa+gFtxCuatGFm9dFIyx217pmSHtA== Step 3. Add signature to request params Finally, complete the request by adding the signature parameter with the signature string. { \"id\": \"4885f793-e5ad-4c3b-8f6c-55d891472b71\", \"method\": \"order.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"quantity\": \"0.01000000\", \"price\": \"52000.00\", \"newOrderRespType\": \"ACK\", \"recvWindow\": 100, \"timestamp\": 1645423376532, \"apiKey\": \"CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ\", \"signature\": \"OJJaf8C/3VGrU4ATTR4GiUDqL2FboSE1Qw7UnnoYNfXTXHubIl1iaePGuGyfct4NPu5oVEZCH4Q6ZStfB1w4ssgu0uiB/Bg+fBrRFfVgVaLKBdYHMvT+ljUJzqVaeoThG9oXlduiw8PbS9U8DYAbDvWN3jqZLo4Z2YJbyovyDAvDTr/oC0+vssLqP7NmlNb3fF3Bj7StmOwJvQJTbRAtzxK5PP7OQe+0mbW+D7RqVkUiSswR8qJFWTeSe4nXXNIdZdueYhF/Xf25L+KitJS5IHdIHcKfEw3MQzHFb2ZsGWkjDQwxkwr7Noi0Zaa+gFtxCuatGFm9dFIyx217pmSHtA==\" } } Data sources The API system is asynchronous. Some delay in the response is normal and expected. Each method has a data source indicating where the data is coming from, and thus how up-to-date it is. Data Source Latency Description Matching Engine lowest The matching engine produces the response directly Memory low Data is fetched from API server's local or external memory cache Database moderate Data is retrieved from the database Some methods have more than one data source (e.g., Memory => Database). This means that the API will look for the latest data in that order: first in the cache, then in the database. Public API requests Terminology These terms will be used throughout the documentation, so it is recommended especially for new users to read to help their understanding of the API. base asset refers to the asset that is the quantity of a symbol. For the symbol BTCUSDT, BTC would be the base asset . quote asset refers to the asset that is the price of a symbol. For the symbol BTCUSDT, USDT would be the quote asset . ENUM definitions Symbol status (status): PRE_TRADING TRADING POST_TRADING END_OF_DAY HALT AUCTION_MATCH BREAK Account and Symbol Permissions (permissions): SPOT MARGIN LEVERAGED TRD_GRP_002 TRD_GRP_003 TRD_GRP_004 TRD_GRP_005 TRD_GRP_006 TRD_GRP_007 Order status (status): Status Description NEW The order has been accepted by the engine. PARTIALLY_FILLED A part of the order has been filled. FILLED The order has been completed. CANCELED The order has been canceled by the user. PENDING_CANCEL Currently unused REJECTED The order was not accepted by the engine and not processed. EXPIRED The order was canceled according to the order type's rules (e.g. LIMIT FOK orders with no fill, LIMIT IOC or MARKET orders that partially fill) or by the exchange, (e.g. orders canceled during liquidation, orders canceled during maintenance) EXPIRED_IN_MATCH The order was canceled by the exchange due to STP trigger. (e.g. an order with EXPIRE_TAKER will match with existing orders on the book with the same account or same tradeGroupId ) OCO Status (listStatusType): Status Description RESPONSE This is used when the ListStatus is responding to a failed action. (E.g. Orderlist placement or cancellation) EXEC_STARTED The order list has been placed or there is an update to the order list status. ALL_DONE The order list has finished executing and thus no longer active. OCO Order Status (listOrderStatus): Status Description EXECUTING Either an order list has been placed or there is an update to the status of the list. ALL_DONE An order list has completed execution and thus no longer active. REJECT The List Status is responding to a failed action either during order placement or order canceled ContingencyType * OCO General requests Test connectivity { \"id\": \"922bcc6e-9de8-440d-9e84-7c80933a8d0d\", \"method\": \"ping\" } Test connectivity to the WebSocket API. Note: You can use regular WebSocket ping frames to test connectivity as well, WebSocket API will respond with pong frames as soon as possible. ping request along with time is a safe way to test request-response handling in your application. Weight: 1 Parameters: NONE Data Source: Memory Response: { \"id\": \"922bcc6e-9de8-440d-9e84-7c80933a8d0d\", \"status\": 200, \"result\": {}, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Check server time { \"id\": \"187d3cb2-942d-484c-8271-4e2141bbadb1\", \"method\": \"time\" } Test connectivity to the WebSocket API and get the current server time. Weight: 1 Parameters: NONE Data Source: Memory Response: { \"id\": \"187d3cb2-942d-484c-8271-4e2141bbadb1\", \"status\": 200, \"result\": { \"serverTime\": 1656400526260 }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Exchange information { \"id\": \"5494febb-d167-46a2-996d-70533eb4d976\", \"method\": \"exchangeInfo\", \"params\": { \"symbols\": [\"BNBBTC\"] } } Query current exchange trading rules, rate limits, and symbol information. Weight: 10 Parameters: Name Type Mandatory Description symbol STRING NO Describe a single symbol symbols ARRAY of STRING Describe multiple symbols permissions ARRAY of STRING Filter symbols by permissions Notes: Only one of symbol , symbols , permissions parameters can be specified. Without parameters, exchangeInfo displays all symbols with [\"SPOT, \"MARGIN\", \"LEVERAGED\"] permissions. In order to list all active symbols on the exchange, you need to explicitly request all permissions. permissions accepts either a list of permissions, or a single permission name. E.g. \"SPOT\" . Available Permissions Data Source: Memory Response: { \"id\": \"5494febb-d167-46a2-996d-70533eb4d976\", \"status\": 200, \"result\": { \"timezone\": \"UTC\", \"serverTime\": 1655969291181, // Global rate limits. See \"Rate limits\" section. \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", // Rate limit type: REQUEST_WEIGHT, ORDERS, RAW_REQUESTS \"interval\": \"MINUTE\", // Rate limit interval: SECOND, MINUTE, DAY \"intervalNum\": 1, // Rate limit interval multiplier (i.e., \"1 minute\") \"limit\": 1200 // Rate limit per interval }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000 }, { \"rateLimitType\": \"RAW_REQUESTS\", \"interval\": \"MINUTE\", \"intervalNum\": 5, \"limit\": 6100 } ], // Exchange filters are explained on the \"Filters\" page: // https://github.com/binance/binance-spot-api-docs/blob/master/filters.md // All exchange filters are optional. \"exchangeFilters\": [], \"symbols\": [ { \"symbol\": \"BNBBTC\", \"status\": \"TRADING\", \"baseAsset\": \"BNB\", \"baseAssetPrecision\": 8, \"quoteAsset\": \"BTC\", \"quotePrecision\": 8, \"quoteAssetPrecision\": 8, \"baseCommissionPrecision\": 8, \"quoteCommissionPrecision\": 8, \"orderTypes\": [ \"LIMIT\", \"LIMIT_MAKER\", \"MARKET\", \"STOP_LOSS_LIMIT\", \"TAKE_PROFIT_LIMIT\" ], \"icebergAllowed\": true, \"ocoAllowed\": true, \"quoteOrderQtyMarketAllowed\": true, \"allowTrailingStop\": true, \"cancelReplaceAllowed\": true, \"isSpotTradingAllowed\": true, \"isMarginTradingAllowed\": true, // Symbol filters are explained on the \"Filters\" page: // https://github.com/binance/binance-spot-api-docs/blob/master/filters.md // All symbol filters are optional. \"filters\": [ { \"filterType\": \"PRICE_FILTER\", \"minPrice\": \"0.00000100\", \"maxPrice\": \"100000.00000000\", \"tickSize\": \"0.00000100\" }, { \"filterType\": \"LOT_SIZE\", \"minQty\": \"0.00100000\", \"maxQty\": \"100000.00000000\", \"stepSize\": \"0.00100000\" } ], \"permissions\": [ \"SPOT\", \"MARGIN\", \"TRD_GRP_004\" ], \"defaultSelfTradePreventionMode\": \"NONE\", \"allowedSelfTradePreventionModes\": [ \"NONE\" ] } ] }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 10 } ] } Market data requests Order book { \"id\": \"51e2affb-0aba-4821-ba75-f2625006eb43\", \"method\": \"depth\", \"params\": { \"symbol\": \"BNBBTC\", \"limit\": 5 } } Get current order book. Note that this request returns limited market depth. If you need to continuously monitor order book updates, please consider using WebSocket Streams: <symbol>@depth<levels> <symbol>@depth You can use depth request together with <symbol>@depth streams to maintain a local order book . Weight: Adjusted based on the limit: Limit Weight 1\u2013100 1 101\u2013500 5 501\u20131000 10 1001\u20135000 50 Parameters: Name Type Mandatory Description symbol STRING YES limit INT NO Default 100; max 5000 Data Source: Memory Response: { \"id\": \"51e2affb-0aba-4821-ba75-f2625006eb43\", \"status\": 200, \"result\": { \"lastUpdateId\": 2731179239, // Bid levels are sorted from highest to lowest price. \"bids\": [ [ \"0.01379900\", // Price \"3.43200000\" // Quantity ], [ \"0.01379800\", \"3.24300000\" ], [ \"0.01379700\", \"10.45500000\" ], [ \"0.01379600\", \"3.82100000\" ], [ \"0.01379500\", \"10.26200000\" ] ], // Ask levels are sorted from lowest to highest price. \"asks\": [ [ \"0.01380000\", \"5.91700000\" ], [ \"0.01380100\", \"6.01400000\" ], [ \"0.01380200\", \"0.26800000\" ], [ \"0.01380300\", \"0.33800000\" ], [ \"0.01380400\", \"0.26800000\" ] ] }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Recent trades { \"id\": \"409a20bd-253d-41db-a6dd-687862a5882f\", \"method\": \"trades.recent\", \"params\": { \"symbol\": \"BNBBTC\", \"limit\": 1 } } Get recent trades. If you need access to real-time trading activity, please consider using WebSocket Streams: <symbol>@trade Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES limit INT NO Default 500; max 1000 Data Source: Memory Response: { \"id\": \"409a20bd-253d-41db-a6dd-687862a5882f\", \"status\": 200, \"result\": [ { \"id\": 194686783, \"price\": \"0.01361000\", \"qty\": \"0.01400000\", \"quoteQty\": \"0.00019054\", \"time\": 1660009530807, \"isBuyerMaker\": true, \"isBestMatch\": true } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Historical trades (MARKET_DATA) { \"id\": \"cffc9c7d-4efc-4ce0-b587-6b87448f052a\", \"method\": \"trades.historical\", \"params\": { \"symbol\": \"BNBBTC\", \"fromId\": 0, \"limit\": 1, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" } } Get historical trades. Weight: 5 Parameters: Name Type Mandatory Description symbol STRING YES fromId INT NO Trade ID to begin at limit INT NO Default 500; max 1000 apiKey STRING YES Notes: If fromId is not specified, the most recent trades are returned. Data Source: Database Response: { \"id\": \"cffc9c7d-4efc-4ce0-b587-6b87448f052a\", \"status\": 200, \"result\": [ { \"id\": 0, \"price\": \"0.00005000\", \"qty\": \"40.00000000\", \"quoteQty\": \"0.00200000\", \"time\": 1500004800376, \"isBuyerMaker\": true, \"isBestMatch\": true } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 5 } ] } Aggregate trades { \"id\": \"189da436-d4bd-48ca-9f95-9f613d621717\", \"method\": \"trades.aggregate\", \"params\": { \"symbol\": \"BNBBTC\", \"fromId\": 50000000, \"limit\": 1 } } Get aggregate trades. An aggregate trade (aggtrade) represents one or more individual trades. Trades that fill at the same time, from the same taker order, with the same price \u2013 those trades are collected into an aggregate trade with total quantity of the individual trades. If you need access to real-time trading activity, please consider using WebSocket Streams: <symbol>@aggTrade If you need historical aggregate trade data, please consider using data.binance.vision . Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES fromId INT NO Aggregate trade ID to begin at startTime INT NO endTime INT NO limit INT NO Default 500; max 1000 Notes: If fromId is specified, return aggtrades with aggregate trade ID >= fromId . Use fromId and limit to page through all aggtrades. If startTime and/or endTime are specified, aggtrades are filtered by execution time ( T ). fromId cannot be used together with startTime and endTime . If no condition is specified, the most recent aggregate trades are returned. Data Source: Database Response: { \"id\": \"189da436-d4bd-48ca-9f95-9f613d621717\", \"status\": 200, \"result\": [ { \"a\": 50000000, // Aggregate trade ID \"p\": \"0.00274100\", // Price \"q\": \"57.19000000\", // Quantity \"f\": 59120167, // First trade ID \"l\": 59120170, // Last trade ID \"T\": 1565877971222, // Timestamp \"m\": true, // Was the buyer the maker? \"M\": true // Was the trade the best price match? } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Klines { \"id\": \"1dbbeb56-8eea-466a-8f6e-86bdcfa2fc0b\", \"method\": \"klines\", \"params\": { \"symbol\": \"BNBBTC\", \"interval\": \"1h\", \"startTime\": 1655969280000, \"limit\": 1 } } Get klines (candlestick bars). Klines are uniquely identified by their open & close time. If you need access to real-time kline updates, please consider using WebSocket Streams: <symbol>@kline_<interval> If you need historical kline data, please consider using data.binance.vision . Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES interval ENUM YES startTime INT NO endTime INT NO limit INT NO Default 500; max 1000 Supported kline intervals (case-sensitive): Interval interval value seconds 1s minutes 1m , 3m , 5m , 15m , 30m hours 1h , 2h , 4h , 6h , 8h , 12h days 1d , 3d weeks 1w months 1M Notes: If startTime , endTime are not specified, the most recent klines are returned. Data Source: Database Response: { \"id\": \"1dbbeb56-8eea-466a-8f6e-86bdcfa2fc0b\", \"status\": 200, \"result\": [ [ 1655971200000, // Kline open time \"0.01086000\", // Open price \"0.01086600\", // High price \"0.01083600\", // Low price \"0.01083800\", // Close price \"2290.53800000\", // Volume 1655974799999, // Kline close time \"24.85074442\", // Quote asset volume 2283, // Number of trades \"1171.64000000\", // Taker buy base asset volume \"12.71225884\", // Taker buy quote asset volume \"0\" // Unused field, ignore ] ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } UI Klines { \"id\": \"b137468a-fb20-4c06-bd6b-625148eec958\", \"method\": \"uiKlines\", \"params\": { \"symbol\": \"BNBBTC\", \"interval\": \"1h\", \"startTime\": 1655969280000, \"limit\": 1 } } Get klines (candlestick bars) optimized for presentation. This request is similar to klines , having the same parameters and response. uiKlines return modified kline data, optimized for presentation of candlestick charts. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES interval ENUM YES See klines startTime INT NO endTime INT NO limit INT NO Default 500; max 1000 Notes: If startTime , endTime are not specified, the most recent klines are returned. Data Source: Database Response: { \"id\": \"b137468a-fb20-4c06-bd6b-625148eec958\", \"status\": 200, \"result\": [ [ 1655971200000, // Kline open time \"0.01086000\", // Open price \"0.01086600\", // High price \"0.01083600\", // Low price \"0.01083800\", // Close price \"2290.53800000\", // Volume 1655974799999, // Kline close time \"24.85074442\", // Quote asset volume 2283, // Number of trades \"1171.64000000\", // Taker buy base asset volume \"12.71225884\", // Taker buy quote asset volume \"0\" // Unused field, ignore ] ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Current average price { \"id\": \"ddbfb65f-9ebf-42ec-8240-8f0f91de0867\", \"method\": \"avgPrice\", \"params\": { \"symbol\": \"BNBBTC\" } } Get current average price for a symbol. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES Data Source: Memory Response: { \"id\": \"ddbfb65f-9ebf-42ec-8240-8f0f91de0867\", \"status\": 200, \"result\": { \"mins\": 5, // Price averaging interval in minutes \"price\": \"0.01378135\" }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } 24hr ticker price change statistics { \"id\": \"93fb61ef-89f8-4d6e-b022-4f035a3fadad\", \"method\": \"ticker.24hr\", \"params\": { \"symbol\": \"BNBBTC\" } } Get 24-hour rolling window price change statistics. If you need to continuously monitor trading statistics, please consider using WebSocket Streams: <symbol>@ticker or !ticker@arr <symbol>@miniTicker or !miniTicker@arr If you need different window sizes, use the ticker request. Weight: Adjusted based on the number of requested symbols: Symbols Weight 1\u201320 1 21\u2013100 20 101 or more 40 all symbols 40 Parameters: Name Type Mandatory Description symbol STRING NO Query ticker for a single symbol symbols ARRAY of STRING Query ticker for multiple symbols type ENUM NO Ticker type: FULL (default) or MINI Notes: symbol and symbols cannot be used together. If no symbol is specified, returns information about all symbols currently trading on the exchange. Data Source: Memory Response: FULL type, for a single symbol: { \"id\": \"93fb61ef-89f8-4d6e-b022-4f035a3fadad\", \"status\": 200, \"result\": { \"symbol\": \"BNBBTC\", \"priceChange\": \"0.00013900\", \"priceChangePercent\": \"1.020\", \"weightedAvgPrice\": \"0.01382453\", \"prevClosePrice\": \"0.01362800\", \"lastPrice\": \"0.01376700\", \"lastQty\": \"1.78800000\", \"bidPrice\": \"0.01376700\", \"bidQty\": \"4.64600000\", \"askPrice\": \"0.01376800\", \"askQty\": \"14.31400000\", \"openPrice\": \"0.01362800\", \"highPrice\": \"0.01414900\", \"lowPrice\": \"0.01346600\", \"volume\": \"69412.40500000\", \"quoteVolume\": \"959.59411487\", \"openTime\": 1660014164909, \"closeTime\": 1660100564909, \"firstId\": 194696115, // First trade ID \"lastId\": 194968287, // Last trade ID \"count\": 272173 // Number of trades }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } MINI type, for a single symbol: { \"id\": \"9fa2a91b-3fca-4ed7-a9ad-58e3b67483de\", \"status\": 200, \"result\": { \"symbol\": \"BNBBTC\", \"openPrice\": \"0.01362800\", \"highPrice\": \"0.01414900\", \"lowPrice\": \"0.01346600\", \"lastPrice\": \"0.01376700\", \"volume\": \"69412.40500000\", \"quoteVolume\": \"959.59411487\", \"openTime\": 1660014164909, \"closeTime\": 1660100564909, \"firstId\": 194696115, // First trade ID \"lastId\": 194968287, // Last trade ID \"count\": 272173 // Number of trades }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } If more than one symbol is requested, response returns an array: { \"id\": \"901be0d9-fd3b-45e4-acd6-10c580d03430\", \"status\": 200, \"result\": [ { \"symbol\": \"BNBBTC\", \"priceChange\": \"0.00016500\", \"priceChangePercent\": \"1.213\", \"weightedAvgPrice\": \"0.01382508\", \"prevClosePrice\": \"0.01360800\", \"lastPrice\": \"0.01377200\", \"lastQty\": \"1.01400000\", \"bidPrice\": \"0.01377100\", \"bidQty\": \"7.55700000\", \"askPrice\": \"0.01377200\", \"askQty\": \"4.37900000\", \"openPrice\": \"0.01360700\", \"highPrice\": \"0.01414900\", \"lowPrice\": \"0.01346600\", \"volume\": \"69376.27900000\", \"quoteVolume\": \"959.13277091\", \"openTime\": 1660014615517, \"closeTime\": 1660101015517, \"firstId\": 194697254, \"lastId\": 194969483, \"count\": 272230 }, { \"symbol\": \"BTCUSDT\", \"priceChange\": \"-938.06000000\", \"priceChangePercent\": \"-3.938\", \"weightedAvgPrice\": \"23265.34432003\", \"prevClosePrice\": \"23819.17000000\", \"lastPrice\": \"22880.91000000\", \"lastQty\": \"0.00536000\", \"bidPrice\": \"22880.40000000\", \"bidQty\": \"0.00424000\", \"askPrice\": \"22880.91000000\", \"askQty\": \"0.04276000\", \"openPrice\": \"23818.97000000\", \"highPrice\": \"23933.25000000\", \"lowPrice\": \"22664.69000000\", \"volume\": \"153508.37606000\", \"quoteVolume\": \"3571425225.04441220\", \"openTime\": 1660014615977, \"closeTime\": 1660101015977, \"firstId\": 1592019902, \"lastId\": 1597301762, \"count\": 5281861 } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Rolling window price change statistics { \"id\": \"f4b3b507-c8f2-442a-81a6-b2f12daa030f\", \"method\": \"ticker\", \"params\": { \"symbols\": [ \"BNBBTC\", \"BTCUSDT\" ], \"windowSize\": \"7d\" } } Get rolling window price change statistics with a custom window. This request is similar to ticker.24hr , but statistics are computed on demand using the arbitrary window you specify. Note: Window size precision is limited to 1 minute. While the closeTime is the current time of the request, openTime always start on a minute boundary. As such, the effective window might be up to 59999 ms wider than the requested windowSize . Window computation example For example, a request for `\"windowSize\": \"7d\"` might result in the following window: \"openTime\": 1659580020000, \"closeTime\": 1660184865291, Time of the request \u2013 `closeTime` \u2013 is 1660184865291 (August 11, 2022 02:27:45.291). Requested window size should put the `openTime` 7 days before that \u2013 August 4, 02:27:45.291 \u2013 but due to limited precision it ends up a bit earlier: 1659580020000 (August 4, 2022 02:27:00), exactly at the start of a minute. If you need to continuously monitor trading statistics, please consider using WebSocket Streams: <symbol>@ticker_<window_size> or !ticker_<window-size>@arr Weight: Adjusted based on the number of requested symbols: Symbols Weight 1\u201350 2 per symbol 51\u2013100 100 Parameters: Name Type Mandatory Description symbol STRING YES Query ticker of a single symbol symbols ARRAY of STRING Query ticker for multiple symbols type ENUM NO Ticker type: FULL (default) or MINI windowSize ENUM NO Default 1d Supported window sizes: Unit windowSize value minutes 1m , 2m ... 59m hours 1h , 2h ... 23h days 1d , 2d ... 7d Notes: Either symbol or symbols must be specified. Maximum number of symbols in one request: 100. Window size units cannot be combined. E.g., 1d 2h is not supported. Data Source: Database Response: FULL type, for a single symbol: { \"id\": \"f4b3b507-c8f2-442a-81a6-b2f12daa030f\", \"status\": 200, \"result\": { \"symbol\": \"BNBBTC\", \"priceChange\": \"0.00061500\", \"priceChangePercent\": \"4.735\", \"weightedAvgPrice\": \"0.01368242\", \"openPrice\": \"0.01298900\", \"highPrice\": \"0.01418800\", \"lowPrice\": \"0.01296000\", \"lastPrice\": \"0.01360400\", \"volume\": \"587179.23900000\", \"quoteVolume\": \"8034.03382165\", \"openTime\": 1659580020000, \"closeTime\": 1660184865291, \"firstId\": 192977765, // First trade ID \"lastId\": 195365758, // Last trade ID \"count\": 2387994 // Number of trades }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2 } ] } MINI type, for a single symbol: { \"id\": \"bdb7c503-542c-495c-b797-4d2ee2e91173\", \"status\": 200, \"result\": { \"symbol\": \"BNBBTC\", \"openPrice\": \"0.01298900\", \"highPrice\": \"0.01418800\", \"lowPrice\": \"0.01296000\", \"lastPrice\": \"0.01360400\", \"volume\": \"587179.23900000\", \"quoteVolume\": \"8034.03382165\", \"openTime\": 1659580020000, \"closeTime\": 1660184865291, \"firstId\": 192977765, // First trade ID \"lastId\": 195365758, // Last trade ID \"count\": 2387994 // Number of trades }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2 } ] } If more than one symbol is requested, response returns an array: { \"id\": \"f4b3b507-c8f2-442a-81a6-b2f12daa030f\", \"status\": 200, \"result\": [ { \"symbol\": \"BNBBTC\", \"priceChange\": \"0.00061500\", \"priceChangePercent\": \"4.735\", \"weightedAvgPrice\": \"0.01368242\", \"openPrice\": \"0.01298900\", \"highPrice\": \"0.01418800\", \"lowPrice\": \"0.01296000\", \"lastPrice\": \"0.01360400\", \"volume\": \"587169.48600000\", \"quoteVolume\": \"8033.90114517\", \"openTime\": 1659580020000, \"closeTime\": 1660184820927, \"firstId\": 192977765, \"lastId\": 195365700, \"count\": 2387936 }, { \"symbol\": \"BTCUSDT\", \"priceChange\": \"1182.92000000\", \"priceChangePercent\": \"5.113\", \"weightedAvgPrice\": \"23349.27074846\", \"openPrice\": \"23135.33000000\", \"highPrice\": \"24491.22000000\", \"lowPrice\": \"22400.00000000\", \"lastPrice\": \"24318.25000000\", \"volume\": \"1039498.10978000\", \"quoteVolume\": \"24271522807.76838630\", \"openTime\": 1659580020000, \"closeTime\": 1660184820927, \"firstId\": 1568787779, \"lastId\": 1604337406, \"count\": 35549628 } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 4 } ] } Symbol price ticker { \"id\": \"043a7cf2-bde3-4888-9604-c8ac41fcba4d\", \"method\": \"ticker.price\", \"params\": { \"symbol\": \"BNBBTC\" } } Get the latest market price for a symbol. If you need access to real-time price updates, please consider using WebSocket Streams: <symbol>@aggTrade <symbol>@trade Weight: Adjusted based on the number of requested symbols: Parameter Weight symbol 1 symbols 2 none 2 Parameters: Name Type Mandatory Description symbol STRING NO Query price for a single symbol symbols ARRAY of STRING Query price for multiple symbols Notes: symbol and symbols cannot be used together. If no symbol is specified, returns information about all symbols currently trading on the exchange. Data Source: Memory Response: { \"id\": \"043a7cf2-bde3-4888-9604-c8ac41fcba4d\", \"status\": 200, \"result\": { \"symbol\": \"BNBBTC\", \"price\": \"0.01361900\" }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } If more than one symbol is requested, response returns an array: { \"id\": \"e739e673-24c8-4adf-9cfa-b81f30330b09\", \"status\": 200, \"result\": [ { \"symbol\": \"BNBBTC\", \"price\": \"0.01363700\" }, { \"symbol\": \"BTCUSDT\", \"price\": \"24267.15000000\" }, { \"symbol\": \"BNBBUSD\", \"price\": \"331.10000000\" } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2 } ] } Symbol order book ticker { \"id\": \"057deb3a-2990-41d1-b58b-98ea0f09e1b4\", \"method\": \"ticker.book\", \"params\": { \"symbols\": [ \"BNBBTC\", \"BTCUSDT\" ] } } Get the current best price and quantity on the order book. If you need access to real-time order book ticker updates, please consider using WebSocket Streams: <symbol>@bookTicker Weight: Adjusted based on the number of requested symbols: Parameter Weight symbol 1 symbols 2 none 2 Parameters: Name Type Mandatory Description symbol STRING NO Query ticker for a single symbol symbols ARRAY of STRING Query ticker for multiple symbols Notes: symbol and symbols cannot be used together. If no symbol is specified, returns information about all symbols currently trading on the exchange. Data Source: Memory Response: { \"id\": \"9d32157c-a556-4d27-9866-66760a174b57\", \"status\": 200, \"result\": { \"symbol\": \"BNBBTC\", \"bidPrice\": \"0.01358000\", \"bidQty\": \"12.53400000\", \"askPrice\": \"0.01358100\", \"askQty\": \"17.83700000\" }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } If more than one symbol is requested, response returns an array: { \"id\": \"057deb3a-2990-41d1-b58b-98ea0f09e1b4\", \"status\": 200, \"result\": [ { \"symbol\": \"BNBBTC\", \"bidPrice\": \"0.01358000\", \"bidQty\": \"12.53400000\", \"askPrice\": \"0.01358100\", \"askQty\": \"17.83700000\" }, { \"symbol\": \"BTCUSDT\", \"bidPrice\": \"23980.49000000\", \"bidQty\": \"0.01000000\", \"askPrice\": \"23981.31000000\", \"askQty\": \"0.01512000\" } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2 } ] } Trading requests Place new order (TRADE) { \"id\": \"56374a46-3061-486b-a311-99ee972eb648\", \"method\": \"order.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"price\": \"23416.10000000\", \"quantity\": \"0.00847000\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"15af09e41c36f3cc61378c2fbe2c33719a03dd5eba8d0f9206fbda44de717c88\", \"timestamp\": 1660801715431 } } Send in a new order. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES side ENUM YES BUY or SELL type ENUM YES timeInForce ENUM NO * price DECIMAL NO * quantity DECIMAL NO * quoteOrderQty DECIMAL NO * newClientOrderId STRING NO Arbitrary unique ID among open orders. Automatically generated if not sent newOrderRespType ENUM NO Select response format: ACK , RESULT , FULL . MARKET and LIMIT orders use FULL by default, other order types default to ACK . stopPrice DECIMAL NO * trailingDelta INT NO * See Trailing Stop order FAQ icebergQty DECIMAL NO strategyId INT NO Arbitrary numeric value identifying the order within an order strategy. strategyType INT NO Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used. selfTradePreventionMode ENUM NO The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER , EXPIRE_MAKER , EXPIRE_BOTH , NONE . apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Certain parameters (*) become mandatory based on the order type : Order type Mandatory parameters LIMIT timeInForce price quantity LIMIT_MAKER price quantity MARKET quantity or quoteOrderQty STOP_LOSS quantity stopPrice or trailingDelta STOP_LOSS_LIMIT timeInForce price quantity stopPrice or trailingDelta TAKE_PROFIT quantity stopPrice or trailingDelta TAKE_PROFIT_LIMIT timeInForce price quantity stopPrice or trailingDelta Supported order types: Order type Description LIMIT Buy or sell quantity at the specified price or better. LIMIT_MAKER LIMIT order that will be rejected if it immediately matches and trades as a taker. This order type is also known as a POST-ONLY order. MARKET Buy or sell at the best available market price. MARKET order with quantity parameter specifies the amount of the base asset you want to buy or sell. Actually executed quantity of the quote asset will be determined by available market liquidity. E.g., a MARKET BUY order on BTCUSDT for \"quantity\": \"0.1000\" specifies that you want to buy 0.1 BTC at the best available price. If there is not enough BTC at the best price, keep buying at the next best price, until either your order is filled, or you run out of USDT, or market runs out of BTC. MARKET order with quoteOrderQty parameter specifies the amount of the quote asset you want to spend (when buying) or receive (when selling). Actually executed quantity of the base asset will be determined by available market liquidity. E.g., a MARKET BUY on BTCUSDT for \"quoteOrderQty\": \"100.00\" specifies that you want to buy as much BTC as you can for 100 USDT at the best available price. Similarly, a SELL order will sell as much available BTC as needed for you to receive 100 USDT (before commission). STOP_LOSS Execute a MARKET order for given quantity when specified conditions are met. I.e., when stopPrice is reached, or when trailingDelta is activated. STOP_LOSS_LIMIT Place a LIMIT order with given parameters when specified conditions are met. TAKE_PROFIT Like STOP_LOSS but activates when market price moves in the favorable direction. TAKE_PROFIT_LIMIT Like STOP_LOSS_LIMIT but activates when market price moves in the favorable direction. Available timeInForce options, setting how long the order should be active before expiration: TIF Description GTC Good 'til Canceled \u2013 the order will remain on the book until you cancel it, or the order is completely filled. IOC Immediate or Cancel \u2013 the order will be filled for as much as possible, the unfilled quantity immediately expires. FOK Fill or Kill \u2013 the order will expire unless it cannot be immediately filled for the entire quantity. Notes: newClientOrderId specifies clientOrderId value for the order. A new order with the same clientOrderId is accepted only when the previous one is filled or expired. Any LIMIT or LIMIT_MAKER order can be made into an iceberg order by specifying the icebergQty . An order with an icebergQty must have timeInForce set to GTC . Trigger order price rules for STOP_LOSS / TAKE_PROFIT orders: stopPrice must be above market price: STOP_LOSS BUY , TAKE_PROFIT SELL stopPrice must be below market price: STOP_LOSS SELL , TAKE_PROFIT BUY MARKET orders using quoteOrderQty follow LOT_SIZE filter rules. The order will execute a quantity that has notional value as close as possible to requested quoteOrderQty . Data Source: Matching Engine Response: Response format is selected by using the newOrderRespType parameter. ACK response type: { \"id\": \"56374a46-3061-486b-a311-99ee972eb648\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, // always -1 for singular orders \"clientOrderId\": \"4d96324ff9d44481926157ec08158a40\", \"transactTime\": 1660801715639 }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } RESULT response type: { \"id\": \"56374a46-3061-486b-a311-99ee972eb648\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, // always -1 for singular orders \"clientOrderId\": \"4d96324ff9d44481926157ec08158a40\", \"transactTime\": 1660801715639, \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"23500.00000000\", // present only if stopPrice set for the order \"trailingDelta\": 10, // present only if trailingDelta set for the order \"trailingTime\": -1, // present only if trailingDelta set for the order \"icebergQty\": \"0.00000000\", // present only if icebergQty set for the order \"strategyId\": 37463720, // present only if strategyId set for the order \"strategyType\": 1000000, // present only if strategyType set for the order \"workingTime\": 1660801715639, \"selfTradePreventionMode\": \"NONE\" }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } FULL response type: { \"id\": \"56374a46-3061-486b-a311-99ee972eb648\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, \"clientOrderId\": \"4d96324ff9d44481926157ec08158a40\", \"transactTime\": 1660801715793, \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00847000\", \"cummulativeQuoteQty\": \"198.33521500\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"workingTime\": 1660801715793, // FULL response is identical to RESULT response, with the same optional fields // based on the order type and parameters. FULL response additionally includes // the list of trades which immediately filled the order. \"fills\": [ { \"price\": \"23416.10000000\", \"qty\": \"0.00635000\", \"commission\": \"0.000000\", \"commissionAsset\": \"BNB\", \"tradeId\": 1650422481 }, { \"price\": \"23416.50000000\", \"qty\": \"0.00212000\", \"commission\": \"0.000000\", \"commissionAsset\": \"BNB\", \"tradeId\": 1650422482 } ] }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Test new order (TRADE) { \"id\": \"6ffebe91-01d9-43ac-be99-57cf062e0e30\", \"method\": \"order.test\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"price\": \"23416.10000000\", \"quantity\": \"0.00847000\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"15af09e41c36f3cc61378c2fbe2c33719a03dd5eba8d0f9206fbda44de717c88\", \"timestamp\": 1660801715431 } } Test order placement. Validates new order parameters and verifies your signature but does not send the order into the matching engine. Weight: 1 Parameters: Same as for order.place . Data Source: Memory Response: { \"id\": \"6ffebe91-01d9-43ac-be99-57cf062e0e30\", \"status\": 200, \"result\": {}, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Query order (USER_DATA) { \"id\": \"aa62318a-5a97-4f3b-bdc7-640bbe33b291\", \"method\": \"order.status\", \"params\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"2c3aab5a078ee4ea465ecd95523b77289f61476c2f238ec10c55ea6cb11a6f35\", \"timestamp\": 1660801720951 } } Check execution status of an order. Weight: 2 Parameters: Name Type Mandatory Description symbol STRING YES orderId INT YES Lookup order by orderId origClientOrderId STRING Lookup order by clientOrderId apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: If both orderId and origClientOrderId parameters are specified, only orderId is used and origClientOrderId is ignored. For some historical orders the cummulativeQuoteQty response field may be negative, meaning the data is not available at this time. Data Source: Memory => Database Response: { \"id\": \"aa62318a-5a97-4f3b-bdc7-640bbe33b291\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, // set only for legs of an OCO \"clientOrderId\": \"4d96324ff9d44481926157\", \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00847000\", \"cummulativeQuoteQty\": \"198.33521500\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"0.00000000\", // always present, zero if order type does not use stopPrice \"trailingDelta\": 10, // present only if trailingDelta set for the order \"trailingTime\": -1, // present only if trailingDelta set for the order \"icebergQty\": \"0.00000000\", // always present, zero for non-iceberg orders \"time\": 1660801715639, // time when the order was placed \"updateTime\": 1660801717945, // time of the last update to the order \"isWorking\": true, \"workingTime\": 1660801715639, \"origQuoteOrderQty\": \"0.00000000\" // always present, zero if order type does not use quoteOrderQty \"strategyId\": 37463720, // present only if strategyId set for the order \"strategyType\": 1000000, // present only if strategyType set for the order \"selfTradePreventionMode\": \"NONE\" }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2 } ] } Cancel order (TRADE) { \"id\": \"5633b6a2-90a9-4192-83e7-925c90b6a2fd\", \"method\": \"order.cancel\", \"params\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"4d96324ff9d44481926157\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"33d5b721f278ae17a52f004a82a6f68a70c68e7dd6776ed0be77a455ab855282\", \"timestamp\": 1660801715830 } } Cancel an active order. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES orderId INT YES Cancel order by orderId origClientOrderId STRING Cancel order by clientOrderId newClientOrderId STRING NO New ID for the canceled order. Automatically generated if not sent apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: If both orderId and origClientOrderId parameters are specified, only orderId is used and origClientOrderId is ignored. newClientOrderId will replace clientOrderId of the canceled order, freeing it up for new orders. If you cancel an order that is a part of an OCO pair, the entire OCO is canceled. Data Source: Matching Engine Response: When an individual order is canceled: { \"id\": \"5633b6a2-90a9-4192-83e7-925c90b6a2fd\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"4d96324ff9d44481926157\", // clientOrderId that was canceled \"orderId\": 12569099453, \"orderListId\": -1, // set only for legs of an OCO \"clientOrderId\": \"91fe37ce9e69c90d6358c0\", // newClientOrderId from request \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00001000\", \"cummulativeQuoteQty\": \"0.23416100\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"0.00000000\", // present only if stopPrice set for the order \"trailingDelta\": 0, // present only if trailingDelta set for the order \"icebergQty\": \"0.00000000\", // present only if icebergQty set for the order \"strategyId\": 37463720, // present only if strategyId set for the order \"strategyType\": 1000000, // present only if strategyType set for the order \"selfTradePreventionMode\": \"NONE\" }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } When an OCO is canceled: { \"id\": \"16eaf097-bbec-44b9-96ff-e97e6e875870\", \"status\": 200, \"result\": { \"orderListId\": 19431, \"contingencyType\": \"OCO\", \"listStatusType\": \"ALL_DONE\", \"listOrderStatus\": \"ALL_DONE\", \"listClientOrderId\": \"iuVNVJYYrByz6C4yGOPPK0\", \"transactionTime\": 1660803702431, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"clientOrderId\": \"bX5wROblo6YeDwa9iTLeyY\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099454, \"clientOrderId\": \"Tnu2IP0J5Y4mxw3IATBfmW\" } ], // OCO leg status format is the same as for individual orders. \"orderReports\": [ { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"bX5wROblo6YeDwa9iTLeyY\", \"orderId\": 12569099453, \"orderListId\": 19431, \"clientOrderId\": \"OFFXQtxVFZ6Nbcg4PgE2DA\", \"price\": \"23450.50000000\", \"origQty\": \"0.00850000\" \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS_LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"23430.00000000\", \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"Tnu2IP0J5Y4mxw3IATBfmW\", \"orderId\": 12569099454, \"orderListId\": 19431, \"clientOrderId\": \"OFFXQtxVFZ6Nbcg4PgE2DA\", \"price\": \"23400.00000000\", \"origQty\": \"0.00850000\" \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"BUY\", \"selfTradePreventionMode\": \"NONE\" } ] }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Cancel and replace order (TRADE) { \"id\": \"99de1036-b5e2-4e0f-9b5c-13d751c93a1a\", \"method\": \"order.cancelReplace\", \"params\": { \"symbol\": \"BTCUSDT\", \"cancelReplaceMode\": \"ALLOW_FAILURE\", \"cancelOrigClientOrderId\": \"4d96324ff9d44481926157\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"price\": \"23416.10000000\", \"quantity\": \"0.00847000\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"7028fdc187868754d25e42c37ccfa5ba2bab1d180ad55d4c3a7e2de643943dc5\", \"timestamp\": 1660813156900 } } Cancel an existing order and immediately place a new order instead of the canceled one. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES cancelReplaceMode ENUM YES cancelOrderId INT YES Cancel order by orderId cancelOrigClientOrderId STRING Cancel order by clientOrderId cancelNewClientOrderId STRING NO New ID for the canceled order. Automatically generated if not sent side ENUM YES BUY or SELL type ENUM YES timeInForce ENUM NO * price DECIMAL NO * quantity DECIMAL NO * quoteOrderQty DECIMAL NO * newClientOrderId STRING NO Arbitrary unique ID among open orders. Automatically generated if not sent newOrderRespType ENUM NO Select response format: ACK , RESULT , FULL . MARKET and LIMIT orders produce FULL response by default, other order types default to ACK . stopPrice DECIMAL NO * trailingDelta DECIMAL NO * See Trailing Stop order FAQ icebergQty DECIMAL NO strategyId INT NO Arbitrary numeric value identifying the order within an order strategy. strategyType INT NO Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used. selfTradePreventionMode ENUM NO The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER , EXPIRE_MAKER , EXPIRE_BOTH , NONE . apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Similar to the order.place request, additional mandatory parameters (*) are determined by the new order type . Available cancelReplaceMode options: STOP_ON_FAILURE \u2013 if cancellation request fails, new order placement will not be attempted ALLOW_FAILURE \u2013 new order placement will be attempted even if the cancel request fails Request Response cancelReplaceMode cancelResult newOrderResult status STOP_ON_FAILURE \u2705 SUCCESS \u2705 SUCCESS 200 \u274c FAILURE \u2796 NOT_ATTEMPTED 400 \u2705 SUCCESS \u274c FAILURE 409 ALLOW_FAILURE \u2705 SUCCESS \u2705 SUCCESS 200 \u274c FAILURE \u274c FAILURE 400 \u274c FAILURE \u2705 SUCCESS 409 \u2705 SUCCESS \u274c FAILURE 409 Notes: If both cancelOrderId and cancelOrigClientOrderId parameters are specified, only cancelOrderId is used and cancelOrigClientOrderId is ignored. cancelNewClientOrderId will replace clientOrderId of the canceled order, freeing it up for new orders. newClientOrderId specifies clientOrderId value for the placed order. A new order with the same clientOrderId is accepted only when the previous one is filled or expired. The new order can reuse old clientOrderId of the canceled order. This cancel-replace operation is not transactional . If one operation succeeds but the other one fails, the successful operation is still executed. For example, in STOP_ON_FAILURE mode, if the new order placement fails, the old order is still canceled. Filters and order count limits are evaluated before cancellation and order placement occurs. If new order placement is not attempted, your order count is still incremented. Like order.cancel , if you cancel a leg of an OCO, the entire OCO is canceled. Data Source: Matching Engine Response: If both cancel and placement succeed, you get the following response with \"status\": 200 : { \"id\": \"99de1036-b5e2-4e0f-9b5c-13d751c93a1a\", \"status\": 200, \"result\": { \"cancelResult\": \"SUCCESS\", \"newOrderResult\": \"SUCCESS\", // Format is identical to \"order.cancel\" format. // Some fields are optional and are included only for orders that set them. \"cancelResponse\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"4d96324ff9d44481926157\", // cancelOrigClientOrderId from request \"orderId\": 125690984230, \"orderListId\": -1, \"clientOrderId\": \"91fe37ce9e69c90d6358c0\", // cancelNewClientOrderId from request \"price\": \"23450.00000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00001000\", \"cummulativeQuoteQty\": \"0.23450000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" }, // Format is identical to \"order.place\" format, affected by \"newOrderRespType\". // Some fields are optional and are included only for orders that set them. \"newOrderResponse\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, \"clientOrderId\": \"bX5wROblo6YeDwa9iTLeyY\", // newClientOrderId from request \"transactTime\": 1660813156959, \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" } }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } In STOP_ON_FAILURE mode, failed order cancellation prevents new order from being placed and returns the following response with \"status\": 400 : { \"id\": \"27e1bf9f-0539-4fb0-85c6-06183d36f66c\", \"status\": 400, \"error\": { \"code\": -2022, \"msg\": \"Order cancel-replace failed.\", \"data\": { \"cancelResult\": \"FAILURE\", \"newOrderResult\": \"NOT_ATTEMPTED\", \"cancelResponse\": { \"code\": -2011, \"msg\": \"Unknown order sent.\" }, \"newOrderResponse\": null } }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } If cancel-replace mode allows failure and one of the operations fails, you get a response with \"status\": 409 , and the \"data\" field detailing which operation succeeded, which failed, and why: { \"id\": \"b220edfe-f3c4-4a3a-9d13-b35473783a25\", \"status\": 409, \"error\": { \"code\": -2021, \"msg\": \"Order cancel-replace partially failed.\", \"data\": { \"cancelResult\": \"SUCCESS\", \"newOrderResult\": \"FAILURE\", \"cancelResponse\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"4d96324ff9d44481926157\", \"orderId\": 125690984230, \"orderListId\": -1, \"clientOrderId\": \"91fe37ce9e69c90d6358c0\", \"price\": \"23450.00000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00001000\", \"cummulativeQuoteQty\": \"0.23450000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" }, \"newOrderResponse\": { \"code\": -2010, \"msg\": \"Order would immediately match and take.\" } } }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } { \"id\": \"ce641763-ff74-41ac-b9f7-db7cbe5e93b1\", \"status\": 409, \"error\": { \"code\": -2021, \"msg\": \"Order cancel-replace partially failed.\", \"data\": { \"cancelResult\": \"FAILURE\", \"newOrderResult\": \"SUCCESS\", \"cancelResponse\": { \"code\": -2011, \"msg\": \"Unknown order sent.\" }, \"newOrderResponse\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, \"clientOrderId\": \"bX5wROblo6YeDwa9iTLeyY\", \"transactTime\": 1660813156959, \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"workingTime\": 1669693344508, \"fills\": [], \"selfTradePreventionMode\": \"NONE\" } } }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } If both operations fail, response will have \"status\": 400 : { \"id\": \"3b3ac45c-1002-4c7d-88e8-630c408ecd87\", \"status\": 400, \"error\": { \"code\": -2022, \"msg\": \"Order cancel-replace failed.\", \"data\": { \"cancelResult\": \"FAILURE\", \"newOrderResult\": \"FAILURE\", \"cancelResponse\": { \"code\": -2011, \"msg\": \"Unknown order sent.\" }, \"newOrderResponse\": { \"code\": -2010, \"msg\": \"Order would immediately match and take.\" } } }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Current open orders (USER_DATA) { \"id\": \"55f07876-4f6f-4c47-87dc-43e5fff3f2e7\", \"method\": \"openOrders.status\", \"params\": { \"symbol\": \"BTCUSDT\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"d632b3fdb8a81dd44f82c7c901833309dd714fe508772a89b0a35b0ee0c48b89\", \"timestamp\": 1660813156812 } } Query execution status of all open orders. If you need to continuously monitor order status updates, please consider using WebSocket Streams: userDataStream.start request executionReport user data stream event Weight: Adjusted based on the number of requested symbols: Parameter Weight symbol 3 none 40 Parameters: Name Type Mandatory Description symbol STRING NO If omitted, open orders for all symbols are returned apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Data Source: Memory => Database Response: Status reports for open orders are identical to order.status . Note that some fields are optional and included only for orders that set them. Open orders are always returned as a flat list. If all symbols are requested, use the symbol field to tell which symbol the orders belong to. { \"id\": \"55f07876-4f6f-4c47-87dc-43e5fff3f2e7\", \"status\": 200, \"result\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, \"clientOrderId\": \"4d96324ff9d44481926157\", \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00720000\", \"cummulativeQuoteQty\": \"172.43931000\", \"status\": \"PARTIALLY_FILLED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"0.00000000\", \"icebergQty\": \"0.00000000\", \"time\": 1660801715639, \"updateTime\": 1660801717945, \"isWorking\": true, \"workingTime\": 1660801715639, \"origQuoteOrderQty\": \"0.00000000\", \"selfTradePreventionMode\": \"NONE\" } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 3 } ] } Cancel open orders (TRADE) { \"id\": \"778f938f-9041-4b88-9914-efbf64eeacc8\", \"method\": \"openOrders.cancelAll\" \"params\": { \"symbol\": \"BTCUSDT\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"773f01b6e3c2c9e0c1d217bc043ce383c1ddd6f0e25f8d6070f2b66a6ceaf3a5\", \"timestamp\": 1660805557200 } } Cancel all open orders on a symbol, including OCO orders. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Data Source: Matching Engine Response: Cancellation reports for orders and OCOs have the same format as in order.cancel . { \"id\": \"778f938f-9041-4b88-9914-efbf64eeacc8\", \"status\": 200, \"result\": [ { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"4d96324ff9d44481926157\", \"orderId\": 12569099453, \"orderListId\": -1, \"clientOrderId\": \"91fe37ce9e69c90d6358c0\", \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00001000\", \"cummulativeQuoteQty\": \"0.23416100\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"0.00000000\", \"trailingDelta\": 0, \"trailingTime\": -1, \"icebergQty\": \"0.00000000\", \"strategyId\": 37463720, \"strategyType\": 1000000, \"selfTradePreventionMode\": \"NONE\" }, { \"orderListId\": 19431, \"contingencyType\": \"OCO\", \"listStatusType\": \"ALL_DONE\", \"listOrderStatus\": \"ALL_DONE\", \"listClientOrderId\": \"iuVNVJYYrByz6C4yGOPPK0\", \"transactionTime\": 1660803702431, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"clientOrderId\": \"bX5wROblo6YeDwa9iTLeyY\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099454, \"clientOrderId\": \"Tnu2IP0J5Y4mxw3IATBfmW\" } ], \"orderReports\": [ { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"bX5wROblo6YeDwa9iTLeyY\", \"orderId\": 12569099453, \"orderListId\": 19431, \"clientOrderId\": \"OFFXQtxVFZ6Nbcg4PgE2DA\", \"price\": \"23450.50000000\", \"origQty\": \"0.00850000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS_LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"23430.00000000\", \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"Tnu2IP0J5Y4mxw3IATBfmW\", \"orderId\": 12569099454, \"orderListId\": 19431, \"clientOrderId\": \"OFFXQtxVFZ6Nbcg4PgE2DA\", \"price\": \"23400.00000000\", \"origQty\": \"0.00850000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"BUY\", \"selfTradePreventionMode\": \"NONE\" } ] } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Place new OCO (TRADE) { \"id\": \"56374a46-3061-486b-a311-99ee972eb648\", \"method\": \"orderList.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"price\": \"23420.00000000\", \"quantity\": \"0.00650000\", \"stopPrice\": \"23410.00000000\", \"stopLimitPrice\": \"23405.00000000\", \"stopLimitTimeInForce\": \"GTC\", \"newOrderRespType\": \"RESULT\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"6689c2a36a639ff3915c2904871709990ab65f3c7a9ff13857558fd350315c35\", \"timestamp\": 1660801713767 } } Send in a new one-cancels-the-other (OCO) pair: LIMIT_MAKER + STOP_LOSS / STOP_LOSS_LIMIT orders (called legs ), where activation of one order immediately cancels the other. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES side ENUM YES BUY or SELL price DECIMAL YES Price for the limit order quantity DECIMAL YES listClientOrderId STRING NO Arbitrary unique ID among open OCOs. Automatically generated if not sent limitClientOrderId STRING NO Arbitrary unique ID among open orders for the limit order. Automatically generated if not sent limitIcebergQty DECIMAL NO limitStrategyId INT NO Arbitrary numeric value identifying the limit order within an order strategy. limitStrategyType INT NO Arbitrary numeric value identifying the limit order strategy. Values smaller than 1000000 are reserved and cannot be used. stopPrice DECIMAL YES * Either stopPrice or trailingDelta , or both must be specified trailingDelta INT YES * See Trailing Stop order FAQ stopClientOrderId STRING NO Arbitrary unique ID among open orders for the stop order. Automatically generated if not sent stopLimitPrice DECIMAL NO * stopLimitTimeInForce ENUM NO * See order.place for available options stopIcebergQty DECIMAL NO * stopStrategyId INT NO Arbitrary numeric value identifying the stop order within an order strategy. stopStrategyType INT NO Arbitrary numeric value identifying the stop order strategy. Values smaller than 1000000 are reserved and cannot be used. newOrderRespType ENUM NO Select response format: ACK , RESULT , FULL (default) selfTradePreventionMode ENUM NO The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER , EXPIRE_MAKER , EXPIRE_BOTH , NONE . apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: listClientOrderId parameter specifies listClientOrderId for the OCO pair. A new OCO with the same listClientOrderId is accepted only when the previous one is filled or completely expired. listClientOrderId is distinct from clientOrderId of individual orders. limitClientOrderId and stopClientOrderId specify clientOrderId values for both legs of the OCO. A new order with the same clientOrderId is accepted only when the previous one is filled or expired. Price restrictions on the legs: side Price relation BUY price < market price < stopPrice SELL price > market price > stopPrice Both legs have the same quantity . However, you can set different iceberg quantity for individual legs. If stopIcebergQty is used, stopLimitTimeInForce must be GTC . trailingDelta applies only to the STOP_LOSS / STOP_LOSS_LIMIT leg of the OCO. OCO counts as 2 orders against the order rate limit. Data Source: Matching Engine Response: Response format for orderReports is selected using the newOrderRespType parameter. The following example is for RESULT response type. See order.place for more examples. { \"id\": \"57833dc0-e3f2-43fb-ba20-46480973b0aa\", \"status\": 200, \"result\": { \"orderListId\": 1274512, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"08985fedd9ea2cf6b28996\", \"transactionTime\": 1660801713793, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138901, \"clientOrderId\": \"BqtFCj5odMoWtSqGk2X9tU\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138902, \"clientOrderId\": \"jLnZpj5enfMXTuhKB1d0us\" } ], \"orderReports\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138901, \"orderListId\": 1274512, \"clientOrderId\": \"BqtFCj5odMoWtSqGk2X9tU\", \"transactTime\": 1660801713793, \"price\": \"23410.00000000\", \"origQty\": \"0.00650000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS_LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"23405.00000000\", \"workingTime\": -1, \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138902, \"orderListId\": 1274512, \"clientOrderId\": \"jLnZpj5enfMXTuhKB1d0us\", \"transactTime\": 1660801713793, \"price\": \"23420.00000000\", \"origQty\": \"0.00650000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"SELL\", \"workingTime\": 1660801713793, \"selfTradePreventionMode\": \"NONE\" } ] }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 2 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 2 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Query OCO (USER_DATA) { \"id\": \"b53fd5ff-82c7-4a04-bd64-5f9dc42c2100\", \"method\": \"orderList.status\", \"params\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"08985fedd9ea2cf6b28996\" \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"d12f4e8892d46c0ddfbd43d556ff6d818581b3be22a02810c2c20cb719aed6a4\", \"timestamp\": 1660801713965 } } Check execution status of an OCO. For execution status of individual orders, use order.status . Weight: 2 Parameters : Name Type Mandatory Description symbol STRING YES origClientOrderId INT YES Query OCO by listClientOrderId orderListId STRING Query OCO by orderListId apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: origClientOrderId refers to listClientOrderId of the OCO itself. If both origClientOrderId and orderListId parameters are specified, only origClientOrderId is used and orderListId is ignored. Data Source: Database Response: { \"id\": \"b53fd5ff-82c7-4a04-bd64-5f9dc42c2100\", \"status\": 200, \"result\": { \"orderListId\": 1274512, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"08985fedd9ea2cf6b28996\", \"transactionTime\": 1660801713793, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138901, \"clientOrderId\": \"BqtFCj5odMoWtSqGk2X9tU\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138902, \"clientOrderId\": \"jLnZpj5enfMXTuhKB1d0us\" } ] }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2 } ] } Cancel OCO (TRADE) { \"id\": \"c5899911-d3f4-47ae-8835-97da553d27d0\", \"method\": \"orderList.cancel\", \"params\": { \"symbol\": \"BTCUSDT\", \"orderListId\": 1274512, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"4973f4b2fee30bf6d45e4a973e941cc60fdd53c8dd5a25edeac96f5733c0ccee\", \"timestamp\": 1660801720210 } } Cancel an active OCO. Weight : 1 Parameters: Name Type Mandatory Description symbol STRING YES orderListId INT YES Cancel OCO by orderListId listClientOrderId STRING Cancel OCO by listClientId newClientOrderId STRING NO New ID for the canceled OCO. Automatically generated if not sent apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: If both orderListId and listClientOrderId parameters are specified, only orderListId is used and listClientOrderId is ignored. Canceling an individual leg with order.cancel will cancel the entire OCO as well. Data Source: Matching Engine Response: { \"id\": \"c5899911-d3f4-47ae-8835-97da553d27d0\", \"status\": 200, \"result\": { \"orderListId\": 1274512, \"contingencyType\": \"OCO\", \"listStatusType\": \"ALL_DONE\", \"listOrderStatus\": \"ALL_DONE\", \"listClientOrderId\": \"6023531d7edaad348f5aff\", \"transactionTime\": 1660801720215, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138901, \"clientOrderId\": \"BqtFCj5odMoWtSqGk2X9tU\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138902, \"clientOrderId\": \"jLnZpj5enfMXTuhKB1d0us\" } ], \"orderReports\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138901, \"orderListId\": 1274512, \"clientOrderId\": \"BqtFCj5odMoWtSqGk2X9tU\", \"transactTime\": 1660801720215, \"price\": \"23410.00000000\", \"origQty\": \"0.00650000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS_LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"23405.00000000\", \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138902, \"orderListId\": 1274512, \"clientOrderId\": \"jLnZpj5enfMXTuhKB1d0us\", \"transactTime\": 1660801720215, \"price\": \"23420.00000000\", \"origQty\": \"0.00650000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" } ] }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Current open OCOs (USER_DATA) { \"id\": \"3a4437e2-41a3-4c19-897c-9cadc5dce8b6\", \"method\": \"openOrderLists.status\", \"params\": { \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"1bea8b157dd78c3da30359bddcd999e4049749fe50b828e620e12f64e8b433c9\", \"timestamp\": 1660801713831 } } Query execution status of all open OCOs. If you need to continuously monitor order status updates, please consider using WebSocket Streams: userDataStream.start request executionReport user data stream event Weight : 3 Parameters: Name Type Mandatory Description apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Data Source: Database Response: { \"id\": \"3a4437e2-41a3-4c19-897c-9cadc5dce8b6\", \"status\": 200, \"result\": [ { \"orderListId\": 0, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"08985fedd9ea2cf6b28996\", \"transactionTime\": 1660801713793, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 4, \"clientOrderId\": \"CUhLgTXnX5n2c0gWiLpV4d\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 5, \"clientOrderId\": \"1ZqG7bBuYwaF4SU8CwnwHm\" } ] } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 3 } ] } Account requests Account information (USER_DATA) { \"id\": \"605a6d20-6588-4cb9-afa0-b0ab087507ba\", \"method\": \"account.status\", \"params\": { \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"83303b4a136ac1371795f465808367242685a9e3a42b22edb4d977d0696eb45c\", \"timestamp\": 1660801839480 } } Query information about your account. Weight: 10 Parameters: Name Type Mandatory Description apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Data Source: Memory => Database Response: { \"id\": \"605a6d20-6588-4cb9-afa0-b0ab087507ba\", \"status\": 200, \"result\": { \"makerCommission\": 15, \"takerCommission\": 15, \"buyerCommission\": 0, \"sellerCommission\": 0, \"canTrade\": true, \"canWithdraw\": true, \"canDeposit\": true, \"commissionRates\": { \"maker\": \"0.00150000\", \"taker\": \"0.00150000\", \"buyer\": \"0.00000000\", \"seller\": \"0.00000000\" }, \"brokered\": false, \"requireSelfTradePrevention\": false, \"updateTime\": 1660801833000, \"accountType\": \"SPOT\", \"balances\": [ { \"asset\": \"BNB\", \"free\": \"0.00000000\", \"locked\": \"0.00000000\" }, { \"asset\": \"BTC\", \"free\": \"1.3447112\", \"locked\": \"0.08600000\" }, { \"asset\": \"USDT\", \"free\": \"1021.21000000\", \"locked\": \"0.00000000\" } ], \"permissions\": [ \"SPOT\" ] }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 10 } ] } Account order rate limits (USER_DATA) { \"id\": \"d3783d8d-f8d1-4d2c-b8a0-b7596af5a664\", \"method\": \"account.rateLimits.orders\", \"params\": { \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"76289424d6e288f4dc47d167ac824e859dabf78736f4348abbbac848d719eb94\", \"timestamp\": 1660801839500 } } Query your current order rate limit. Weight: 20 Parameters: Name Type Mandatory Description apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Data Source: Memory Response: { \"id\": \"d3783d8d-f8d1-4d2c-b8a0-b7596af5a664\", \"status\": 200, \"result\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 0 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 0 } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 20 } ] } Account order history (USER_DATA) { \"id\": \"734235c2-13d2-4574-be68-723e818c08f3\", \"method\": \"allOrders\", \"params\": { \"symbol\": \"BTCUSDT\", \"startTime\": 1660780800000, \"endTime\": 1660867200000, \"limit\": 5, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"f50a972ba7fad92842187643f6b930802d4e20bce1ba1e788e856e811577bd42\", \"timestamp\": 1661955123341 } } Query information about all your orders \u2013 active, canceled, filled \u2013 filtered by time range. Weight: 10 Parameters: Name Type Mandatory Description symbol STRING YES orderId INT NO Order ID to begin at startTime INT NO endTime INT NO limit INT NO Default 500; max 1000 apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: If startTime and/or endTime are specified, orderId is ignored. Orders are filtered by time of the last execution status update. If orderId is specified, return orders with order ID >= orderId . If no condition is specified, the most recent orders are returned. For some historical orders the cummulativeQuoteQty response field may be negative, meaning the data is not available at this time. Data Source: Database Response: Status reports for orders are identical to order.status . Note that some fields are optional and included only for orders that set them. { \"id\": \"734235c2-13d2-4574-be68-723e818c08f3\", \"status\": 200, \"result\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, \"clientOrderId\": \"4d96324ff9d44481926157\", \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00847000\", \"cummulativeQuoteQty\": \"198.33521500\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"0.00000000\", \"icebergQty\": \"0.00000000\", \"time\": 1660801715639, \"updateTime\": 1660801717945, \"isWorking\": true, \"workingTime\": 1660801715639, \"origQuoteOrderQty\": \"0.00000000\", \"selfTradePreventionMode\": \"NONE\" } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 10 } ] } Account OCO history (USER_DATA) { \"id\": \"8617b7b3-1b3d-4dec-94cd-eefd929b8ceb\", \"method\": \"allOrderLists\", \"params\": { \"startTime\": 1660780800000, \"endTime\": 1660867200000, \"limit\": 5, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"c8e1484db4a4a02d0e84dfa627eb9b8298f07ebf12fcc4eaf86e4a565b2712c2\", \"timestamp\": 1661955123341 } } Query information about all your OCOs, filtered by time range. Weight: 10 Parameters: Name Type Mandatory Description fromId INT NO Order list ID to begin at startTime INT NO endTime INT NO limit INT NO Default 500; max 1000 apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: If startTime and/or endTime are specified, fromId is ignored. OCOs are filtered by transactionTime of the last OCO execution status update. If fromId is specified, return OCOs with order list ID >= fromId . If no condition is specified, the most recent OCOs are returned. Data Source: Database Response: Status reports for OCOs are identical to orderList.status . { \"id\": \"8617b7b3-1b3d-4dec-94cd-eefd929b8ceb\", \"status\": 200, \"result\": [ { \"orderListId\": 1274512, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"08985fedd9ea2cf6b28996\", \"transactionTime\": 1660801713793, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138901, \"clientOrderId\": \"BqtFCj5odMoWtSqGk2X9tU\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138902, \"clientOrderId\": \"jLnZpj5enfMXTuhKB1d0us\" } ] } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 10 } ] } Account trade history (USER_DATA) { \"id\": \"f4ce6a53-a29d-4f70-823b-4ab59391d6e8\", \"method\": \"myTrades\", \"params\": { \"symbol\": \"BTCUSDT\", \"startTime\": 1660780800000, \"endTime\": 1660867200000, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"c5a5ffb79fd4f2e10a92f895d488943a57954edf5933bde3338dfb6ea6d6eefc\", \"timestamp\": 1661955125250 } } Query information about all your trades, filtered by time range. Weight: 10 Parameters: Name Type Mandatory Description symbol STRING YES orderId INT NO startTime INT NO endTime INT NO fromId INT NO First trade ID to query limit INT NO Default 500; max 1000 apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: If fromId is specified, return trades with trade ID >= fromId . If startTime and/or endTime are specified, trades are filtered by execution time ( time ). fromId cannot be used together with startTime and endTime . If orderId is specified, only trades related to that order are returned. startTime and endTime cannot be used together with orderId . If no condition is specified, the most recent trades are returned. Data Source: Memory => Database Response: { \"id\": \"f4ce6a53-a29d-4f70-823b-4ab59391d6e8\", \"status\": 200, \"result\": [ { \"symbol\": \"BTCUSDT\", \"id\": 1650422481, \"orderId\": 12569099453, \"orderListId\": -1, \"price\": \"23416.10000000\", \"qty\": \"0.00635000\", \"quoteQty\": \"148.69223500\", \"commission\": \"0.00000000\", \"commissionAsset\": \"BNB\", \"time\": 1660801715793, \"isBuyer\": false, \"isMaker\": true, \"isBestMatch\": true }, { \"symbol\": \"BTCUSDT\", \"id\": 1650422482, \"orderId\": 12569099453, \"orderListId\": -1, \"price\": \"23416.50000000\", \"qty\": \"0.00212000\", \"quoteQty\": \"49.64298000\", \"commission\": \"0.00000000\", \"commissionAsset\": \"BNB\", \"time\": 1660801715793, \"isBuyer\": false, \"isMaker\": true, \"isBestMatch\": true } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 10 } ] } Account prevented matches (USER_DATA) { \"id\": \"g4ce6a53-a39d-4f71-823b-4ab5r391d6y8\", \"method\": \"myPreventedMatches\", \"params\": { \"symbol\": \"BTCUSDT\", \"orderId\": 35, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"c5a5ffb79fd4f2e10a92f895d488943a57954edf5933bde3338dfb6ea6d6eefc\", \"timestamp\": 1673923281052 } } Displays the list of orders that were expired because of STP trigger. These are the combinations supported: symbol + preventedMatchId symbol + orderId symbol + orderId + fromPreventedMatchId ( limit will default to 500) symbol + orderId + fromPreventedMatchId + limit Parameters: Name Type Mandatory Description symbol STRING YES preventedMatchId LONG NO orderId LONG NO fromPreventedMatchId LONG NO limit INT NO Default: 500 ; Max: 1000 recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Weight Case Weight If symbol is invalid 1 Querying by preventedMatchId 1 Querying by orderId 10 Data Source: Database Response: { \"id\": \"g4ce6a53-a39d-4f71-823b-4ab5r391d6y8\", \"status\": 200, \"result\": [ { \"symbol\": \"BTCUSDT\", \"preventedMatchId\": 1, \"takerOrderId\": 5, \"makerOrderId\": 3, \"tradeGroupId\": 1, \"selfTradePreventionMode\": \"EXPIRE_MAKER\", \"price\": \"1.100000\", \"makerPreventedQuantity\": \"1.300000\", \"transactTime\": 1669101687094 } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 10 } ] } User Data Stream requests The following requests manage User Data Stream subscriptions. Note: The user data can ONLY be retrieved by a separate Websocket connection via the User Data Streams url (i.e. wss://stream.binance.com:443 ). Start user data stream (USER_STREAM) { \"id\": \"d3df8a61-98ea-4fe0-8f4e-0fcea5d418b0\", \"method\": \"userDataStream.start\", \"params\": { \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" } } Start a new user data stream. Note: the stream will close in 60 minutes unless userDataStream.ping requests are sent regularly. Weight: 1 Parameters: Name Type Mandatory Description apiKey STRING YES Data Source: Memory Response: Subscribe to the received listen key on WebSocket Stream afterwards. { \"id\": \"d3df8a61-98ea-4fe0-8f4e-0fcea5d418b0\", \"status\": 200, \"result\": { \"listenKey\": \"xs0mRXdAKlIPDRFrlPcw0qI41Eh3ixNntmymGyhrhgqo7L6FuLaWArTD7RLP\" }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Ping user data stream (USER_STREAM) { \"id\": \"815d5fce-0880-4287-a567-80badf004c74\", \"method\": \"userDataStream.ping\", \"params\": { \"listenKey\": \"xs0mRXdAKlIPDRFrlPcw0qI41Eh3ixNntmymGyhrhgqo7L6FuLaWArTD7RLP\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" } } Ping a user data stream to keep it alive. User data streams close automatically after 60 minutes, even if you're listening to them on WebSocket Streams. In order to keep the stream open, you have to regularly send pings using the userDataStream.ping request. It is recommended to send a ping once every 30 minutes. Weight: 1 Parameters: Name Type Mandatory Description listenKey STRING YES apiKey STRING YES Data Source: Memory Response: { \"id\": \"815d5fce-0880-4287-a567-80badf004c74\", \"status\": 200, \"response\": {}, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } Stop user data stream (USER_STREAM) { \"id\": \"819e1b1b-8c06-485b-a13e-131326c69599\", \"method\": \"userDataStream.stop\", \"params\": { \"listenKey\": \"xs0mRXdAKlIPDRFrlPcw0qI41Eh3ixNntmymGyhrhgqo7L6FuLaWArTD7RLP\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" } } Explicitly stop and close the user data stream. Weight: 1 Parameters: Name Type Mandatory Description listenKey STRING YES apiKey STRING YES Data Source: Memory Response: { \"id\": \"819e1b1b-8c06-485b-a13e-131326c69599\", \"status\": 200, \"response\": {}, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Websocket Api"},{"location":"web-socket-api/#public-websocket-api-for-binance-2023-01-18","text":"","title":"Public WebSocket API for Binance (2023-01-18)"},{"location":"web-socket-api/#general-api-information","text":"The base endpoint is: wss://ws-api.binance.com:443/ws-api/v3 If you experience issues with the standard 443 port, alternative port 9443 is also available. The base endpoint for testnet is: wss://testnet.binance.vision/ws-api/v3 A single connection to the API is only valid for 24 hours; expect to be disconnected after the 24-hour mark. WebSocket server will send a ping frame every 3 minutes. If the server does not receive a pong frame response within 10 minutes, you will be disconnected. Unsolicited pong frames are allowed and will prevent disconnection. Lists are returned in chronological order , unless noted otherwise. All timestamps are in milliseconds in UTC, unless noted otherwise. All field names and values are case-sensitive , unless noted otherwise.","title":"General API Information"},{"location":"web-socket-api/#request-format","text":"Requests must be sent as JSON in text frames , one request per frame. Example of request: { \"id\": \"e2a85d9f-07a5-4f94-8d5f-789dc3deb097\", \"method\": \"order.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"BUY\", \"type\": \"LIMIT\", \"price\": \"0.1\", \"quantity\": \"10\", \"timeInForce\": \"GTC\", \"timestamp\": 1655716096498, \"apiKey\": \"T59MTDLWlpRW16JVeZ2Nju5A5C98WkMm8CSzWC4oqynUlTm1zXOxyauT8LmwXEv9\", \"signature\": \"5942ad337e6779f2f4c62cd1c26dba71c91514400a24990a3e7f5edec9323f90\" } } Request fields: Name Type Mandatory Description id INT / STRING / null YES Arbitrary ID used to match responses to requests method STRING YES Request method name params OBJECT NO Request parameters. May be omitted if there are no parameters Request id is truly arbitrary. You can use UUIDs, sequential IDs, current timestamp, etc. The server does not interpret id in any way, simply echoing it back in the response. You can freely reuse IDs within a session. However, be careful to not send more than one request at a time with the same ID, since otherwise it might be impossible to tell the responses apart. Request method names may be prefixed with explicit version: e.g., \"v3/order.place\" . The order of params is not significant.","title":"Request format"},{"location":"web-socket-api/#response-format","text":"Responses are returned as JSON in text frames , one response per frame. Example of successful response: { \"id\": \"e2a85d9f-07a5-4f94-8d5f-789dc3deb097\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12510053279, \"orderListId\": -1, \"clientOrderId\": \"a097fe6304b20a7e4fc436\", \"transactTime\": 1655716096505, \"price\": \"0.10000000\", \"origQty\": \"10.00000000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"workingTime\": 1655716096505, \"selfTradePreventionMode\": \"NONE\" }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 12 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 4043 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 321 } ] } Example of failed response: { \"id\": \"e2a85d9f-07a5-4f94-8d5f-789dc3deb097\", \"status\": 400, \"error\": { \"code\": -2010, \"msg\": \"Account has insufficient balance for requested action.\" }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 13 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 4044 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 322 } ] } Response fields: Name Type Mandatory Description id INT / STRING / null YES Same as in the original request status INT YES Response status. See Status codes result OBJECT / ARRAY YES Response content. Present if request succeeded error OBJECT Error description. Present if request failed rateLimits ARRAY NO Rate limiting status. See Rate limits","title":"Response format"},{"location":"web-socket-api/#status-codes","text":"Status codes in the status field are the same as in HTTP. Here are some common status codes that you might encounter: 200 indicates a successful response. 4XX status codes indicate invalid requests; the issue is on your side. 400 \u2013 your request failed, see error for the reason. 403 \u2013 you have been blocked by the Web Application Firewall. 409 \u2013 your request partially failed but also partially succeeded, see error for details. 418 \u2013 you have been auto-banned for repeated violation of rate limits. 429 \u2013 you have exceeded API request rate limit, please slow down. 5XX status codes indicate internal errors; the issue is on Binance's side. Important: If a response contains 5xx status code, it does not necessarily mean that your request has failed. Execution status is unknown and the request might have actually succeeded. Please use query methods to confirm the status. You might also want to establish a new WebSocket connection for that. See Error codes for Binance for a list of error codes and messages.","title":"Status codes"},{"location":"web-socket-api/#rate-limits","text":"","title":"Rate limits"},{"location":"web-socket-api/#general-information-on-rate-limits","text":"Current API rate limits can be queried using the exchangeInfo request. There are multiple rate limit types across multiple intervals. Responses can indicate current rate limit status in the optional rateLimits field. Requests fail with status 429 when rate limits are violated.","title":"General information on rate limits"},{"location":"web-socket-api/#how-to-interpret-rate-limits","text":"A response with rate limit status may look like this: { \"id\": \"7069b743-f477-4ae3-81db-db9b8df085d2\", \"status\": 200, \"result\": { \"serverTime\": 1656400526260 }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 70 } ] } The rateLimits array describes all currently active rate limits affected by the request. Name Type Mandatory Description rateLimitType ENUM YES Rate limit type: REQUEST_WEIGHT , ORDERS interval ENUM YES Rate limit interval: SECOND , MINUTE , HOUR , DAY intervalNum INT YES Rate limit interval multiplier limit INT YES Request limit per interval count INT YES Current usage per interval Rate limits are accounted by intervals. For example, a 1 MINUTE interval starts every minute. Request submitted at 00:01:23.456 counts towards the 00:01:00 minute's limit. Once the 00:02:00 minute starts, the count will reset to zero again. Other intervals behave in a similar manner. For example, 1 DAY rate limit resets at 00:00 UTC every day, and 10 SECOND interval resets at 00, 10, 20... seconds of each minute. APIs have multiple rate-limiting intervals. If you exhaust a shorter interval but the longer interval still allows requests, you will have to wait for the shorter interval to expire and reset. If you exhaust a longer interval, you will have to wait for that interval to reset, even if shorter rate limit count is zero.","title":"How to interpret rate limits"},{"location":"web-socket-api/#how-to-showhide-rate-limit-information","text":"rateLimits field is included with every response by default. However, rate limit information can be quite bulky. If you are not interested in detailed rate limit status of every request, the rateLimits field can be omitted from responses to reduce their size. Optional returnRateLimits boolean parameter in request. Use returnRateLimits parameter to control whether to include rateLimits fields in response to individual requests. Default request and response: json {\"id\":1,\"method\":\"time\"} json {\"id\":1,\"status\":200,\"result\":{\"serverTime\":1656400526260},\"rateLimits\":[{\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200,\"count\":70}]} Request and response without rate limit status: json {\"id\":2,\"method\":\"time\",\"params\":{\"returnRateLimits\":false}} json {\"id\":2,\"status\":200,\"result\":{\"serverTime\":1656400527891}} Optional returnRateLimits boolean parameter in connection URL. If you wish to omit rateLimits from all responses by default, use returnRateLimits parameter in the query string instead: wss://ws-api.binance.com/ws-api/v3?returnRateLimits=false This will make all requests made through this connection behave as if you have passed \"returnRateLimits\": false . If you want to see rate limits for a particular request, you need to explicitly pass the \"returnRateLimits\": true parameter. Note: Your requests are still rate limited if you hide the rateLimits field in responses.","title":"How to show/hide rate limit information"},{"location":"web-socket-api/#ip-limits","text":"Every request has a certain weight , added to your limit as you perform requests. Most requests cost 1 unit of weight, heavier requests acting on multiple symbols cost more. Connecting to WebSocket API costs 1 weight. Current weight usage is indicated by the REQUEST_WEIGHT rate limit type. Use the exchangeInfo request to keep track of the current weight limits. Weight is accumulated per IP address and is shared by all connections from that address. If you go over the weight limit, requests fail with status 429 . This status code indicates you should back off and stop spamming the API. Rate-limited responses include a retryAfter field, indicating when you can retry the request. Repeatedly violating rate limits and/or failing to back off after receiving 429s will result in an automated IP ban. Requests from a banned IP address fail with status 418 . retryAfter field indicates the timestamp when the ban will be lifted. IP bans are tracked and scale in duration for repeat offenders, from 2 minutes to 3 days . Successful response indicating that in 1 minute you have used 70 weight out of your 1200 limit: { \"id\": \"7069b743-f477-4ae3-81db-db9b8df085d2\", \"status\": 200, \"result\": [], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 70 } ] } Failed response indicating that you are banned and the ban will last until epoch 1659146400000 : { \"id\": \"fc93a61a-a192-4cf4-bb2a-a8f0f0c51e06\", \"status\": 418, \"error\": { \"code\": -1003, \"msg\": \"Way too much request weight used; IP banned until 1659146400000. Please use WebSocket Streams for live updates to avoid bans.\", \"data\": { \"serverTime\": 1659142907531, \"retryAfter\": 1659146400000 } }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2411 } ] }","title":"IP limits"},{"location":"web-socket-api/#order-rate-limits","text":"Every request to place an order counts towards your order limit . Successfully placed orders update the ORDERS rate limit type. Rejected or unsuccessful orders might or might not update the ORDERS count. Use the account.rateLimits.orders request to keep track of the current order rate limits. Order rate limit is maintained per account and is shared by all API keys of the account. If you go over the order rate limit, requests fail with status 429 . This status code indicates you should back off and stop spamming the API. Rate-limited responses include a retryAfter field, indicating when you can retry the request. Successful response indicating that you have placed 12 orders in 10 seconds, and 4043 orders in the past 24 hours: { \"id\": \"e2a85d9f-07a5-4f94-8d5f-789dc3deb097\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12510053279, \"orderListId\": -1, \"clientOrderId\": \"a097fe6304b20a7e4fc436\", \"transactTime\": 1655716096505, \"price\": \"0.10000000\", \"origQty\": \"10.00000000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"workingTime\": 1655716096505, \"selfTradePreventionMode\": \"NONE\" }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 12 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 4043 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 321 } ] }","title":"Order rate limits"},{"location":"web-socket-api/#request-security","text":"Every method has a security type which determines how to call it. Security type is stated next to the method name. For example, Place new order (TRADE) . If no security type is stated, the security type is NONE. Security type API key Signature Description NONE Public market data TRADE required required Trading on the exchange, placing and canceling orders USER_DATA required required Private account information, such as order status and your trading history USER_STREAM required Managing User Data Stream subscriptions MARKET_DATA required Historical market data access Secure methods require a valid API key to be specified and authenticated. API keys can be created on the API Management page of your Binance account. Both API key and secret key are sensitive. Never share them with anyone. If you notice unusual activity in your account, immediately revoke all the keys and contact Binance support. API keys can be configured to allow access only to certain types of secure methods. For example, you can have an API key with TRADE permission for trading, while using a separate API key with USER_DATA permission to monitor your order status. By default, an API key cannot TRADE . You need to enable trading in API Management first. TRADE and USER_DATA requests are also known as SIGNED requests.","title":"Request security"},{"location":"web-socket-api/#signed-trade-and-user_data-request-security","text":"SIGNED requests require an additional parameter: signature , authorizing the request. Please consult SIGNED request example (HMAC) and SIGNED request example (RSA) on how to compute signature.","title":"SIGNED (TRADE and USER_DATA) request security"},{"location":"web-socket-api/#timing-security","text":"SIGNED requests also require a timestamp parameter which should be the current millisecond timestamp. An additional optional parameter, recvWindow , specifies for how long the request stays valid. If recvWindow is not sent, it defaults to 5000 milliseconds . Maximum recvWindow is 60000 milliseconds. Request processing logic is as follows: javascript if (timestamp < (serverTime + 1000) && (serverTime - timestamp) <= recvWindow) { // process request } else { // reject request } Serious trading is about timing. Networks can be unstable and unreliable, which can lead to requests taking varying amounts of time to reach the servers. With recvWindow , you can specify that the request must be processed within a certain number of milliseconds or be rejected by the server. It is recommended to use a small recvWindow of 5000 or less!","title":"Timing security"},{"location":"web-socket-api/#signed-request-example-hmac","text":"Here is a step-by-step guide on how to sign requests using HMAC secret key. Example API key and secret key: Key Value apiKey vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A secretKey NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j WARNING: DO NOT SHARE YOUR API KEY AND SECRET KEY WITH ANYONE. The example keys are provided here only for illustrative purposes. Example of request: { \"id\": \"4885f793-e5ad-4c3b-8f6c-55d891472b71\", \"method\": \"order.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"quantity\": \"0.01000000\", \"price\": \"52000.00\", \"newOrderRespType\": \"ACK\", \"recvWindow\": 100, \"timestamp\": 1645423376532, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"------ FILL ME ------\" } } As you can see, the signature parameter is currently missing. Step 1. Construct the signature payload Take all request params except for the signature , sort them by name in alphabetical order: Parameter Value apiKey vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A newOrderRespType ACK price 52000.00 quantity 0.01000000 recvWindow 100 side SELL symbol BTCUSDT timeInForce GTC timestamp 1645423376532 type LIMIT Format parameters as parameter=value pairs separated by & . Resulting signature payload: apiKey=vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A&newOrderRespType=ACK&price=52000.00&quantity=0.01000000&recvWindow=100&side=SELL&symbol=BTCUSDT&timeInForce=GTC&timestamp=1645423376532&type=LIMIT Step 2. Compute the signature Interpret secretKey as ASCII data, using it as a key for HMAC-SHA-256. Sign signature payload as ASCII data. Encode HMAC-SHA-256 output as a hex string. Note that apiKey , secretKey , and the payload are case-sensitive , while resulting signature value is case-insensitive. You can cross-check your signature algorithm implementation with OpenSSL: $ echo -n 'apiKey=vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A&newOrderRespType=ACK&price=52000.00&quantity=0.01000000&recvWindow=100&side=SELL&symbol=BTCUSDT&timeInForce=GTC&timestamp=1645423376532&type=LIMIT' \\ | openssl dgst -hex -sha256 -hmac 'NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j' cc15477742bd704c29492d96c7ead9414dfd8e0ec4a00f947bb5bb454ddbd08a Step 3. Add signature to request params Finally, complete the request by adding the signature parameter with the signature string. { \"id\": \"4885f793-e5ad-4c3b-8f6c-55d891472b71\", \"method\": \"order.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"quantity\": \"0.01000000\", \"price\": \"52000.00\", \"newOrderRespType\": \"ACK\", \"recvWindow\": 100, \"timestamp\": 1645423376532, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"cc15477742bd704c29492d96c7ead9414dfd8e0ec4a00f947bb5bb454ddbd08a\" } }","title":"SIGNED request example (HMAC)"},{"location":"web-socket-api/#signed-request-example-rsa","text":"Here is a step-by-step guide on how to sign requests using your RSA private key. Key Value apiKey CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ In this example, we assume the private key is stored in the test-prv-key.pem file. WARNING: DO NOT SHARE YOUR API KEY AND PRIVATE KEY WITH ANYONE. The example keys are provided here only for illustrative purposes. Example of request: { \"id\": \"4885f793-e5ad-4c3b-8f6c-55d891472b71\", \"method\": \"order.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"quantity\": \"0.01000000\", \"price\": \"52000.00\", \"newOrderRespType\": \"ACK\", \"recvWindow\": 100, \"timestamp\": 1645423376532, \"apiKey\": \"CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ\", \"signature\": \"------ FILL ME ------\" } } Step 1. Construct the signature payload Take all request params except for the signature , sort them by name in alphabetical order: Parameter Value apiKey CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ newOrderRespType ACK price 52000.00 quantity 0.01000000 recvWindow 100 side SELL symbol BTCUSDT timeInForce GTC timestamp 1645423376532 type LIMIT Format parameters as parameter=value pairs separated by & . Resulting signature payload: apiKey=CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ&newOrderRespType=ACK&price=52000.00&quantity=0.01000000&recvWindow=100&side=SELL&symbol=BTCUSDT&timeInForce=GTC&timestamp=1645423376532&type=LIMIT Step 2. Compute the signature Encode signature payload as ASCII data. Sign payload using RSASSA-PKCS1-v1_5 algorithm with SHA-256 hash function. Encode output as base64 string. Note that apiKey , the payload, and the resulting signature are case-sensitive . You can cross-check your signature algorithm implementation with OpenSSL: $ echo -n 'apiKey=CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ&newOrderRespType=ACK&price=52000.00&quantity=0.01000000&recvWindow=100&side=SELL&symbol=BTCUSDT&timeInForce=GTC&timestamp=1645423376532&type=LIMIT' \\ | openssl dgst -sha256 -sign test-prv-key.pem \\ | openssl enc -base64 -A OJJaf8C/3VGrU4ATTR4GiUDqL2FboSE1Qw7UnnoYNfXTXHubIl1iaePGuGyfct4NPu5oVEZCH4Q6ZStfB1w4ssgu0uiB/Bg+fBrRFfVgVaLKBdYHMvT+ljUJzqVaeoThG9oXlduiw8PbS9U8DYAbDvWN3jqZLo4Z2YJbyovyDAvDTr/oC0+vssLqP7NmlNb3fF3Bj7StmOwJvQJTbRAtzxK5PP7OQe+0mbW+D7RqVkUiSswR8qJFWTeSe4nXXNIdZdueYhF/Xf25L+KitJS5IHdIHcKfEw3MQzHFb2ZsGWkjDQwxkwr7Noi0Zaa+gFtxCuatGFm9dFIyx217pmSHtA== Step 3. Add signature to request params Finally, complete the request by adding the signature parameter with the signature string. { \"id\": \"4885f793-e5ad-4c3b-8f6c-55d891472b71\", \"method\": \"order.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"quantity\": \"0.01000000\", \"price\": \"52000.00\", \"newOrderRespType\": \"ACK\", \"recvWindow\": 100, \"timestamp\": 1645423376532, \"apiKey\": \"CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ\", \"signature\": \"OJJaf8C/3VGrU4ATTR4GiUDqL2FboSE1Qw7UnnoYNfXTXHubIl1iaePGuGyfct4NPu5oVEZCH4Q6ZStfB1w4ssgu0uiB/Bg+fBrRFfVgVaLKBdYHMvT+ljUJzqVaeoThG9oXlduiw8PbS9U8DYAbDvWN3jqZLo4Z2YJbyovyDAvDTr/oC0+vssLqP7NmlNb3fF3Bj7StmOwJvQJTbRAtzxK5PP7OQe+0mbW+D7RqVkUiSswR8qJFWTeSe4nXXNIdZdueYhF/Xf25L+KitJS5IHdIHcKfEw3MQzHFb2ZsGWkjDQwxkwr7Noi0Zaa+gFtxCuatGFm9dFIyx217pmSHtA==\" } }","title":"SIGNED request example (RSA)"},{"location":"web-socket-api/#data-sources","text":"The API system is asynchronous. Some delay in the response is normal and expected. Each method has a data source indicating where the data is coming from, and thus how up-to-date it is. Data Source Latency Description Matching Engine lowest The matching engine produces the response directly Memory low Data is fetched from API server's local or external memory cache Database moderate Data is retrieved from the database Some methods have more than one data source (e.g., Memory => Database). This means that the API will look for the latest data in that order: first in the cache, then in the database.","title":"Data sources"},{"location":"web-socket-api/#public-api-requests","text":"","title":"Public API requests"},{"location":"web-socket-api/#terminology","text":"These terms will be used throughout the documentation, so it is recommended especially for new users to read to help their understanding of the API. base asset refers to the asset that is the quantity of a symbol. For the symbol BTCUSDT, BTC would be the base asset . quote asset refers to the asset that is the price of a symbol. For the symbol BTCUSDT, USDT would be the quote asset .","title":"Terminology"},{"location":"web-socket-api/#enum-definitions","text":"Symbol status (status): PRE_TRADING TRADING POST_TRADING END_OF_DAY HALT AUCTION_MATCH BREAK Account and Symbol Permissions (permissions): SPOT MARGIN LEVERAGED TRD_GRP_002 TRD_GRP_003 TRD_GRP_004 TRD_GRP_005 TRD_GRP_006 TRD_GRP_007 Order status (status): Status Description NEW The order has been accepted by the engine. PARTIALLY_FILLED A part of the order has been filled. FILLED The order has been completed. CANCELED The order has been canceled by the user. PENDING_CANCEL Currently unused REJECTED The order was not accepted by the engine and not processed. EXPIRED The order was canceled according to the order type's rules (e.g. LIMIT FOK orders with no fill, LIMIT IOC or MARKET orders that partially fill) or by the exchange, (e.g. orders canceled during liquidation, orders canceled during maintenance) EXPIRED_IN_MATCH The order was canceled by the exchange due to STP trigger. (e.g. an order with EXPIRE_TAKER will match with existing orders on the book with the same account or same tradeGroupId ) OCO Status (listStatusType): Status Description RESPONSE This is used when the ListStatus is responding to a failed action. (E.g. Orderlist placement or cancellation) EXEC_STARTED The order list has been placed or there is an update to the order list status. ALL_DONE The order list has finished executing and thus no longer active. OCO Order Status (listOrderStatus): Status Description EXECUTING Either an order list has been placed or there is an update to the status of the list. ALL_DONE An order list has completed execution and thus no longer active. REJECT The List Status is responding to a failed action either during order placement or order canceled ContingencyType * OCO","title":"ENUM definitions"},{"location":"web-socket-api/#general-requests","text":"","title":"General requests"},{"location":"web-socket-api/#test-connectivity","text":"{ \"id\": \"922bcc6e-9de8-440d-9e84-7c80933a8d0d\", \"method\": \"ping\" } Test connectivity to the WebSocket API. Note: You can use regular WebSocket ping frames to test connectivity as well, WebSocket API will respond with pong frames as soon as possible. ping request along with time is a safe way to test request-response handling in your application. Weight: 1 Parameters: NONE Data Source: Memory Response: { \"id\": \"922bcc6e-9de8-440d-9e84-7c80933a8d0d\", \"status\": 200, \"result\": {}, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Test connectivity"},{"location":"web-socket-api/#check-server-time","text":"{ \"id\": \"187d3cb2-942d-484c-8271-4e2141bbadb1\", \"method\": \"time\" } Test connectivity to the WebSocket API and get the current server time. Weight: 1 Parameters: NONE Data Source: Memory Response: { \"id\": \"187d3cb2-942d-484c-8271-4e2141bbadb1\", \"status\": 200, \"result\": { \"serverTime\": 1656400526260 }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Check server time"},{"location":"web-socket-api/#exchange-information","text":"{ \"id\": \"5494febb-d167-46a2-996d-70533eb4d976\", \"method\": \"exchangeInfo\", \"params\": { \"symbols\": [\"BNBBTC\"] } } Query current exchange trading rules, rate limits, and symbol information. Weight: 10 Parameters: Name Type Mandatory Description symbol STRING NO Describe a single symbol symbols ARRAY of STRING Describe multiple symbols permissions ARRAY of STRING Filter symbols by permissions Notes: Only one of symbol , symbols , permissions parameters can be specified. Without parameters, exchangeInfo displays all symbols with [\"SPOT, \"MARGIN\", \"LEVERAGED\"] permissions. In order to list all active symbols on the exchange, you need to explicitly request all permissions. permissions accepts either a list of permissions, or a single permission name. E.g. \"SPOT\" . Available Permissions Data Source: Memory Response: { \"id\": \"5494febb-d167-46a2-996d-70533eb4d976\", \"status\": 200, \"result\": { \"timezone\": \"UTC\", \"serverTime\": 1655969291181, // Global rate limits. See \"Rate limits\" section. \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", // Rate limit type: REQUEST_WEIGHT, ORDERS, RAW_REQUESTS \"interval\": \"MINUTE\", // Rate limit interval: SECOND, MINUTE, DAY \"intervalNum\": 1, // Rate limit interval multiplier (i.e., \"1 minute\") \"limit\": 1200 // Rate limit per interval }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000 }, { \"rateLimitType\": \"RAW_REQUESTS\", \"interval\": \"MINUTE\", \"intervalNum\": 5, \"limit\": 6100 } ], // Exchange filters are explained on the \"Filters\" page: // https://github.com/binance/binance-spot-api-docs/blob/master/filters.md // All exchange filters are optional. \"exchangeFilters\": [], \"symbols\": [ { \"symbol\": \"BNBBTC\", \"status\": \"TRADING\", \"baseAsset\": \"BNB\", \"baseAssetPrecision\": 8, \"quoteAsset\": \"BTC\", \"quotePrecision\": 8, \"quoteAssetPrecision\": 8, \"baseCommissionPrecision\": 8, \"quoteCommissionPrecision\": 8, \"orderTypes\": [ \"LIMIT\", \"LIMIT_MAKER\", \"MARKET\", \"STOP_LOSS_LIMIT\", \"TAKE_PROFIT_LIMIT\" ], \"icebergAllowed\": true, \"ocoAllowed\": true, \"quoteOrderQtyMarketAllowed\": true, \"allowTrailingStop\": true, \"cancelReplaceAllowed\": true, \"isSpotTradingAllowed\": true, \"isMarginTradingAllowed\": true, // Symbol filters are explained on the \"Filters\" page: // https://github.com/binance/binance-spot-api-docs/blob/master/filters.md // All symbol filters are optional. \"filters\": [ { \"filterType\": \"PRICE_FILTER\", \"minPrice\": \"0.00000100\", \"maxPrice\": \"100000.00000000\", \"tickSize\": \"0.00000100\" }, { \"filterType\": \"LOT_SIZE\", \"minQty\": \"0.00100000\", \"maxQty\": \"100000.00000000\", \"stepSize\": \"0.00100000\" } ], \"permissions\": [ \"SPOT\", \"MARGIN\", \"TRD_GRP_004\" ], \"defaultSelfTradePreventionMode\": \"NONE\", \"allowedSelfTradePreventionModes\": [ \"NONE\" ] } ] }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 10 } ] }","title":"Exchange information"},{"location":"web-socket-api/#market-data-requests","text":"","title":"Market data requests"},{"location":"web-socket-api/#order-book","text":"{ \"id\": \"51e2affb-0aba-4821-ba75-f2625006eb43\", \"method\": \"depth\", \"params\": { \"symbol\": \"BNBBTC\", \"limit\": 5 } } Get current order book. Note that this request returns limited market depth. If you need to continuously monitor order book updates, please consider using WebSocket Streams: <symbol>@depth<levels> <symbol>@depth You can use depth request together with <symbol>@depth streams to maintain a local order book . Weight: Adjusted based on the limit: Limit Weight 1\u2013100 1 101\u2013500 5 501\u20131000 10 1001\u20135000 50 Parameters: Name Type Mandatory Description symbol STRING YES limit INT NO Default 100; max 5000 Data Source: Memory Response: { \"id\": \"51e2affb-0aba-4821-ba75-f2625006eb43\", \"status\": 200, \"result\": { \"lastUpdateId\": 2731179239, // Bid levels are sorted from highest to lowest price. \"bids\": [ [ \"0.01379900\", // Price \"3.43200000\" // Quantity ], [ \"0.01379800\", \"3.24300000\" ], [ \"0.01379700\", \"10.45500000\" ], [ \"0.01379600\", \"3.82100000\" ], [ \"0.01379500\", \"10.26200000\" ] ], // Ask levels are sorted from lowest to highest price. \"asks\": [ [ \"0.01380000\", \"5.91700000\" ], [ \"0.01380100\", \"6.01400000\" ], [ \"0.01380200\", \"0.26800000\" ], [ \"0.01380300\", \"0.33800000\" ], [ \"0.01380400\", \"0.26800000\" ] ] }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Order book"},{"location":"web-socket-api/#recent-trades","text":"{ \"id\": \"409a20bd-253d-41db-a6dd-687862a5882f\", \"method\": \"trades.recent\", \"params\": { \"symbol\": \"BNBBTC\", \"limit\": 1 } } Get recent trades. If you need access to real-time trading activity, please consider using WebSocket Streams: <symbol>@trade Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES limit INT NO Default 500; max 1000 Data Source: Memory Response: { \"id\": \"409a20bd-253d-41db-a6dd-687862a5882f\", \"status\": 200, \"result\": [ { \"id\": 194686783, \"price\": \"0.01361000\", \"qty\": \"0.01400000\", \"quoteQty\": \"0.00019054\", \"time\": 1660009530807, \"isBuyerMaker\": true, \"isBestMatch\": true } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Recent trades"},{"location":"web-socket-api/#historical-trades-market_data","text":"{ \"id\": \"cffc9c7d-4efc-4ce0-b587-6b87448f052a\", \"method\": \"trades.historical\", \"params\": { \"symbol\": \"BNBBTC\", \"fromId\": 0, \"limit\": 1, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" } } Get historical trades. Weight: 5 Parameters: Name Type Mandatory Description symbol STRING YES fromId INT NO Trade ID to begin at limit INT NO Default 500; max 1000 apiKey STRING YES Notes: If fromId is not specified, the most recent trades are returned. Data Source: Database Response: { \"id\": \"cffc9c7d-4efc-4ce0-b587-6b87448f052a\", \"status\": 200, \"result\": [ { \"id\": 0, \"price\": \"0.00005000\", \"qty\": \"40.00000000\", \"quoteQty\": \"0.00200000\", \"time\": 1500004800376, \"isBuyerMaker\": true, \"isBestMatch\": true } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 5 } ] }","title":"Historical trades (MARKET_DATA)"},{"location":"web-socket-api/#aggregate-trades","text":"{ \"id\": \"189da436-d4bd-48ca-9f95-9f613d621717\", \"method\": \"trades.aggregate\", \"params\": { \"symbol\": \"BNBBTC\", \"fromId\": 50000000, \"limit\": 1 } } Get aggregate trades. An aggregate trade (aggtrade) represents one or more individual trades. Trades that fill at the same time, from the same taker order, with the same price \u2013 those trades are collected into an aggregate trade with total quantity of the individual trades. If you need access to real-time trading activity, please consider using WebSocket Streams: <symbol>@aggTrade If you need historical aggregate trade data, please consider using data.binance.vision . Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES fromId INT NO Aggregate trade ID to begin at startTime INT NO endTime INT NO limit INT NO Default 500; max 1000 Notes: If fromId is specified, return aggtrades with aggregate trade ID >= fromId . Use fromId and limit to page through all aggtrades. If startTime and/or endTime are specified, aggtrades are filtered by execution time ( T ). fromId cannot be used together with startTime and endTime . If no condition is specified, the most recent aggregate trades are returned. Data Source: Database Response: { \"id\": \"189da436-d4bd-48ca-9f95-9f613d621717\", \"status\": 200, \"result\": [ { \"a\": 50000000, // Aggregate trade ID \"p\": \"0.00274100\", // Price \"q\": \"57.19000000\", // Quantity \"f\": 59120167, // First trade ID \"l\": 59120170, // Last trade ID \"T\": 1565877971222, // Timestamp \"m\": true, // Was the buyer the maker? \"M\": true // Was the trade the best price match? } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Aggregate trades"},{"location":"web-socket-api/#klines","text":"{ \"id\": \"1dbbeb56-8eea-466a-8f6e-86bdcfa2fc0b\", \"method\": \"klines\", \"params\": { \"symbol\": \"BNBBTC\", \"interval\": \"1h\", \"startTime\": 1655969280000, \"limit\": 1 } } Get klines (candlestick bars). Klines are uniquely identified by their open & close time. If you need access to real-time kline updates, please consider using WebSocket Streams: <symbol>@kline_<interval> If you need historical kline data, please consider using data.binance.vision . Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES interval ENUM YES startTime INT NO endTime INT NO limit INT NO Default 500; max 1000 Supported kline intervals (case-sensitive): Interval interval value seconds 1s minutes 1m , 3m , 5m , 15m , 30m hours 1h , 2h , 4h , 6h , 8h , 12h days 1d , 3d weeks 1w months 1M Notes: If startTime , endTime are not specified, the most recent klines are returned. Data Source: Database Response: { \"id\": \"1dbbeb56-8eea-466a-8f6e-86bdcfa2fc0b\", \"status\": 200, \"result\": [ [ 1655971200000, // Kline open time \"0.01086000\", // Open price \"0.01086600\", // High price \"0.01083600\", // Low price \"0.01083800\", // Close price \"2290.53800000\", // Volume 1655974799999, // Kline close time \"24.85074442\", // Quote asset volume 2283, // Number of trades \"1171.64000000\", // Taker buy base asset volume \"12.71225884\", // Taker buy quote asset volume \"0\" // Unused field, ignore ] ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Klines"},{"location":"web-socket-api/#ui-klines","text":"{ \"id\": \"b137468a-fb20-4c06-bd6b-625148eec958\", \"method\": \"uiKlines\", \"params\": { \"symbol\": \"BNBBTC\", \"interval\": \"1h\", \"startTime\": 1655969280000, \"limit\": 1 } } Get klines (candlestick bars) optimized for presentation. This request is similar to klines , having the same parameters and response. uiKlines return modified kline data, optimized for presentation of candlestick charts. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES interval ENUM YES See klines startTime INT NO endTime INT NO limit INT NO Default 500; max 1000 Notes: If startTime , endTime are not specified, the most recent klines are returned. Data Source: Database Response: { \"id\": \"b137468a-fb20-4c06-bd6b-625148eec958\", \"status\": 200, \"result\": [ [ 1655971200000, // Kline open time \"0.01086000\", // Open price \"0.01086600\", // High price \"0.01083600\", // Low price \"0.01083800\", // Close price \"2290.53800000\", // Volume 1655974799999, // Kline close time \"24.85074442\", // Quote asset volume 2283, // Number of trades \"1171.64000000\", // Taker buy base asset volume \"12.71225884\", // Taker buy quote asset volume \"0\" // Unused field, ignore ] ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"UI Klines"},{"location":"web-socket-api/#current-average-price","text":"{ \"id\": \"ddbfb65f-9ebf-42ec-8240-8f0f91de0867\", \"method\": \"avgPrice\", \"params\": { \"symbol\": \"BNBBTC\" } } Get current average price for a symbol. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES Data Source: Memory Response: { \"id\": \"ddbfb65f-9ebf-42ec-8240-8f0f91de0867\", \"status\": 200, \"result\": { \"mins\": 5, // Price averaging interval in minutes \"price\": \"0.01378135\" }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Current average price"},{"location":"web-socket-api/#24hr-ticker-price-change-statistics","text":"{ \"id\": \"93fb61ef-89f8-4d6e-b022-4f035a3fadad\", \"method\": \"ticker.24hr\", \"params\": { \"symbol\": \"BNBBTC\" } } Get 24-hour rolling window price change statistics. If you need to continuously monitor trading statistics, please consider using WebSocket Streams: <symbol>@ticker or !ticker@arr <symbol>@miniTicker or !miniTicker@arr If you need different window sizes, use the ticker request. Weight: Adjusted based on the number of requested symbols: Symbols Weight 1\u201320 1 21\u2013100 20 101 or more 40 all symbols 40 Parameters: Name Type Mandatory Description symbol STRING NO Query ticker for a single symbol symbols ARRAY of STRING Query ticker for multiple symbols type ENUM NO Ticker type: FULL (default) or MINI Notes: symbol and symbols cannot be used together. If no symbol is specified, returns information about all symbols currently trading on the exchange. Data Source: Memory Response: FULL type, for a single symbol: { \"id\": \"93fb61ef-89f8-4d6e-b022-4f035a3fadad\", \"status\": 200, \"result\": { \"symbol\": \"BNBBTC\", \"priceChange\": \"0.00013900\", \"priceChangePercent\": \"1.020\", \"weightedAvgPrice\": \"0.01382453\", \"prevClosePrice\": \"0.01362800\", \"lastPrice\": \"0.01376700\", \"lastQty\": \"1.78800000\", \"bidPrice\": \"0.01376700\", \"bidQty\": \"4.64600000\", \"askPrice\": \"0.01376800\", \"askQty\": \"14.31400000\", \"openPrice\": \"0.01362800\", \"highPrice\": \"0.01414900\", \"lowPrice\": \"0.01346600\", \"volume\": \"69412.40500000\", \"quoteVolume\": \"959.59411487\", \"openTime\": 1660014164909, \"closeTime\": 1660100564909, \"firstId\": 194696115, // First trade ID \"lastId\": 194968287, // Last trade ID \"count\": 272173 // Number of trades }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } MINI type, for a single symbol: { \"id\": \"9fa2a91b-3fca-4ed7-a9ad-58e3b67483de\", \"status\": 200, \"result\": { \"symbol\": \"BNBBTC\", \"openPrice\": \"0.01362800\", \"highPrice\": \"0.01414900\", \"lowPrice\": \"0.01346600\", \"lastPrice\": \"0.01376700\", \"volume\": \"69412.40500000\", \"quoteVolume\": \"959.59411487\", \"openTime\": 1660014164909, \"closeTime\": 1660100564909, \"firstId\": 194696115, // First trade ID \"lastId\": 194968287, // Last trade ID \"count\": 272173 // Number of trades }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } If more than one symbol is requested, response returns an array: { \"id\": \"901be0d9-fd3b-45e4-acd6-10c580d03430\", \"status\": 200, \"result\": [ { \"symbol\": \"BNBBTC\", \"priceChange\": \"0.00016500\", \"priceChangePercent\": \"1.213\", \"weightedAvgPrice\": \"0.01382508\", \"prevClosePrice\": \"0.01360800\", \"lastPrice\": \"0.01377200\", \"lastQty\": \"1.01400000\", \"bidPrice\": \"0.01377100\", \"bidQty\": \"7.55700000\", \"askPrice\": \"0.01377200\", \"askQty\": \"4.37900000\", \"openPrice\": \"0.01360700\", \"highPrice\": \"0.01414900\", \"lowPrice\": \"0.01346600\", \"volume\": \"69376.27900000\", \"quoteVolume\": \"959.13277091\", \"openTime\": 1660014615517, \"closeTime\": 1660101015517, \"firstId\": 194697254, \"lastId\": 194969483, \"count\": 272230 }, { \"symbol\": \"BTCUSDT\", \"priceChange\": \"-938.06000000\", \"priceChangePercent\": \"-3.938\", \"weightedAvgPrice\": \"23265.34432003\", \"prevClosePrice\": \"23819.17000000\", \"lastPrice\": \"22880.91000000\", \"lastQty\": \"0.00536000\", \"bidPrice\": \"22880.40000000\", \"bidQty\": \"0.00424000\", \"askPrice\": \"22880.91000000\", \"askQty\": \"0.04276000\", \"openPrice\": \"23818.97000000\", \"highPrice\": \"23933.25000000\", \"lowPrice\": \"22664.69000000\", \"volume\": \"153508.37606000\", \"quoteVolume\": \"3571425225.04441220\", \"openTime\": 1660014615977, \"closeTime\": 1660101015977, \"firstId\": 1592019902, \"lastId\": 1597301762, \"count\": 5281861 } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"24hr ticker price change statistics"},{"location":"web-socket-api/#rolling-window-price-change-statistics","text":"{ \"id\": \"f4b3b507-c8f2-442a-81a6-b2f12daa030f\", \"method\": \"ticker\", \"params\": { \"symbols\": [ \"BNBBTC\", \"BTCUSDT\" ], \"windowSize\": \"7d\" } } Get rolling window price change statistics with a custom window. This request is similar to ticker.24hr , but statistics are computed on demand using the arbitrary window you specify. Note: Window size precision is limited to 1 minute. While the closeTime is the current time of the request, openTime always start on a minute boundary. As such, the effective window might be up to 59999 ms wider than the requested windowSize . Window computation example For example, a request for `\"windowSize\": \"7d\"` might result in the following window: \"openTime\": 1659580020000, \"closeTime\": 1660184865291, Time of the request \u2013 `closeTime` \u2013 is 1660184865291 (August 11, 2022 02:27:45.291). Requested window size should put the `openTime` 7 days before that \u2013 August 4, 02:27:45.291 \u2013 but due to limited precision it ends up a bit earlier: 1659580020000 (August 4, 2022 02:27:00), exactly at the start of a minute. If you need to continuously monitor trading statistics, please consider using WebSocket Streams: <symbol>@ticker_<window_size> or !ticker_<window-size>@arr Weight: Adjusted based on the number of requested symbols: Symbols Weight 1\u201350 2 per symbol 51\u2013100 100 Parameters: Name Type Mandatory Description symbol STRING YES Query ticker of a single symbol symbols ARRAY of STRING Query ticker for multiple symbols type ENUM NO Ticker type: FULL (default) or MINI windowSize ENUM NO Default 1d Supported window sizes: Unit windowSize value minutes 1m , 2m ... 59m hours 1h , 2h ... 23h days 1d , 2d ... 7d Notes: Either symbol or symbols must be specified. Maximum number of symbols in one request: 100. Window size units cannot be combined. E.g., 1d 2h is not supported. Data Source: Database Response: FULL type, for a single symbol: { \"id\": \"f4b3b507-c8f2-442a-81a6-b2f12daa030f\", \"status\": 200, \"result\": { \"symbol\": \"BNBBTC\", \"priceChange\": \"0.00061500\", \"priceChangePercent\": \"4.735\", \"weightedAvgPrice\": \"0.01368242\", \"openPrice\": \"0.01298900\", \"highPrice\": \"0.01418800\", \"lowPrice\": \"0.01296000\", \"lastPrice\": \"0.01360400\", \"volume\": \"587179.23900000\", \"quoteVolume\": \"8034.03382165\", \"openTime\": 1659580020000, \"closeTime\": 1660184865291, \"firstId\": 192977765, // First trade ID \"lastId\": 195365758, // Last trade ID \"count\": 2387994 // Number of trades }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2 } ] } MINI type, for a single symbol: { \"id\": \"bdb7c503-542c-495c-b797-4d2ee2e91173\", \"status\": 200, \"result\": { \"symbol\": \"BNBBTC\", \"openPrice\": \"0.01298900\", \"highPrice\": \"0.01418800\", \"lowPrice\": \"0.01296000\", \"lastPrice\": \"0.01360400\", \"volume\": \"587179.23900000\", \"quoteVolume\": \"8034.03382165\", \"openTime\": 1659580020000, \"closeTime\": 1660184865291, \"firstId\": 192977765, // First trade ID \"lastId\": 195365758, // Last trade ID \"count\": 2387994 // Number of trades }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2 } ] } If more than one symbol is requested, response returns an array: { \"id\": \"f4b3b507-c8f2-442a-81a6-b2f12daa030f\", \"status\": 200, \"result\": [ { \"symbol\": \"BNBBTC\", \"priceChange\": \"0.00061500\", \"priceChangePercent\": \"4.735\", \"weightedAvgPrice\": \"0.01368242\", \"openPrice\": \"0.01298900\", \"highPrice\": \"0.01418800\", \"lowPrice\": \"0.01296000\", \"lastPrice\": \"0.01360400\", \"volume\": \"587169.48600000\", \"quoteVolume\": \"8033.90114517\", \"openTime\": 1659580020000, \"closeTime\": 1660184820927, \"firstId\": 192977765, \"lastId\": 195365700, \"count\": 2387936 }, { \"symbol\": \"BTCUSDT\", \"priceChange\": \"1182.92000000\", \"priceChangePercent\": \"5.113\", \"weightedAvgPrice\": \"23349.27074846\", \"openPrice\": \"23135.33000000\", \"highPrice\": \"24491.22000000\", \"lowPrice\": \"22400.00000000\", \"lastPrice\": \"24318.25000000\", \"volume\": \"1039498.10978000\", \"quoteVolume\": \"24271522807.76838630\", \"openTime\": 1659580020000, \"closeTime\": 1660184820927, \"firstId\": 1568787779, \"lastId\": 1604337406, \"count\": 35549628 } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 4 } ] }","title":"Rolling window price change statistics"},{"location":"web-socket-api/#symbol-price-ticker","text":"{ \"id\": \"043a7cf2-bde3-4888-9604-c8ac41fcba4d\", \"method\": \"ticker.price\", \"params\": { \"symbol\": \"BNBBTC\" } } Get the latest market price for a symbol. If you need access to real-time price updates, please consider using WebSocket Streams: <symbol>@aggTrade <symbol>@trade Weight: Adjusted based on the number of requested symbols: Parameter Weight symbol 1 symbols 2 none 2 Parameters: Name Type Mandatory Description symbol STRING NO Query price for a single symbol symbols ARRAY of STRING Query price for multiple symbols Notes: symbol and symbols cannot be used together. If no symbol is specified, returns information about all symbols currently trading on the exchange. Data Source: Memory Response: { \"id\": \"043a7cf2-bde3-4888-9604-c8ac41fcba4d\", \"status\": 200, \"result\": { \"symbol\": \"BNBBTC\", \"price\": \"0.01361900\" }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } If more than one symbol is requested, response returns an array: { \"id\": \"e739e673-24c8-4adf-9cfa-b81f30330b09\", \"status\": 200, \"result\": [ { \"symbol\": \"BNBBTC\", \"price\": \"0.01363700\" }, { \"symbol\": \"BTCUSDT\", \"price\": \"24267.15000000\" }, { \"symbol\": \"BNBBUSD\", \"price\": \"331.10000000\" } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2 } ] }","title":"Symbol price ticker"},{"location":"web-socket-api/#symbol-order-book-ticker","text":"{ \"id\": \"057deb3a-2990-41d1-b58b-98ea0f09e1b4\", \"method\": \"ticker.book\", \"params\": { \"symbols\": [ \"BNBBTC\", \"BTCUSDT\" ] } } Get the current best price and quantity on the order book. If you need access to real-time order book ticker updates, please consider using WebSocket Streams: <symbol>@bookTicker Weight: Adjusted based on the number of requested symbols: Parameter Weight symbol 1 symbols 2 none 2 Parameters: Name Type Mandatory Description symbol STRING NO Query ticker for a single symbol symbols ARRAY of STRING Query ticker for multiple symbols Notes: symbol and symbols cannot be used together. If no symbol is specified, returns information about all symbols currently trading on the exchange. Data Source: Memory Response: { \"id\": \"9d32157c-a556-4d27-9866-66760a174b57\", \"status\": 200, \"result\": { \"symbol\": \"BNBBTC\", \"bidPrice\": \"0.01358000\", \"bidQty\": \"12.53400000\", \"askPrice\": \"0.01358100\", \"askQty\": \"17.83700000\" }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } If more than one symbol is requested, response returns an array: { \"id\": \"057deb3a-2990-41d1-b58b-98ea0f09e1b4\", \"status\": 200, \"result\": [ { \"symbol\": \"BNBBTC\", \"bidPrice\": \"0.01358000\", \"bidQty\": \"12.53400000\", \"askPrice\": \"0.01358100\", \"askQty\": \"17.83700000\" }, { \"symbol\": \"BTCUSDT\", \"bidPrice\": \"23980.49000000\", \"bidQty\": \"0.01000000\", \"askPrice\": \"23981.31000000\", \"askQty\": \"0.01512000\" } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2 } ] }","title":"Symbol order book ticker"},{"location":"web-socket-api/#trading-requests","text":"","title":"Trading requests"},{"location":"web-socket-api/#place-new-order-trade","text":"{ \"id\": \"56374a46-3061-486b-a311-99ee972eb648\", \"method\": \"order.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"price\": \"23416.10000000\", \"quantity\": \"0.00847000\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"15af09e41c36f3cc61378c2fbe2c33719a03dd5eba8d0f9206fbda44de717c88\", \"timestamp\": 1660801715431 } } Send in a new order. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES side ENUM YES BUY or SELL type ENUM YES timeInForce ENUM NO * price DECIMAL NO * quantity DECIMAL NO * quoteOrderQty DECIMAL NO * newClientOrderId STRING NO Arbitrary unique ID among open orders. Automatically generated if not sent newOrderRespType ENUM NO Select response format: ACK , RESULT , FULL . MARKET and LIMIT orders use FULL by default, other order types default to ACK . stopPrice DECIMAL NO * trailingDelta INT NO * See Trailing Stop order FAQ icebergQty DECIMAL NO strategyId INT NO Arbitrary numeric value identifying the order within an order strategy. strategyType INT NO Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used. selfTradePreventionMode ENUM NO The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER , EXPIRE_MAKER , EXPIRE_BOTH , NONE . apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Certain parameters (*) become mandatory based on the order type : Order type Mandatory parameters LIMIT timeInForce price quantity LIMIT_MAKER price quantity MARKET quantity or quoteOrderQty STOP_LOSS quantity stopPrice or trailingDelta STOP_LOSS_LIMIT timeInForce price quantity stopPrice or trailingDelta TAKE_PROFIT quantity stopPrice or trailingDelta TAKE_PROFIT_LIMIT timeInForce price quantity stopPrice or trailingDelta Supported order types: Order type Description LIMIT Buy or sell quantity at the specified price or better. LIMIT_MAKER LIMIT order that will be rejected if it immediately matches and trades as a taker. This order type is also known as a POST-ONLY order. MARKET Buy or sell at the best available market price. MARKET order with quantity parameter specifies the amount of the base asset you want to buy or sell. Actually executed quantity of the quote asset will be determined by available market liquidity. E.g., a MARKET BUY order on BTCUSDT for \"quantity\": \"0.1000\" specifies that you want to buy 0.1 BTC at the best available price. If there is not enough BTC at the best price, keep buying at the next best price, until either your order is filled, or you run out of USDT, or market runs out of BTC. MARKET order with quoteOrderQty parameter specifies the amount of the quote asset you want to spend (when buying) or receive (when selling). Actually executed quantity of the base asset will be determined by available market liquidity. E.g., a MARKET BUY on BTCUSDT for \"quoteOrderQty\": \"100.00\" specifies that you want to buy as much BTC as you can for 100 USDT at the best available price. Similarly, a SELL order will sell as much available BTC as needed for you to receive 100 USDT (before commission). STOP_LOSS Execute a MARKET order for given quantity when specified conditions are met. I.e., when stopPrice is reached, or when trailingDelta is activated. STOP_LOSS_LIMIT Place a LIMIT order with given parameters when specified conditions are met. TAKE_PROFIT Like STOP_LOSS but activates when market price moves in the favorable direction. TAKE_PROFIT_LIMIT Like STOP_LOSS_LIMIT but activates when market price moves in the favorable direction. Available timeInForce options, setting how long the order should be active before expiration: TIF Description GTC Good 'til Canceled \u2013 the order will remain on the book until you cancel it, or the order is completely filled. IOC Immediate or Cancel \u2013 the order will be filled for as much as possible, the unfilled quantity immediately expires. FOK Fill or Kill \u2013 the order will expire unless it cannot be immediately filled for the entire quantity. Notes: newClientOrderId specifies clientOrderId value for the order. A new order with the same clientOrderId is accepted only when the previous one is filled or expired. Any LIMIT or LIMIT_MAKER order can be made into an iceberg order by specifying the icebergQty . An order with an icebergQty must have timeInForce set to GTC . Trigger order price rules for STOP_LOSS / TAKE_PROFIT orders: stopPrice must be above market price: STOP_LOSS BUY , TAKE_PROFIT SELL stopPrice must be below market price: STOP_LOSS SELL , TAKE_PROFIT BUY MARKET orders using quoteOrderQty follow LOT_SIZE filter rules. The order will execute a quantity that has notional value as close as possible to requested quoteOrderQty . Data Source: Matching Engine Response: Response format is selected by using the newOrderRespType parameter. ACK response type: { \"id\": \"56374a46-3061-486b-a311-99ee972eb648\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, // always -1 for singular orders \"clientOrderId\": \"4d96324ff9d44481926157ec08158a40\", \"transactTime\": 1660801715639 }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } RESULT response type: { \"id\": \"56374a46-3061-486b-a311-99ee972eb648\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, // always -1 for singular orders \"clientOrderId\": \"4d96324ff9d44481926157ec08158a40\", \"transactTime\": 1660801715639, \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"23500.00000000\", // present only if stopPrice set for the order \"trailingDelta\": 10, // present only if trailingDelta set for the order \"trailingTime\": -1, // present only if trailingDelta set for the order \"icebergQty\": \"0.00000000\", // present only if icebergQty set for the order \"strategyId\": 37463720, // present only if strategyId set for the order \"strategyType\": 1000000, // present only if strategyType set for the order \"workingTime\": 1660801715639, \"selfTradePreventionMode\": \"NONE\" }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } FULL response type: { \"id\": \"56374a46-3061-486b-a311-99ee972eb648\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, \"clientOrderId\": \"4d96324ff9d44481926157ec08158a40\", \"transactTime\": 1660801715793, \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00847000\", \"cummulativeQuoteQty\": \"198.33521500\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"workingTime\": 1660801715793, // FULL response is identical to RESULT response, with the same optional fields // based on the order type and parameters. FULL response additionally includes // the list of trades which immediately filled the order. \"fills\": [ { \"price\": \"23416.10000000\", \"qty\": \"0.00635000\", \"commission\": \"0.000000\", \"commissionAsset\": \"BNB\", \"tradeId\": 1650422481 }, { \"price\": \"23416.50000000\", \"qty\": \"0.00212000\", \"commission\": \"0.000000\", \"commissionAsset\": \"BNB\", \"tradeId\": 1650422482 } ] }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Place new order (TRADE)"},{"location":"web-socket-api/#test-new-order-trade","text":"{ \"id\": \"6ffebe91-01d9-43ac-be99-57cf062e0e30\", \"method\": \"order.test\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"price\": \"23416.10000000\", \"quantity\": \"0.00847000\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"15af09e41c36f3cc61378c2fbe2c33719a03dd5eba8d0f9206fbda44de717c88\", \"timestamp\": 1660801715431 } } Test order placement. Validates new order parameters and verifies your signature but does not send the order into the matching engine. Weight: 1 Parameters: Same as for order.place . Data Source: Memory Response: { \"id\": \"6ffebe91-01d9-43ac-be99-57cf062e0e30\", \"status\": 200, \"result\": {}, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Test new order (TRADE)"},{"location":"web-socket-api/#query-order-user_data","text":"{ \"id\": \"aa62318a-5a97-4f3b-bdc7-640bbe33b291\", \"method\": \"order.status\", \"params\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"2c3aab5a078ee4ea465ecd95523b77289f61476c2f238ec10c55ea6cb11a6f35\", \"timestamp\": 1660801720951 } } Check execution status of an order. Weight: 2 Parameters: Name Type Mandatory Description symbol STRING YES orderId INT YES Lookup order by orderId origClientOrderId STRING Lookup order by clientOrderId apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: If both orderId and origClientOrderId parameters are specified, only orderId is used and origClientOrderId is ignored. For some historical orders the cummulativeQuoteQty response field may be negative, meaning the data is not available at this time. Data Source: Memory => Database Response: { \"id\": \"aa62318a-5a97-4f3b-bdc7-640bbe33b291\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, // set only for legs of an OCO \"clientOrderId\": \"4d96324ff9d44481926157\", \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00847000\", \"cummulativeQuoteQty\": \"198.33521500\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"0.00000000\", // always present, zero if order type does not use stopPrice \"trailingDelta\": 10, // present only if trailingDelta set for the order \"trailingTime\": -1, // present only if trailingDelta set for the order \"icebergQty\": \"0.00000000\", // always present, zero for non-iceberg orders \"time\": 1660801715639, // time when the order was placed \"updateTime\": 1660801717945, // time of the last update to the order \"isWorking\": true, \"workingTime\": 1660801715639, \"origQuoteOrderQty\": \"0.00000000\" // always present, zero if order type does not use quoteOrderQty \"strategyId\": 37463720, // present only if strategyId set for the order \"strategyType\": 1000000, // present only if strategyType set for the order \"selfTradePreventionMode\": \"NONE\" }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2 } ] }","title":"Query order (USER_DATA)"},{"location":"web-socket-api/#cancel-order-trade","text":"{ \"id\": \"5633b6a2-90a9-4192-83e7-925c90b6a2fd\", \"method\": \"order.cancel\", \"params\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"4d96324ff9d44481926157\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"33d5b721f278ae17a52f004a82a6f68a70c68e7dd6776ed0be77a455ab855282\", \"timestamp\": 1660801715830 } } Cancel an active order. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES orderId INT YES Cancel order by orderId origClientOrderId STRING Cancel order by clientOrderId newClientOrderId STRING NO New ID for the canceled order. Automatically generated if not sent apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: If both orderId and origClientOrderId parameters are specified, only orderId is used and origClientOrderId is ignored. newClientOrderId will replace clientOrderId of the canceled order, freeing it up for new orders. If you cancel an order that is a part of an OCO pair, the entire OCO is canceled. Data Source: Matching Engine Response: When an individual order is canceled: { \"id\": \"5633b6a2-90a9-4192-83e7-925c90b6a2fd\", \"status\": 200, \"result\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"4d96324ff9d44481926157\", // clientOrderId that was canceled \"orderId\": 12569099453, \"orderListId\": -1, // set only for legs of an OCO \"clientOrderId\": \"91fe37ce9e69c90d6358c0\", // newClientOrderId from request \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00001000\", \"cummulativeQuoteQty\": \"0.23416100\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"0.00000000\", // present only if stopPrice set for the order \"trailingDelta\": 0, // present only if trailingDelta set for the order \"icebergQty\": \"0.00000000\", // present only if icebergQty set for the order \"strategyId\": 37463720, // present only if strategyId set for the order \"strategyType\": 1000000, // present only if strategyType set for the order \"selfTradePreventionMode\": \"NONE\" }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } When an OCO is canceled: { \"id\": \"16eaf097-bbec-44b9-96ff-e97e6e875870\", \"status\": 200, \"result\": { \"orderListId\": 19431, \"contingencyType\": \"OCO\", \"listStatusType\": \"ALL_DONE\", \"listOrderStatus\": \"ALL_DONE\", \"listClientOrderId\": \"iuVNVJYYrByz6C4yGOPPK0\", \"transactionTime\": 1660803702431, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"clientOrderId\": \"bX5wROblo6YeDwa9iTLeyY\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099454, \"clientOrderId\": \"Tnu2IP0J5Y4mxw3IATBfmW\" } ], // OCO leg status format is the same as for individual orders. \"orderReports\": [ { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"bX5wROblo6YeDwa9iTLeyY\", \"orderId\": 12569099453, \"orderListId\": 19431, \"clientOrderId\": \"OFFXQtxVFZ6Nbcg4PgE2DA\", \"price\": \"23450.50000000\", \"origQty\": \"0.00850000\" \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS_LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"23430.00000000\", \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"Tnu2IP0J5Y4mxw3IATBfmW\", \"orderId\": 12569099454, \"orderListId\": 19431, \"clientOrderId\": \"OFFXQtxVFZ6Nbcg4PgE2DA\", \"price\": \"23400.00000000\", \"origQty\": \"0.00850000\" \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"BUY\", \"selfTradePreventionMode\": \"NONE\" } ] }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Cancel order (TRADE)"},{"location":"web-socket-api/#cancel-and-replace-order-trade","text":"{ \"id\": \"99de1036-b5e2-4e0f-9b5c-13d751c93a1a\", \"method\": \"order.cancelReplace\", \"params\": { \"symbol\": \"BTCUSDT\", \"cancelReplaceMode\": \"ALLOW_FAILURE\", \"cancelOrigClientOrderId\": \"4d96324ff9d44481926157\", \"side\": \"SELL\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"price\": \"23416.10000000\", \"quantity\": \"0.00847000\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"7028fdc187868754d25e42c37ccfa5ba2bab1d180ad55d4c3a7e2de643943dc5\", \"timestamp\": 1660813156900 } } Cancel an existing order and immediately place a new order instead of the canceled one. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES cancelReplaceMode ENUM YES cancelOrderId INT YES Cancel order by orderId cancelOrigClientOrderId STRING Cancel order by clientOrderId cancelNewClientOrderId STRING NO New ID for the canceled order. Automatically generated if not sent side ENUM YES BUY or SELL type ENUM YES timeInForce ENUM NO * price DECIMAL NO * quantity DECIMAL NO * quoteOrderQty DECIMAL NO * newClientOrderId STRING NO Arbitrary unique ID among open orders. Automatically generated if not sent newOrderRespType ENUM NO Select response format: ACK , RESULT , FULL . MARKET and LIMIT orders produce FULL response by default, other order types default to ACK . stopPrice DECIMAL NO * trailingDelta DECIMAL NO * See Trailing Stop order FAQ icebergQty DECIMAL NO strategyId INT NO Arbitrary numeric value identifying the order within an order strategy. strategyType INT NO Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used. selfTradePreventionMode ENUM NO The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER , EXPIRE_MAKER , EXPIRE_BOTH , NONE . apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Similar to the order.place request, additional mandatory parameters (*) are determined by the new order type . Available cancelReplaceMode options: STOP_ON_FAILURE \u2013 if cancellation request fails, new order placement will not be attempted ALLOW_FAILURE \u2013 new order placement will be attempted even if the cancel request fails Request Response cancelReplaceMode cancelResult newOrderResult status STOP_ON_FAILURE \u2705 SUCCESS \u2705 SUCCESS 200 \u274c FAILURE \u2796 NOT_ATTEMPTED 400 \u2705 SUCCESS \u274c FAILURE 409 ALLOW_FAILURE \u2705 SUCCESS \u2705 SUCCESS 200 \u274c FAILURE \u274c FAILURE 400 \u274c FAILURE \u2705 SUCCESS 409 \u2705 SUCCESS \u274c FAILURE 409 Notes: If both cancelOrderId and cancelOrigClientOrderId parameters are specified, only cancelOrderId is used and cancelOrigClientOrderId is ignored. cancelNewClientOrderId will replace clientOrderId of the canceled order, freeing it up for new orders. newClientOrderId specifies clientOrderId value for the placed order. A new order with the same clientOrderId is accepted only when the previous one is filled or expired. The new order can reuse old clientOrderId of the canceled order. This cancel-replace operation is not transactional . If one operation succeeds but the other one fails, the successful operation is still executed. For example, in STOP_ON_FAILURE mode, if the new order placement fails, the old order is still canceled. Filters and order count limits are evaluated before cancellation and order placement occurs. If new order placement is not attempted, your order count is still incremented. Like order.cancel , if you cancel a leg of an OCO, the entire OCO is canceled. Data Source: Matching Engine Response: If both cancel and placement succeed, you get the following response with \"status\": 200 : { \"id\": \"99de1036-b5e2-4e0f-9b5c-13d751c93a1a\", \"status\": 200, \"result\": { \"cancelResult\": \"SUCCESS\", \"newOrderResult\": \"SUCCESS\", // Format is identical to \"order.cancel\" format. // Some fields are optional and are included only for orders that set them. \"cancelResponse\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"4d96324ff9d44481926157\", // cancelOrigClientOrderId from request \"orderId\": 125690984230, \"orderListId\": -1, \"clientOrderId\": \"91fe37ce9e69c90d6358c0\", // cancelNewClientOrderId from request \"price\": \"23450.00000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00001000\", \"cummulativeQuoteQty\": \"0.23450000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" }, // Format is identical to \"order.place\" format, affected by \"newOrderRespType\". // Some fields are optional and are included only for orders that set them. \"newOrderResponse\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, \"clientOrderId\": \"bX5wROblo6YeDwa9iTLeyY\", // newClientOrderId from request \"transactTime\": 1660813156959, \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" } }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } In STOP_ON_FAILURE mode, failed order cancellation prevents new order from being placed and returns the following response with \"status\": 400 : { \"id\": \"27e1bf9f-0539-4fb0-85c6-06183d36f66c\", \"status\": 400, \"error\": { \"code\": -2022, \"msg\": \"Order cancel-replace failed.\", \"data\": { \"cancelResult\": \"FAILURE\", \"newOrderResult\": \"NOT_ATTEMPTED\", \"cancelResponse\": { \"code\": -2011, \"msg\": \"Unknown order sent.\" }, \"newOrderResponse\": null } }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } If cancel-replace mode allows failure and one of the operations fails, you get a response with \"status\": 409 , and the \"data\" field detailing which operation succeeded, which failed, and why: { \"id\": \"b220edfe-f3c4-4a3a-9d13-b35473783a25\", \"status\": 409, \"error\": { \"code\": -2021, \"msg\": \"Order cancel-replace partially failed.\", \"data\": { \"cancelResult\": \"SUCCESS\", \"newOrderResult\": \"FAILURE\", \"cancelResponse\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"4d96324ff9d44481926157\", \"orderId\": 125690984230, \"orderListId\": -1, \"clientOrderId\": \"91fe37ce9e69c90d6358c0\", \"price\": \"23450.00000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00001000\", \"cummulativeQuoteQty\": \"0.23450000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" }, \"newOrderResponse\": { \"code\": -2010, \"msg\": \"Order would immediately match and take.\" } } }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } { \"id\": \"ce641763-ff74-41ac-b9f7-db7cbe5e93b1\", \"status\": 409, \"error\": { \"code\": -2021, \"msg\": \"Order cancel-replace partially failed.\", \"data\": { \"cancelResult\": \"FAILURE\", \"newOrderResult\": \"SUCCESS\", \"cancelResponse\": { \"code\": -2011, \"msg\": \"Unknown order sent.\" }, \"newOrderResponse\": { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, \"clientOrderId\": \"bX5wROblo6YeDwa9iTLeyY\", \"transactTime\": 1660813156959, \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"workingTime\": 1669693344508, \"fills\": [], \"selfTradePreventionMode\": \"NONE\" } } }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] } If both operations fail, response will have \"status\": 400 : { \"id\": \"3b3ac45c-1002-4c7d-88e8-630c408ecd87\", \"status\": 400, \"error\": { \"code\": -2022, \"msg\": \"Order cancel-replace failed.\", \"data\": { \"cancelResult\": \"FAILURE\", \"newOrderResult\": \"FAILURE\", \"cancelResponse\": { \"code\": -2011, \"msg\": \"Unknown order sent.\" }, \"newOrderResponse\": { \"code\": -2010, \"msg\": \"Order would immediately match and take.\" } } }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 1 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 1 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Cancel and replace order (TRADE)"},{"location":"web-socket-api/#current-open-orders-user_data","text":"{ \"id\": \"55f07876-4f6f-4c47-87dc-43e5fff3f2e7\", \"method\": \"openOrders.status\", \"params\": { \"symbol\": \"BTCUSDT\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"d632b3fdb8a81dd44f82c7c901833309dd714fe508772a89b0a35b0ee0c48b89\", \"timestamp\": 1660813156812 } } Query execution status of all open orders. If you need to continuously monitor order status updates, please consider using WebSocket Streams: userDataStream.start request executionReport user data stream event Weight: Adjusted based on the number of requested symbols: Parameter Weight symbol 3 none 40 Parameters: Name Type Mandatory Description symbol STRING NO If omitted, open orders for all symbols are returned apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Data Source: Memory => Database Response: Status reports for open orders are identical to order.status . Note that some fields are optional and included only for orders that set them. Open orders are always returned as a flat list. If all symbols are requested, use the symbol field to tell which symbol the orders belong to. { \"id\": \"55f07876-4f6f-4c47-87dc-43e5fff3f2e7\", \"status\": 200, \"result\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, \"clientOrderId\": \"4d96324ff9d44481926157\", \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00720000\", \"cummulativeQuoteQty\": \"172.43931000\", \"status\": \"PARTIALLY_FILLED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"0.00000000\", \"icebergQty\": \"0.00000000\", \"time\": 1660801715639, \"updateTime\": 1660801717945, \"isWorking\": true, \"workingTime\": 1660801715639, \"origQuoteOrderQty\": \"0.00000000\", \"selfTradePreventionMode\": \"NONE\" } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 3 } ] }","title":"Current open orders (USER_DATA)"},{"location":"web-socket-api/#cancel-open-orders-trade","text":"{ \"id\": \"778f938f-9041-4b88-9914-efbf64eeacc8\", \"method\": \"openOrders.cancelAll\" \"params\": { \"symbol\": \"BTCUSDT\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"773f01b6e3c2c9e0c1d217bc043ce383c1ddd6f0e25f8d6070f2b66a6ceaf3a5\", \"timestamp\": 1660805557200 } } Cancel all open orders on a symbol, including OCO orders. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Data Source: Matching Engine Response: Cancellation reports for orders and OCOs have the same format as in order.cancel . { \"id\": \"778f938f-9041-4b88-9914-efbf64eeacc8\", \"status\": 200, \"result\": [ { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"4d96324ff9d44481926157\", \"orderId\": 12569099453, \"orderListId\": -1, \"clientOrderId\": \"91fe37ce9e69c90d6358c0\", \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00001000\", \"cummulativeQuoteQty\": \"0.23416100\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"0.00000000\", \"trailingDelta\": 0, \"trailingTime\": -1, \"icebergQty\": \"0.00000000\", \"strategyId\": 37463720, \"strategyType\": 1000000, \"selfTradePreventionMode\": \"NONE\" }, { \"orderListId\": 19431, \"contingencyType\": \"OCO\", \"listStatusType\": \"ALL_DONE\", \"listOrderStatus\": \"ALL_DONE\", \"listClientOrderId\": \"iuVNVJYYrByz6C4yGOPPK0\", \"transactionTime\": 1660803702431, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"clientOrderId\": \"bX5wROblo6YeDwa9iTLeyY\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099454, \"clientOrderId\": \"Tnu2IP0J5Y4mxw3IATBfmW\" } ], \"orderReports\": [ { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"bX5wROblo6YeDwa9iTLeyY\", \"orderId\": 12569099453, \"orderListId\": 19431, \"clientOrderId\": \"OFFXQtxVFZ6Nbcg4PgE2DA\", \"price\": \"23450.50000000\", \"origQty\": \"0.00850000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS_LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"23430.00000000\", \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"Tnu2IP0J5Y4mxw3IATBfmW\", \"orderId\": 12569099454, \"orderListId\": 19431, \"clientOrderId\": \"OFFXQtxVFZ6Nbcg4PgE2DA\", \"price\": \"23400.00000000\", \"origQty\": \"0.00850000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"BUY\", \"selfTradePreventionMode\": \"NONE\" } ] } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Cancel open orders (TRADE)"},{"location":"web-socket-api/#place-new-oco-trade","text":"{ \"id\": \"56374a46-3061-486b-a311-99ee972eb648\", \"method\": \"orderList.place\", \"params\": { \"symbol\": \"BTCUSDT\", \"side\": \"SELL\", \"price\": \"23420.00000000\", \"quantity\": \"0.00650000\", \"stopPrice\": \"23410.00000000\", \"stopLimitPrice\": \"23405.00000000\", \"stopLimitTimeInForce\": \"GTC\", \"newOrderRespType\": \"RESULT\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"6689c2a36a639ff3915c2904871709990ab65f3c7a9ff13857558fd350315c35\", \"timestamp\": 1660801713767 } } Send in a new one-cancels-the-other (OCO) pair: LIMIT_MAKER + STOP_LOSS / STOP_LOSS_LIMIT orders (called legs ), where activation of one order immediately cancels the other. Weight: 1 Parameters: Name Type Mandatory Description symbol STRING YES side ENUM YES BUY or SELL price DECIMAL YES Price for the limit order quantity DECIMAL YES listClientOrderId STRING NO Arbitrary unique ID among open OCOs. Automatically generated if not sent limitClientOrderId STRING NO Arbitrary unique ID among open orders for the limit order. Automatically generated if not sent limitIcebergQty DECIMAL NO limitStrategyId INT NO Arbitrary numeric value identifying the limit order within an order strategy. limitStrategyType INT NO Arbitrary numeric value identifying the limit order strategy. Values smaller than 1000000 are reserved and cannot be used. stopPrice DECIMAL YES * Either stopPrice or trailingDelta , or both must be specified trailingDelta INT YES * See Trailing Stop order FAQ stopClientOrderId STRING NO Arbitrary unique ID among open orders for the stop order. Automatically generated if not sent stopLimitPrice DECIMAL NO * stopLimitTimeInForce ENUM NO * See order.place for available options stopIcebergQty DECIMAL NO * stopStrategyId INT NO Arbitrary numeric value identifying the stop order within an order strategy. stopStrategyType INT NO Arbitrary numeric value identifying the stop order strategy. Values smaller than 1000000 are reserved and cannot be used. newOrderRespType ENUM NO Select response format: ACK , RESULT , FULL (default) selfTradePreventionMode ENUM NO The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER , EXPIRE_MAKER , EXPIRE_BOTH , NONE . apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: listClientOrderId parameter specifies listClientOrderId for the OCO pair. A new OCO with the same listClientOrderId is accepted only when the previous one is filled or completely expired. listClientOrderId is distinct from clientOrderId of individual orders. limitClientOrderId and stopClientOrderId specify clientOrderId values for both legs of the OCO. A new order with the same clientOrderId is accepted only when the previous one is filled or expired. Price restrictions on the legs: side Price relation BUY price < market price < stopPrice SELL price > market price > stopPrice Both legs have the same quantity . However, you can set different iceberg quantity for individual legs. If stopIcebergQty is used, stopLimitTimeInForce must be GTC . trailingDelta applies only to the STOP_LOSS / STOP_LOSS_LIMIT leg of the OCO. OCO counts as 2 orders against the order rate limit. Data Source: Matching Engine Response: Response format for orderReports is selected using the newOrderRespType parameter. The following example is for RESULT response type. See order.place for more examples. { \"id\": \"57833dc0-e3f2-43fb-ba20-46480973b0aa\", \"status\": 200, \"result\": { \"orderListId\": 1274512, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"08985fedd9ea2cf6b28996\", \"transactionTime\": 1660801713793, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138901, \"clientOrderId\": \"BqtFCj5odMoWtSqGk2X9tU\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138902, \"clientOrderId\": \"jLnZpj5enfMXTuhKB1d0us\" } ], \"orderReports\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138901, \"orderListId\": 1274512, \"clientOrderId\": \"BqtFCj5odMoWtSqGk2X9tU\", \"transactTime\": 1660801713793, \"price\": \"23410.00000000\", \"origQty\": \"0.00650000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS_LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"23405.00000000\", \"workingTime\": -1, \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138902, \"orderListId\": 1274512, \"clientOrderId\": \"jLnZpj5enfMXTuhKB1d0us\", \"transactTime\": 1660801713793, \"price\": \"23420.00000000\", \"origQty\": \"0.00650000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"SELL\", \"workingTime\": 1660801713793, \"selfTradePreventionMode\": \"NONE\" } ] }, \"rateLimits\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 2 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 2 }, { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Place new OCO (TRADE)"},{"location":"web-socket-api/#query-oco-user_data","text":"{ \"id\": \"b53fd5ff-82c7-4a04-bd64-5f9dc42c2100\", \"method\": \"orderList.status\", \"params\": { \"symbol\": \"BTCUSDT\", \"origClientOrderId\": \"08985fedd9ea2cf6b28996\" \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"d12f4e8892d46c0ddfbd43d556ff6d818581b3be22a02810c2c20cb719aed6a4\", \"timestamp\": 1660801713965 } } Check execution status of an OCO. For execution status of individual orders, use order.status . Weight: 2 Parameters : Name Type Mandatory Description symbol STRING YES origClientOrderId INT YES Query OCO by listClientOrderId orderListId STRING Query OCO by orderListId apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: origClientOrderId refers to listClientOrderId of the OCO itself. If both origClientOrderId and orderListId parameters are specified, only origClientOrderId is used and orderListId is ignored. Data Source: Database Response: { \"id\": \"b53fd5ff-82c7-4a04-bd64-5f9dc42c2100\", \"status\": 200, \"result\": { \"orderListId\": 1274512, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"08985fedd9ea2cf6b28996\", \"transactionTime\": 1660801713793, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138901, \"clientOrderId\": \"BqtFCj5odMoWtSqGk2X9tU\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138902, \"clientOrderId\": \"jLnZpj5enfMXTuhKB1d0us\" } ] }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 2 } ] }","title":"Query OCO (USER_DATA)"},{"location":"web-socket-api/#cancel-oco-trade","text":"{ \"id\": \"c5899911-d3f4-47ae-8835-97da553d27d0\", \"method\": \"orderList.cancel\", \"params\": { \"symbol\": \"BTCUSDT\", \"orderListId\": 1274512, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"4973f4b2fee30bf6d45e4a973e941cc60fdd53c8dd5a25edeac96f5733c0ccee\", \"timestamp\": 1660801720210 } } Cancel an active OCO. Weight : 1 Parameters: Name Type Mandatory Description symbol STRING YES orderListId INT YES Cancel OCO by orderListId listClientOrderId STRING Cancel OCO by listClientId newClientOrderId STRING NO New ID for the canceled OCO. Automatically generated if not sent apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: If both orderListId and listClientOrderId parameters are specified, only orderListId is used and listClientOrderId is ignored. Canceling an individual leg with order.cancel will cancel the entire OCO as well. Data Source: Matching Engine Response: { \"id\": \"c5899911-d3f4-47ae-8835-97da553d27d0\", \"status\": 200, \"result\": { \"orderListId\": 1274512, \"contingencyType\": \"OCO\", \"listStatusType\": \"ALL_DONE\", \"listOrderStatus\": \"ALL_DONE\", \"listClientOrderId\": \"6023531d7edaad348f5aff\", \"transactionTime\": 1660801720215, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138901, \"clientOrderId\": \"BqtFCj5odMoWtSqGk2X9tU\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138902, \"clientOrderId\": \"jLnZpj5enfMXTuhKB1d0us\" } ], \"orderReports\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138901, \"orderListId\": 1274512, \"clientOrderId\": \"BqtFCj5odMoWtSqGk2X9tU\", \"transactTime\": 1660801720215, \"price\": \"23410.00000000\", \"origQty\": \"0.00650000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"STOP_LOSS_LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"23405.00000000\", \"selfTradePreventionMode\": \"NONE\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138902, \"orderListId\": 1274512, \"clientOrderId\": \"jLnZpj5enfMXTuhKB1d0us\", \"transactTime\": 1660801720215, \"price\": \"23420.00000000\", \"origQty\": \"0.00650000\", \"executedQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"0.00000000\", \"status\": \"CANCELED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT_MAKER\", \"side\": \"SELL\", \"selfTradePreventionMode\": \"NONE\" } ] }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Cancel OCO (TRADE)"},{"location":"web-socket-api/#current-open-ocos-user_data","text":"{ \"id\": \"3a4437e2-41a3-4c19-897c-9cadc5dce8b6\", \"method\": \"openOrderLists.status\", \"params\": { \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"1bea8b157dd78c3da30359bddcd999e4049749fe50b828e620e12f64e8b433c9\", \"timestamp\": 1660801713831 } } Query execution status of all open OCOs. If you need to continuously monitor order status updates, please consider using WebSocket Streams: userDataStream.start request executionReport user data stream event Weight : 3 Parameters: Name Type Mandatory Description apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Data Source: Database Response: { \"id\": \"3a4437e2-41a3-4c19-897c-9cadc5dce8b6\", \"status\": 200, \"result\": [ { \"orderListId\": 0, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"08985fedd9ea2cf6b28996\", \"transactionTime\": 1660801713793, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 4, \"clientOrderId\": \"CUhLgTXnX5n2c0gWiLpV4d\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 5, \"clientOrderId\": \"1ZqG7bBuYwaF4SU8CwnwHm\" } ] } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 3 } ] }","title":"Current open OCOs (USER_DATA)"},{"location":"web-socket-api/#account-requests","text":"","title":"Account requests"},{"location":"web-socket-api/#account-information-user_data","text":"{ \"id\": \"605a6d20-6588-4cb9-afa0-b0ab087507ba\", \"method\": \"account.status\", \"params\": { \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"83303b4a136ac1371795f465808367242685a9e3a42b22edb4d977d0696eb45c\", \"timestamp\": 1660801839480 } } Query information about your account. Weight: 10 Parameters: Name Type Mandatory Description apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Data Source: Memory => Database Response: { \"id\": \"605a6d20-6588-4cb9-afa0-b0ab087507ba\", \"status\": 200, \"result\": { \"makerCommission\": 15, \"takerCommission\": 15, \"buyerCommission\": 0, \"sellerCommission\": 0, \"canTrade\": true, \"canWithdraw\": true, \"canDeposit\": true, \"commissionRates\": { \"maker\": \"0.00150000\", \"taker\": \"0.00150000\", \"buyer\": \"0.00000000\", \"seller\": \"0.00000000\" }, \"brokered\": false, \"requireSelfTradePrevention\": false, \"updateTime\": 1660801833000, \"accountType\": \"SPOT\", \"balances\": [ { \"asset\": \"BNB\", \"free\": \"0.00000000\", \"locked\": \"0.00000000\" }, { \"asset\": \"BTC\", \"free\": \"1.3447112\", \"locked\": \"0.08600000\" }, { \"asset\": \"USDT\", \"free\": \"1021.21000000\", \"locked\": \"0.00000000\" } ], \"permissions\": [ \"SPOT\" ] }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 10 } ] }","title":"Account information (USER_DATA)"},{"location":"web-socket-api/#account-order-rate-limits-user_data","text":"{ \"id\": \"d3783d8d-f8d1-4d2c-b8a0-b7596af5a664\", \"method\": \"account.rateLimits.orders\", \"params\": { \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"76289424d6e288f4dc47d167ac824e859dabf78736f4348abbbac848d719eb94\", \"timestamp\": 1660801839500 } } Query your current order rate limit. Weight: 20 Parameters: Name Type Mandatory Description apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Data Source: Memory Response: { \"id\": \"d3783d8d-f8d1-4d2c-b8a0-b7596af5a664\", \"status\": 200, \"result\": [ { \"rateLimitType\": \"ORDERS\", \"interval\": \"SECOND\", \"intervalNum\": 10, \"limit\": 50, \"count\": 0 }, { \"rateLimitType\": \"ORDERS\", \"interval\": \"DAY\", \"intervalNum\": 1, \"limit\": 160000, \"count\": 0 } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 20 } ] }","title":"Account order rate limits (USER_DATA)"},{"location":"web-socket-api/#account-order-history-user_data","text":"{ \"id\": \"734235c2-13d2-4574-be68-723e818c08f3\", \"method\": \"allOrders\", \"params\": { \"symbol\": \"BTCUSDT\", \"startTime\": 1660780800000, \"endTime\": 1660867200000, \"limit\": 5, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"f50a972ba7fad92842187643f6b930802d4e20bce1ba1e788e856e811577bd42\", \"timestamp\": 1661955123341 } } Query information about all your orders \u2013 active, canceled, filled \u2013 filtered by time range. Weight: 10 Parameters: Name Type Mandatory Description symbol STRING YES orderId INT NO Order ID to begin at startTime INT NO endTime INT NO limit INT NO Default 500; max 1000 apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: If startTime and/or endTime are specified, orderId is ignored. Orders are filtered by time of the last execution status update. If orderId is specified, return orders with order ID >= orderId . If no condition is specified, the most recent orders are returned. For some historical orders the cummulativeQuoteQty response field may be negative, meaning the data is not available at this time. Data Source: Database Response: Status reports for orders are identical to order.status . Note that some fields are optional and included only for orders that set them. { \"id\": \"734235c2-13d2-4574-be68-723e818c08f3\", \"status\": 200, \"result\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569099453, \"orderListId\": -1, \"clientOrderId\": \"4d96324ff9d44481926157\", \"price\": \"23416.10000000\", \"origQty\": \"0.00847000\", \"executedQty\": \"0.00847000\", \"cummulativeQuoteQty\": \"198.33521500\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"0.00000000\", \"icebergQty\": \"0.00000000\", \"time\": 1660801715639, \"updateTime\": 1660801717945, \"isWorking\": true, \"workingTime\": 1660801715639, \"origQuoteOrderQty\": \"0.00000000\", \"selfTradePreventionMode\": \"NONE\" } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 10 } ] }","title":"Account order history (USER_DATA)"},{"location":"web-socket-api/#account-oco-history-user_data","text":"{ \"id\": \"8617b7b3-1b3d-4dec-94cd-eefd929b8ceb\", \"method\": \"allOrderLists\", \"params\": { \"startTime\": 1660780800000, \"endTime\": 1660867200000, \"limit\": 5, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"c8e1484db4a4a02d0e84dfa627eb9b8298f07ebf12fcc4eaf86e4a565b2712c2\", \"timestamp\": 1661955123341 } } Query information about all your OCOs, filtered by time range. Weight: 10 Parameters: Name Type Mandatory Description fromId INT NO Order list ID to begin at startTime INT NO endTime INT NO limit INT NO Default 500; max 1000 apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: If startTime and/or endTime are specified, fromId is ignored. OCOs are filtered by transactionTime of the last OCO execution status update. If fromId is specified, return OCOs with order list ID >= fromId . If no condition is specified, the most recent OCOs are returned. Data Source: Database Response: Status reports for OCOs are identical to orderList.status . { \"id\": \"8617b7b3-1b3d-4dec-94cd-eefd929b8ceb\", \"status\": 200, \"result\": [ { \"orderListId\": 1274512, \"contingencyType\": \"OCO\", \"listStatusType\": \"EXEC_STARTED\", \"listOrderStatus\": \"EXECUTING\", \"listClientOrderId\": \"08985fedd9ea2cf6b28996\", \"transactionTime\": 1660801713793, \"symbol\": \"BTCUSDT\", \"orders\": [ { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138901, \"clientOrderId\": \"BqtFCj5odMoWtSqGk2X9tU\" }, { \"symbol\": \"BTCUSDT\", \"orderId\": 12569138902, \"clientOrderId\": \"jLnZpj5enfMXTuhKB1d0us\" } ] } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 10 } ] }","title":"Account OCO history (USER_DATA)"},{"location":"web-socket-api/#account-trade-history-user_data","text":"{ \"id\": \"f4ce6a53-a29d-4f70-823b-4ab59391d6e8\", \"method\": \"myTrades\", \"params\": { \"symbol\": \"BTCUSDT\", \"startTime\": 1660780800000, \"endTime\": 1660867200000, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"c5a5ffb79fd4f2e10a92f895d488943a57954edf5933bde3338dfb6ea6d6eefc\", \"timestamp\": 1661955125250 } } Query information about all your trades, filtered by time range. Weight: 10 Parameters: Name Type Mandatory Description symbol STRING YES orderId INT NO startTime INT NO endTime INT NO fromId INT NO First trade ID to query limit INT NO Default 500; max 1000 apiKey STRING YES recvWindow INT NO The value cannot be greater than 60000 signature STRING YES timestamp INT YES Notes: If fromId is specified, return trades with trade ID >= fromId . If startTime and/or endTime are specified, trades are filtered by execution time ( time ). fromId cannot be used together with startTime and endTime . If orderId is specified, only trades related to that order are returned. startTime and endTime cannot be used together with orderId . If no condition is specified, the most recent trades are returned. Data Source: Memory => Database Response: { \"id\": \"f4ce6a53-a29d-4f70-823b-4ab59391d6e8\", \"status\": 200, \"result\": [ { \"symbol\": \"BTCUSDT\", \"id\": 1650422481, \"orderId\": 12569099453, \"orderListId\": -1, \"price\": \"23416.10000000\", \"qty\": \"0.00635000\", \"quoteQty\": \"148.69223500\", \"commission\": \"0.00000000\", \"commissionAsset\": \"BNB\", \"time\": 1660801715793, \"isBuyer\": false, \"isMaker\": true, \"isBestMatch\": true }, { \"symbol\": \"BTCUSDT\", \"id\": 1650422482, \"orderId\": 12569099453, \"orderListId\": -1, \"price\": \"23416.50000000\", \"qty\": \"0.00212000\", \"quoteQty\": \"49.64298000\", \"commission\": \"0.00000000\", \"commissionAsset\": \"BNB\", \"time\": 1660801715793, \"isBuyer\": false, \"isMaker\": true, \"isBestMatch\": true } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 10 } ] }","title":"Account trade history (USER_DATA)"},{"location":"web-socket-api/#account-prevented-matches-user_data","text":"{ \"id\": \"g4ce6a53-a39d-4f71-823b-4ab5r391d6y8\", \"method\": \"myPreventedMatches\", \"params\": { \"symbol\": \"BTCUSDT\", \"orderId\": 35, \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\", \"signature\": \"c5a5ffb79fd4f2e10a92f895d488943a57954edf5933bde3338dfb6ea6d6eefc\", \"timestamp\": 1673923281052 } } Displays the list of orders that were expired because of STP trigger. These are the combinations supported: symbol + preventedMatchId symbol + orderId symbol + orderId + fromPreventedMatchId ( limit will default to 500) symbol + orderId + fromPreventedMatchId + limit Parameters: Name Type Mandatory Description symbol STRING YES preventedMatchId LONG NO orderId LONG NO fromPreventedMatchId LONG NO limit INT NO Default: 500 ; Max: 1000 recvWindow LONG NO The value cannot be greater than 60000 timestamp LONG YES Weight Case Weight If symbol is invalid 1 Querying by preventedMatchId 1 Querying by orderId 10 Data Source: Database Response: { \"id\": \"g4ce6a53-a39d-4f71-823b-4ab5r391d6y8\", \"status\": 200, \"result\": [ { \"symbol\": \"BTCUSDT\", \"preventedMatchId\": 1, \"takerOrderId\": 5, \"makerOrderId\": 3, \"tradeGroupId\": 1, \"selfTradePreventionMode\": \"EXPIRE_MAKER\", \"price\": \"1.100000\", \"makerPreventedQuantity\": \"1.300000\", \"transactTime\": 1669101687094 } ], \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 10 } ] }","title":"Account prevented matches (USER_DATA)"},{"location":"web-socket-api/#user-data-stream-requests","text":"The following requests manage User Data Stream subscriptions. Note: The user data can ONLY be retrieved by a separate Websocket connection via the User Data Streams url (i.e. wss://stream.binance.com:443 ).","title":"User Data Stream requests"},{"location":"web-socket-api/#start-user-data-stream-user_stream","text":"{ \"id\": \"d3df8a61-98ea-4fe0-8f4e-0fcea5d418b0\", \"method\": \"userDataStream.start\", \"params\": { \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" } } Start a new user data stream. Note: the stream will close in 60 minutes unless userDataStream.ping requests are sent regularly. Weight: 1 Parameters: Name Type Mandatory Description apiKey STRING YES Data Source: Memory Response: Subscribe to the received listen key on WebSocket Stream afterwards. { \"id\": \"d3df8a61-98ea-4fe0-8f4e-0fcea5d418b0\", \"status\": 200, \"result\": { \"listenKey\": \"xs0mRXdAKlIPDRFrlPcw0qI41Eh3ixNntmymGyhrhgqo7L6FuLaWArTD7RLP\" }, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Start user data stream (USER_STREAM)"},{"location":"web-socket-api/#ping-user-data-stream-user_stream","text":"{ \"id\": \"815d5fce-0880-4287-a567-80badf004c74\", \"method\": \"userDataStream.ping\", \"params\": { \"listenKey\": \"xs0mRXdAKlIPDRFrlPcw0qI41Eh3ixNntmymGyhrhgqo7L6FuLaWArTD7RLP\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" } } Ping a user data stream to keep it alive. User data streams close automatically after 60 minutes, even if you're listening to them on WebSocket Streams. In order to keep the stream open, you have to regularly send pings using the userDataStream.ping request. It is recommended to send a ping once every 30 minutes. Weight: 1 Parameters: Name Type Mandatory Description listenKey STRING YES apiKey STRING YES Data Source: Memory Response: { \"id\": \"815d5fce-0880-4287-a567-80badf004c74\", \"status\": 200, \"response\": {}, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Ping user data stream (USER_STREAM)"},{"location":"web-socket-api/#stop-user-data-stream-user_stream","text":"{ \"id\": \"819e1b1b-8c06-485b-a13e-131326c69599\", \"method\": \"userDataStream.stop\", \"params\": { \"listenKey\": \"xs0mRXdAKlIPDRFrlPcw0qI41Eh3ixNntmymGyhrhgqo7L6FuLaWArTD7RLP\", \"apiKey\": \"vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A\" } } Explicitly stop and close the user data stream. Weight: 1 Parameters: Name Type Mandatory Description listenKey STRING YES apiKey STRING YES Data Source: Memory Response: { \"id\": \"819e1b1b-8c06-485b-a13e-131326c69599\", \"status\": 200, \"response\": {}, \"rateLimits\": [ { \"rateLimitType\": \"REQUEST_WEIGHT\", \"interval\": \"MINUTE\", \"intervalNum\": 1, \"limit\": 1200, \"count\": 1 } ] }","title":"Stop user data stream (USER_STREAM)"},{"location":"web-socket-streams/","text":"Table of Contents generated with DocToc General WSS information Websocket Limits Live Subscribing/Unsubscribing to streams Subscribe to a stream Unsubscribe to a stream Listing Subscriptions Setting Properties Retrieving Properties Error Messages Detailed Stream information Aggregate Trade Streams Trade Streams Kline/Candlestick Streams Individual Symbol Mini Ticker Stream All Market Mini Tickers Stream Individual Symbol Ticker Streams All Market Tickers Stream Individual Symbol Rolling Window Statistics Streams All Market Rolling Window Statistics Streams Individual Symbol Book Ticker Streams Partial Book Depth Streams Diff. Depth Stream How to manage a local order book correctly Web Socket Streams for Binance (2022-12-05) General WSS information The base endpoint is: wss://stream.binance.com:9443 or wss://stream.binance.com:443 Streams can be accessed either in a single raw stream or in a combined stream Raw streams are accessed at /ws/\\<streamName> Combined streams are accessed at /stream?streams=\\<streamName1>/\\<streamName2>/\\<streamName3> Combined stream events are wrapped as follows: {\"stream\":\"\\<streamName>\",\"data\":\\<rawPayload>} All symbols for streams are lowercase A single connection to stream.binance.com is only valid for 24 hours; expect to be disconnected at the 24 hour mark The websocket server will send a ping frame every 3 minutes. If the websocket server does not receive a pong frame back from the connection within a 10 minute period, the connection will be disconnected. Unsolicited pong frames are allowed. The base endpoint wss://data-stream.binance.com can be subscribed to receive market data messages. Users data stream is NOT available from this URL. Websocket Limits WebSocket connections have a limit of 5 incoming messages per second. A message is considered: A PING frame A PONG frame A JSON controlled message (e.g. subscribe, unsubscribe) A connection that goes beyond the limit will be disconnected; IPs that are repeatedly disconnected may be banned. A single connection can listen to a maximum of 1024 streams. Live Subscribing/Unsubscribing to streams The following data can be sent through the websocket instance in order to subscribe/unsubscribe from streams. Examples can be seen below. The id used in the JSON payloads is an unsigned INT used as an identifier to uniquely identify the messages going back and forth. In the response, if the result received is null this means the request sent was a success for non-query requests (e.g. Subscribing/Unsubscribing). Subscribe to a stream Request javascript { \"method\": \"SUBSCRIBE\", \"params\": [ \"btcusdt@aggTrade\", \"btcusdt@depth\" ], \"id\": 1 } Response javascript { \"result\": null, \"id\": 1 } Unsubscribe to a stream Request javascript { \"method\": \"UNSUBSCRIBE\", \"params\": [ \"btcusdt@depth\" ], \"id\": 312 } Response javascript { \"result\": null, \"id\": 312 } Listing Subscriptions Request javascript { \"method\": \"LIST_SUBSCRIPTIONS\", \"id\": 3 } Response javascript { \"result\": [ \"btcusdt@aggTrade\" ], \"id\": 3 } Setting Properties Currently, the only property that can be set is whether combined stream payloads are enabled or not. The combined property is set to false when connecting using /ws/ (\"raw streams\") and true when connecting using /stream/ . Request javascript { \"method\": \"SET_PROPERTY\", \"params\": [ \"combined\", true ], \"id\": 5 } Response javascript { \"result\": null, \"id\": 5 } Retrieving Properties Request javascript { \"method\": \"GET_PROPERTY\", \"params\": [ \"combined\" ], \"id\": 2 } Response javascript { \"result\": true, // Indicates that combined is set to true. \"id\": 2 } Error Messages Error Message Description {\"code\": 0, \"msg\": \"Unknown property\",\"id\": %s} Parameter used in the SET_PROPERTY or GET_PROPERTY was invalid {\"code\": 1, \"msg\": \"Invalid value type: expected Boolean\"} Value should only be true or false {\"code\": 2, \"msg\": \"Invalid request: property name must be a string\"} Property name provided was invalid {\"code\": 2, \"msg\": \"Invalid request: request ID must be an unsigned integer\"} Parameter id had to be provided or the value provided in the id parameter is an unsupported type {\"code\": 2, \"msg\": \"Invalid request: unknown variant %s, expected one of SUBSCRIBE , UNSUBSCRIBE , LIST_SUBSCRIPTIONS , SET_PROPERTY , GET_PROPERTY at line 1 column 28\"} Possible typo in the provided method or provided method was neither of the expected values {\"code\": 2, \"msg\": \"Invalid request: too many parameters\"} Unnecessary parameters provided in the data {\"code\": 2, \"msg\": \"Invalid request: property name must be a string\"} Property name was not provided {\"code\": 2, \"msg\": \"Invalid request: missing field method at line 1 column 73\"} method was not provided in the data {\"code\":3,\"msg\":\"Invalid JSON: expected value at line %s column %s\"} JSON data sent has incorrect syntax. Detailed Stream information Aggregate Trade Streams The Aggregate Trade Streams push trade information that is aggregated for a single taker order. Stream Name: \\<symbol>@aggTrade Update Speed: Real-time Payload: { \"e\": \"aggTrade\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"a\": 12345, // Aggregate trade ID \"p\": \"0.001\", // Price \"q\": \"100\", // Quantity \"f\": 100, // First trade ID \"l\": 105, // Last trade ID \"T\": 123456785, // Trade time \"m\": true, // Is the buyer the market maker? \"M\": true // Ignore } Trade Streams The Trade Streams push raw trade information; each trade has a unique buyer and seller. Stream Name: \\<symbol>@trade Update Speed: Real-time Payload: { \"e\": \"trade\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"t\": 12345, // Trade ID \"p\": \"0.001\", // Price \"q\": \"100\", // Quantity \"b\": 88, // Buyer order ID \"a\": 50, // Seller order ID \"T\": 123456785, // Trade time \"m\": true, // Is the buyer the market maker? \"M\": true // Ignore } Kline/Candlestick Streams The Kline/Candlestick Stream push updates to the current klines/candlestick every second. Kline/Candlestick chart intervals: s-> seconds; m -> minutes; h -> hours; d -> days; w -> weeks; M -> months 1s 1m 3m 5m 15m 30m 1h 2h 4h 6h 8h 12h 1d 3d 1w 1M Stream Name: \\<symbol>@kline_\\<interval> Update Speed: 2000ms Payload: { \"e\": \"kline\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"k\": { \"t\": 123400000, // Kline start time \"T\": 123460000, // Kline close time \"s\": \"BNBBTC\", // Symbol \"i\": \"1m\", // Interval \"f\": 100, // First trade ID \"L\": 200, // Last trade ID \"o\": \"0.0010\", // Open price \"c\": \"0.0020\", // Close price \"h\": \"0.0025\", // High price \"l\": \"0.0015\", // Low price \"v\": \"1000\", // Base asset volume \"n\": 100, // Number of trades \"x\": false, // Is this kline closed? \"q\": \"1.0000\", // Quote asset volume \"V\": \"500\", // Taker buy base asset volume \"Q\": \"0.500\", // Taker buy quote asset volume \"B\": \"123456\" // Ignore } } Individual Symbol Mini Ticker Stream 24hr rolling window mini-ticker statistics. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Stream Name: \\<symbol>@miniTicker Update Speed: 1000ms Payload: { \"e\": \"24hrMiniTicker\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"c\": \"0.0025\", // Close price \"o\": \"0.0010\", // Open price \"h\": \"0.0025\", // High price \"l\": \"0.0010\", // Low price \"v\": \"10000\", // Total traded base asset volume \"q\": \"18\" // Total traded quote asset volume } All Market Mini Tickers Stream 24hr rolling window mini-ticker statistics for all symbols that changed in an array. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Note that only tickers that have changed will be present in the array. Stream Name: !miniTicker@arr Update Speed: 1000ms Payload: [ { // Same as <symbol>@miniTicker payload } ] Individual Symbol Ticker Streams 24hr rolling window ticker statistics for a single symbol. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Stream Name: \\<symbol>@ticker Update Speed: 1000ms Payload: { \"e\": \"24hrTicker\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"p\": \"0.0015\", // Price change \"P\": \"250.00\", // Price change percent \"w\": \"0.0018\", // Weighted average price \"x\": \"0.0009\", // First trade(F)-1 price (first trade before the 24hr rolling window) \"c\": \"0.0025\", // Last price \"Q\": \"10\", // Last quantity \"b\": \"0.0024\", // Best bid price \"B\": \"10\", // Best bid quantity \"a\": \"0.0026\", // Best ask price \"A\": \"100\", // Best ask quantity \"o\": \"0.0010\", // Open price \"h\": \"0.0025\", // High price \"l\": \"0.0010\", // Low price \"v\": \"10000\", // Total traded base asset volume \"q\": \"18\", // Total traded quote asset volume \"O\": 0, // Statistics open time \"C\": 86400000, // Statistics close time \"F\": 0, // First trade ID \"L\": 18150, // Last trade Id \"n\": 18151 // Total number of trades } All Market Tickers Stream 24hr rolling window ticker statistics for all symbols that changed in an array. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Note that only tickers that have changed will be present in the array. Stream Name: !ticker@arr Update Speed: 1000ms Payload: [ { // Same as <symbol>@ticker payload } ] Individual Symbol Rolling Window Statistics Streams Rolling window ticker statistics for a single symbol, computed over multiple windows. Stream Name: \\<symbol>@ticker_\\<window_size> Window Sizes: 1h,4h,1d Update Speed: 1000ms Note : This stream is different from the \\<symbol>@ticker stream. The open time \"O\" always starts on a minute, while the closing time \"C\" is the current time of the update. As such, the effective window might be up to 59999ms wider that \\<window_size>. Payload: { \"e\": \"1hTicker\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"p\": \"0.0015\", // Price change \"P\": \"250.00\", // Price change percent \"o\": \"0.0010\", // Open price \"h\": \"0.0025\", // High price \"l\": \"0.0010\", // Low price \"c\": \"0.0025\", // Last price \"w\": \"0.0018\", // Weighted average price \"v\": \"10000\", // Total traded base asset volume \"q\": \"18\", // Total traded quote asset volume \"O\": 0, // Statistics open time \"C\": 86400000, // Statistics close time \"F\": 0, // First trade ID \"L\": 18150, // Last trade Id \"n\": 18151 // Total number of trades } All Market Rolling Window Statistics Streams Rolling window ticker statistics for all market symbols, computed over multiple windows. Note that only tickers that have changed will be present in the array. Stream Name: !ticker_\\<window-size>@arr Window Size: 1h,4h,1d Update Speed: 1000ms Payload: [ { // Same as <symbol>@ticker_<window-size> payload, // one for each symbol updated within the interval. } ] Individual Symbol Book Ticker Streams Pushes any update to the best bid or ask's price or quantity in real-time for a specified symbol. Multiple <symbol>@bookTicker streams can be subscribed to over one connection. Stream Name: \\<symbol>@bookTicker Update Speed: Real-time Payload: { \"u\":400900217, // order book updateId \"s\":\"BNBUSDT\", // symbol \"b\":\"25.35190000\", // best bid price \"B\":\"31.21000000\", // best bid qty \"a\":\"25.36520000\", // best ask price \"A\":\"40.66000000\" // best ask qty } Partial Book Depth Streams Top \\<levels> bids and asks, pushed every second. Valid \\<levels> are 5, 10, or 20. Stream Names: \\<symbol>@depth\\<levels> OR \\<symbol>@depth\\<levels>@100ms Update Speed: 1000ms or 100ms Payload: { \"lastUpdateId\": 160, // Last update ID \"bids\": [ // Bids to be updated [ \"0.0024\", // Price level to be updated \"10\" // Quantity ] ], \"asks\": [ // Asks to be updated [ \"0.0026\", // Price level to be updated \"100\" // Quantity ] ] } Diff. Depth Stream Order book price and quantity depth updates used to locally manage an order book. Stream Name: \\<symbol>@depth OR \\<symbol>@depth@100ms Update Speed: 1000ms or 100ms Payload: { \"e\": \"depthUpdate\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"U\": 157, // First update ID in event \"u\": 160, // Final update ID in event \"b\": [ // Bids to be updated [ \"0.0024\", // Price level to be updated \"10\" // Quantity ] ], \"a\": [ // Asks to be updated [ \"0.0026\", // Price level to be updated \"100\" // Quantity ] ] } How to manage a local order book correctly Open a stream to wss://stream.binance.com:9443/ws/bnbbtc@depth . Buffer the events you receive from the stream. Get a depth snapshot from https://api.binance.com/api/v3/depth?symbol=BNBBTC&limit=1000 . Drop any event where u is <= lastUpdateId in the snapshot. The first processed event should have U <= lastUpdateId +1 AND u >= lastUpdateId +1. While listening to the stream, each new event's U should be equal to the previous event's u +1. The data in each event is the absolute quantity for a price level. If the quantity is 0, remove the price level. Receiving an event that removes a price level that is not in your local order book can happen and is normal. Note: Due to depth snapshots having a limit on the number of price levels, a price level outside of the initial snapshot that doesn't have a quantity change won't have an update in the Diff. Depth Stream. Consequently, those price levels will not be visible in the local order book even when applying all updates from the Diff. Depth Stream correctly and cause the local order book to have some slight differences with the real order book. However, for most use cases the depth limit of 5000 is enough to understand the market and trade effectively.","title":"Web socket streams"},{"location":"web-socket-streams/#web-socket-streams-for-binance-2022-12-05","text":"","title":"Web Socket Streams for Binance (2022-12-05)"},{"location":"web-socket-streams/#general-wss-information","text":"The base endpoint is: wss://stream.binance.com:9443 or wss://stream.binance.com:443 Streams can be accessed either in a single raw stream or in a combined stream Raw streams are accessed at /ws/\\<streamName> Combined streams are accessed at /stream?streams=\\<streamName1>/\\<streamName2>/\\<streamName3> Combined stream events are wrapped as follows: {\"stream\":\"\\<streamName>\",\"data\":\\<rawPayload>} All symbols for streams are lowercase A single connection to stream.binance.com is only valid for 24 hours; expect to be disconnected at the 24 hour mark The websocket server will send a ping frame every 3 minutes. If the websocket server does not receive a pong frame back from the connection within a 10 minute period, the connection will be disconnected. Unsolicited pong frames are allowed. The base endpoint wss://data-stream.binance.com can be subscribed to receive market data messages. Users data stream is NOT available from this URL.","title":"General WSS information"},{"location":"web-socket-streams/#websocket-limits","text":"WebSocket connections have a limit of 5 incoming messages per second. A message is considered: A PING frame A PONG frame A JSON controlled message (e.g. subscribe, unsubscribe) A connection that goes beyond the limit will be disconnected; IPs that are repeatedly disconnected may be banned. A single connection can listen to a maximum of 1024 streams.","title":"Websocket Limits"},{"location":"web-socket-streams/#live-subscribingunsubscribing-to-streams","text":"The following data can be sent through the websocket instance in order to subscribe/unsubscribe from streams. Examples can be seen below. The id used in the JSON payloads is an unsigned INT used as an identifier to uniquely identify the messages going back and forth. In the response, if the result received is null this means the request sent was a success for non-query requests (e.g. Subscribing/Unsubscribing).","title":"Live Subscribing/Unsubscribing to streams"},{"location":"web-socket-streams/#subscribe-to-a-stream","text":"Request javascript { \"method\": \"SUBSCRIBE\", \"params\": [ \"btcusdt@aggTrade\", \"btcusdt@depth\" ], \"id\": 1 } Response javascript { \"result\": null, \"id\": 1 }","title":"Subscribe to a stream"},{"location":"web-socket-streams/#unsubscribe-to-a-stream","text":"Request javascript { \"method\": \"UNSUBSCRIBE\", \"params\": [ \"btcusdt@depth\" ], \"id\": 312 } Response javascript { \"result\": null, \"id\": 312 }","title":"Unsubscribe to a stream"},{"location":"web-socket-streams/#listing-subscriptions","text":"Request javascript { \"method\": \"LIST_SUBSCRIPTIONS\", \"id\": 3 } Response javascript { \"result\": [ \"btcusdt@aggTrade\" ], \"id\": 3 }","title":"Listing Subscriptions"},{"location":"web-socket-streams/#setting-properties","text":"Currently, the only property that can be set is whether combined stream payloads are enabled or not. The combined property is set to false when connecting using /ws/ (\"raw streams\") and true when connecting using /stream/ . Request javascript { \"method\": \"SET_PROPERTY\", \"params\": [ \"combined\", true ], \"id\": 5 } Response javascript { \"result\": null, \"id\": 5 }","title":"Setting Properties"},{"location":"web-socket-streams/#retrieving-properties","text":"Request javascript { \"method\": \"GET_PROPERTY\", \"params\": [ \"combined\" ], \"id\": 2 } Response javascript { \"result\": true, // Indicates that combined is set to true. \"id\": 2 }","title":"Retrieving Properties"},{"location":"web-socket-streams/#error-messages","text":"Error Message Description {\"code\": 0, \"msg\": \"Unknown property\",\"id\": %s} Parameter used in the SET_PROPERTY or GET_PROPERTY was invalid {\"code\": 1, \"msg\": \"Invalid value type: expected Boolean\"} Value should only be true or false {\"code\": 2, \"msg\": \"Invalid request: property name must be a string\"} Property name provided was invalid {\"code\": 2, \"msg\": \"Invalid request: request ID must be an unsigned integer\"} Parameter id had to be provided or the value provided in the id parameter is an unsupported type {\"code\": 2, \"msg\": \"Invalid request: unknown variant %s, expected one of SUBSCRIBE , UNSUBSCRIBE , LIST_SUBSCRIPTIONS , SET_PROPERTY , GET_PROPERTY at line 1 column 28\"} Possible typo in the provided method or provided method was neither of the expected values {\"code\": 2, \"msg\": \"Invalid request: too many parameters\"} Unnecessary parameters provided in the data {\"code\": 2, \"msg\": \"Invalid request: property name must be a string\"} Property name was not provided {\"code\": 2, \"msg\": \"Invalid request: missing field method at line 1 column 73\"} method was not provided in the data {\"code\":3,\"msg\":\"Invalid JSON: expected value at line %s column %s\"} JSON data sent has incorrect syntax.","title":"Error Messages"},{"location":"web-socket-streams/#detailed-stream-information","text":"","title":"Detailed Stream information"},{"location":"web-socket-streams/#aggregate-trade-streams","text":"The Aggregate Trade Streams push trade information that is aggregated for a single taker order. Stream Name: \\<symbol>@aggTrade Update Speed: Real-time Payload: { \"e\": \"aggTrade\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"a\": 12345, // Aggregate trade ID \"p\": \"0.001\", // Price \"q\": \"100\", // Quantity \"f\": 100, // First trade ID \"l\": 105, // Last trade ID \"T\": 123456785, // Trade time \"m\": true, // Is the buyer the market maker? \"M\": true // Ignore }","title":"Aggregate Trade Streams"},{"location":"web-socket-streams/#trade-streams","text":"The Trade Streams push raw trade information; each trade has a unique buyer and seller. Stream Name: \\<symbol>@trade Update Speed: Real-time Payload: { \"e\": \"trade\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"t\": 12345, // Trade ID \"p\": \"0.001\", // Price \"q\": \"100\", // Quantity \"b\": 88, // Buyer order ID \"a\": 50, // Seller order ID \"T\": 123456785, // Trade time \"m\": true, // Is the buyer the market maker? \"M\": true // Ignore }","title":"Trade Streams"},{"location":"web-socket-streams/#klinecandlestick-streams","text":"The Kline/Candlestick Stream push updates to the current klines/candlestick every second. Kline/Candlestick chart intervals: s-> seconds; m -> minutes; h -> hours; d -> days; w -> weeks; M -> months 1s 1m 3m 5m 15m 30m 1h 2h 4h 6h 8h 12h 1d 3d 1w 1M Stream Name: \\<symbol>@kline_\\<interval> Update Speed: 2000ms Payload: { \"e\": \"kline\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"k\": { \"t\": 123400000, // Kline start time \"T\": 123460000, // Kline close time \"s\": \"BNBBTC\", // Symbol \"i\": \"1m\", // Interval \"f\": 100, // First trade ID \"L\": 200, // Last trade ID \"o\": \"0.0010\", // Open price \"c\": \"0.0020\", // Close price \"h\": \"0.0025\", // High price \"l\": \"0.0015\", // Low price \"v\": \"1000\", // Base asset volume \"n\": 100, // Number of trades \"x\": false, // Is this kline closed? \"q\": \"1.0000\", // Quote asset volume \"V\": \"500\", // Taker buy base asset volume \"Q\": \"0.500\", // Taker buy quote asset volume \"B\": \"123456\" // Ignore } }","title":"Kline/Candlestick Streams"},{"location":"web-socket-streams/#individual-symbol-mini-ticker-stream","text":"24hr rolling window mini-ticker statistics. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Stream Name: \\<symbol>@miniTicker Update Speed: 1000ms Payload: { \"e\": \"24hrMiniTicker\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"c\": \"0.0025\", // Close price \"o\": \"0.0010\", // Open price \"h\": \"0.0025\", // High price \"l\": \"0.0010\", // Low price \"v\": \"10000\", // Total traded base asset volume \"q\": \"18\" // Total traded quote asset volume }","title":"Individual Symbol Mini Ticker Stream"},{"location":"web-socket-streams/#all-market-mini-tickers-stream","text":"24hr rolling window mini-ticker statistics for all symbols that changed in an array. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Note that only tickers that have changed will be present in the array. Stream Name: !miniTicker@arr Update Speed: 1000ms Payload: [ { // Same as <symbol>@miniTicker payload } ]","title":"All Market Mini Tickers Stream"},{"location":"web-socket-streams/#individual-symbol-ticker-streams","text":"24hr rolling window ticker statistics for a single symbol. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Stream Name: \\<symbol>@ticker Update Speed: 1000ms Payload: { \"e\": \"24hrTicker\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"p\": \"0.0015\", // Price change \"P\": \"250.00\", // Price change percent \"w\": \"0.0018\", // Weighted average price \"x\": \"0.0009\", // First trade(F)-1 price (first trade before the 24hr rolling window) \"c\": \"0.0025\", // Last price \"Q\": \"10\", // Last quantity \"b\": \"0.0024\", // Best bid price \"B\": \"10\", // Best bid quantity \"a\": \"0.0026\", // Best ask price \"A\": \"100\", // Best ask quantity \"o\": \"0.0010\", // Open price \"h\": \"0.0025\", // High price \"l\": \"0.0010\", // Low price \"v\": \"10000\", // Total traded base asset volume \"q\": \"18\", // Total traded quote asset volume \"O\": 0, // Statistics open time \"C\": 86400000, // Statistics close time \"F\": 0, // First trade ID \"L\": 18150, // Last trade Id \"n\": 18151 // Total number of trades }","title":"Individual Symbol Ticker Streams"},{"location":"web-socket-streams/#all-market-tickers-stream","text":"24hr rolling window ticker statistics for all symbols that changed in an array. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Note that only tickers that have changed will be present in the array. Stream Name: !ticker@arr Update Speed: 1000ms Payload: [ { // Same as <symbol>@ticker payload } ]","title":"All Market Tickers Stream"},{"location":"web-socket-streams/#individual-symbol-rolling-window-statistics-streams","text":"Rolling window ticker statistics for a single symbol, computed over multiple windows. Stream Name: \\<symbol>@ticker_\\<window_size> Window Sizes: 1h,4h,1d Update Speed: 1000ms Note : This stream is different from the \\<symbol>@ticker stream. The open time \"O\" always starts on a minute, while the closing time \"C\" is the current time of the update. As such, the effective window might be up to 59999ms wider that \\<window_size>. Payload: { \"e\": \"1hTicker\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"p\": \"0.0015\", // Price change \"P\": \"250.00\", // Price change percent \"o\": \"0.0010\", // Open price \"h\": \"0.0025\", // High price \"l\": \"0.0010\", // Low price \"c\": \"0.0025\", // Last price \"w\": \"0.0018\", // Weighted average price \"v\": \"10000\", // Total traded base asset volume \"q\": \"18\", // Total traded quote asset volume \"O\": 0, // Statistics open time \"C\": 86400000, // Statistics close time \"F\": 0, // First trade ID \"L\": 18150, // Last trade Id \"n\": 18151 // Total number of trades }","title":"Individual Symbol Rolling Window Statistics Streams"},{"location":"web-socket-streams/#all-market-rolling-window-statistics-streams","text":"Rolling window ticker statistics for all market symbols, computed over multiple windows. Note that only tickers that have changed will be present in the array. Stream Name: !ticker_\\<window-size>@arr Window Size: 1h,4h,1d Update Speed: 1000ms Payload: [ { // Same as <symbol>@ticker_<window-size> payload, // one for each symbol updated within the interval. } ]","title":"All Market Rolling Window Statistics Streams"},{"location":"web-socket-streams/#individual-symbol-book-ticker-streams","text":"Pushes any update to the best bid or ask's price or quantity in real-time for a specified symbol. Multiple <symbol>@bookTicker streams can be subscribed to over one connection. Stream Name: \\<symbol>@bookTicker Update Speed: Real-time Payload: { \"u\":400900217, // order book updateId \"s\":\"BNBUSDT\", // symbol \"b\":\"25.35190000\", // best bid price \"B\":\"31.21000000\", // best bid qty \"a\":\"25.36520000\", // best ask price \"A\":\"40.66000000\" // best ask qty }","title":"Individual Symbol Book Ticker Streams"},{"location":"web-socket-streams/#partial-book-depth-streams","text":"Top \\<levels> bids and asks, pushed every second. Valid \\<levels> are 5, 10, or 20. Stream Names: \\<symbol>@depth\\<levels> OR \\<symbol>@depth\\<levels>@100ms Update Speed: 1000ms or 100ms Payload: { \"lastUpdateId\": 160, // Last update ID \"bids\": [ // Bids to be updated [ \"0.0024\", // Price level to be updated \"10\" // Quantity ] ], \"asks\": [ // Asks to be updated [ \"0.0026\", // Price level to be updated \"100\" // Quantity ] ] }","title":"Partial Book Depth Streams"},{"location":"web-socket-streams/#diff-depth-stream","text":"Order book price and quantity depth updates used to locally manage an order book. Stream Name: \\<symbol>@depth OR \\<symbol>@depth@100ms Update Speed: 1000ms or 100ms Payload: { \"e\": \"depthUpdate\", // Event type \"E\": 123456789, // Event time \"s\": \"BNBBTC\", // Symbol \"U\": 157, // First update ID in event \"u\": 160, // Final update ID in event \"b\": [ // Bids to be updated [ \"0.0024\", // Price level to be updated \"10\" // Quantity ] ], \"a\": [ // Asks to be updated [ \"0.0026\", // Price level to be updated \"100\" // Quantity ] ] }","title":"Diff. Depth Stream"},{"location":"web-socket-streams/#how-to-manage-a-local-order-book-correctly","text":"Open a stream to wss://stream.binance.com:9443/ws/bnbbtc@depth . Buffer the events you receive from the stream. Get a depth snapshot from https://api.binance.com/api/v3/depth?symbol=BNBBTC&limit=1000 . Drop any event where u is <= lastUpdateId in the snapshot. The first processed event should have U <= lastUpdateId +1 AND u >= lastUpdateId +1. While listening to the stream, each new event's U should be equal to the previous event's u +1. The data in each event is the absolute quantity for a price level. If the quantity is 0, remove the price level. Receiving an event that removes a price level that is not in your local order book can happen and is normal. Note: Due to depth snapshots having a limit on the number of price levels, a price level outside of the initial snapshot that doesn't have a quantity change won't have an update in the Diff. Depth Stream. Consequently, those price levels will not be visible in the local order book even when applying all updates from the Diff. Depth Stream correctly and cause the local order book to have some slight differences with the real order book. However, for most use cases the depth limit of 5000 is enough to understand the market and trade effectively.","title":"How to manage a local order book correctly"},{"location":"faqs/spot_glossary/","text":"SPOT API Glossary Disclaimer: This glossary refers only to the SPOT API Implementation. The definition for these terms may differ with regards to Futures, Options, and other APIs by Binance. A ACK * newOrderRespType enum. Stands for a type of order response in JSON where only the following fields are emitted: symbol , orderId , orderListId , clientOrderId , and transactTime . avgPrice * Represents the volume weighted average price for a set interval of minutes. aggTrade /Aggregate trade * Aggregation of one or more individual trades from the same taker order that got filled at the same time and price. asks * Orders on the SELL side. B baseAsset * The first asset in the symbol (e.g. BTC is the base asset of symbol BTCUSDT ), which represents the asset being bought and sold (the quantity ). baseAssetPrecision * A field found in GET /api/v3/exchangeInfo that shows the number of decimals allowed on the baseAsset . baseCommissionPrecision * A field found in GET /api/v3/exchangeInfo that represents the number of decimals base asset commission will be calculated to. bids * Orders on the BUY side. BREAK * Symbol's trading status that represents the symbol is not available for trading, which can happen during expected downtime. Market data is not generated during BREAK . BUY * An enum in the side parameter when a user wants to purchase an asset (e.g. BTC ). C CANCELED * Order status indicating the order has been canceled by the user. clientOrderId * A field, which can be set by the user, in the JSON response for POST /api/v3/order to identify the newly placed order. commission * The fee that was paid on a trade. commissionAsset * The asset the commission fees were deducted from. cancelReplaceMode * Parameter used in Cancel Replace orders (i.e. POST /api/v3/order/cancelReplace ) that define whether the New Order Placement should proceed if the Cancel Request fails. cummulativeQuoteQty * The accumulation of the price * qty for each fill of an order. D Data Source * Specifies where the endpoint or request is retrieving their data. E executedQty * The field that shows how much of the quantity was filled in an order. EXPIRED * Order status indicating the order was canceled according to the order type's rules or by the exchange. EXPIRED_IN_MATCH * Order status indicating the order was canceled by the exchange due to STP trigger. (e.g. an order with EXPIRE_TAKER will match with existing orders on the book with the same account or same tradeGroupId ) F filters * Defines the trading rules on the exchange. FOK / Fill or Kill * timeInForce enum where the order will not fill and expire if the order cannot be fully filled. free * The amount of an asset in a user's balances that can be used to trade or withdraw. FULL * newOrderRespType enum. Stands for a type of order response in JSON, where all the order information is emitted, including orders fills field. G GTC / Good Til Canceled * timeInForce enum where the order will remain active until it is canceled or fully filled. H HALT * Symbol's trading status that represents the symbol is not available for trading, which can happen during emergency downtime. Market data is still generated during HALT . I intervalNum * Describes the amount of time in the interval (e.g. if interval is SECOND and intervalNum is 5, then this will be interpreted as every 5 seconds). IOC / Immediate or Canceled * timeInForce enum where the order tries to fill as much as possible, and the remaining unfilled quantity will expire. isBestMatch * Field in the Response JSON that determines if the price of the trade was the best available on the exchange. isBuyerMaker * Field in the Response JSON that indicates if the Buy side (the Buyer) was also the market maker (the Maker). isWorking * Field in the JSON that shows if the order has started working on the order book. K kline * Identifies the open, close, high, low price, trading volume, and other market data, of a symbol at a specified time for a specific duration. Also known as a Candlestick. L LIMIT * a type of order where the execution price will be no worse than the order's set price. The execution price is limited to be the set price or better. LIMIT_MAKER * A type of order where the order can only be a maker order (i.e. The order cannot immediately match and take). limitClientOrderId * A parameter used in placing OCO orders (i.e. POST /api/v3/order/oco ) that identifies the LIMIT_MAKER pair of the OCO Order. listClientOrderId * A parameter used in placing OCO Orders (i.e. POST /api/v3/order/oco ) that identifies the pair of orders. listenKey * Individual key used on User Data Stream to get live updates on the associated account. locked * The amount of an asset in a user's balances that are currently locked in open orders and other services by the platform. M MARKET * A type of order where the user buys or sells an asset at the best available prices and liquidity until the order is fully filled or the order book's liquidity is exhausted. Matching Engine * This can either refer to a Data Source in the documentation which means the response is coming from the engine. * Or this is referred to as the system that handles all the requests and matches orders. Memory * Data Source where the response is coming from the API's internal memory or cache. N NEW * Order status where a order has been successfully sent to the Matching Engine. newClientOrderId * Parameter used in the SPOT API to assign the clientOrderId for the order being placed or the cancel message. Notional value * The price * qty value. O OCO * One-Cancels-the-Other type of order that is composed by a pair of orders (i.e. STOP_LOSS or STOP_LOSS_LIMIT paired with a LIMIT_MAKER order) with the condition that if one of the orders execute, the other is automatically expired. Order Book * List of the open bids and asks for a symbol. orderId * A field in the order response that uniquely identifies the order on a symbol. origQty * The original quantity that was sent during order placement. origClientOrderId * Field used when canceling or querying an order by providing the clientOrderId . P PARTIALLY_FILLED * Order status indicating that part of the order has been partially filled. preventedQuantity * Order quantity expired due to STP events. Prevented Match * Order(s) that have expired due to the STP trigger. Q quantity * Parameter used to specify the amount of the base asset to buy or sell. quoteAsset * The second asset in the symbol (e.g. USDT is the quote asset of symbol BTCUSDT ) which represents the asset being used to quote prices (the price ). quoteAssetPrecision * A field found in GET /api/v3/exchangeInfo that shows the number of decimals allowed on the quoteAsset . quoteCommissionPrecision * A field found in GET /api/v3/exchangeInfo that represents the number of decimals quote asset commission will be calculated to. quoteOrderQty * MARKET order parameter that specifies the amount of the quote asset one wants to spend/receive in a \"Reverse MARKET order\". quoteQty * price * qty ; the notional value. R recvWindow * Parameter in the APIs that can be used to specify the number of milliseconds after the timestamp the request is valid for. RESULT * newOrderRespType enum. Stands for a type of order response in JSON, where all the order information is emitted, except order's fills field. Reverse MARKET order * A MARKET order that is specified using the quoteOrderQty instead of the quantity . S Self Trade Prevention (STP) * Self Trade Prevention is a feature that prevents orders of users, or the user's tradeGroupId from matching against their own. selfTradePreventionMode * A parameter used to specify what the system will do if an order could cause a self-trade. SELL * An enum in the side used when a user wants to sell an asset (e.g. BTC). SPOT * This is to distinguish a type of trading, where the purchase and delivery of a asset is made immediately. stopClientOrderId * A parameter used in placing OCO orders (i.e. POST /api/v3/order/oco ) that identifies the STOP_LOSS or STOP_LOSS_LIMIT pair of the OCO Order. stopPrice * The price used in algorithmic orders (e.g. STOP_LOSS , TAKE_PROFIT ) that determines when an order will be triggered to be placed on the order book. * The price used in trailing algorithmic orders (e.g. STOP_LOSS , TAKE_PROFIT ) to determine when trailing price tracking begins. STOP_LOSS * A type of algorithmic order where once the market price hits the stopPrice , a MARKET order is placed on the order book. STOP_LOSS_LIMIT * A type of algorithmic order where once the market price hits the stopPrice , a LIMIT order is placed on the order book. strategyId * Arbitrary numeric value identifying the order within an order strategy. strategyType * Arbitrary numeric value identifying the order strategy. symbol * A trading pair, composed of a base asset and a quote asset . (e.g. BTCUSDT and BNBBTC) T TAKE_PROFIT * A type of algorithmic order where once the market price hits the stopPrice , a MARKET order is placed on the order book. TAKE_PROFIT_LIMIT * A type of algorithmic order where once the market price hits the stopPrice , a LIMIT order is placed on the order book. ticker * Reports the price change, and other maker data, of a symbol within a certain rolling interval. timeInForce * Determines the taker behavior of an order, if an order can be a maker order, and how long the order will stay on the order book before it expires. * Supported enums are GTC , IOC , and FOK . tradeGroupId * Group of accounts that belong to the same \"trade group\". TRADING * Trading status where orders can be placed. trailingDelta * Trailing Stop Order parameter that specifies the delta price change required before order activation. trailingTime * The time when the trailing order is now active and tracking price changes. transactTime * The time when the order occurred. This field (as well as all timestamp related fields) will be in milliseconds. U uiKlines * Modified candlestick data that is optimized for presentation of candlestick charts. updateTime * Last update to the order. This field (as well as all timestamp related fields) will be in milliseconds. User Data Stream * Websocket stream used to get real-time information of a user's account. (e.g. Changes to Balances, Order Updates, etc.) W weightedAveragePrice * The volume weighted average price in the last x minutes. workingTime * The time when the order started working on the order book. X X-MBX-ORDER-COUNT-XX * Response header that is emitted when a user places an order, indicating the current order count for the interval XX for that account. X-MBX-USED-WEIGHT-XX * Response header that is emitted when a user sends any request to the API, indicating the current used request weight for the XX interval by the user's IP.","title":"SPOT API Glossary"},{"location":"faqs/spot_glossary/#spot-api-glossary","text":"Disclaimer: This glossary refers only to the SPOT API Implementation. The definition for these terms may differ with regards to Futures, Options, and other APIs by Binance.","title":"SPOT API Glossary"},{"location":"faqs/spot_glossary/#a","text":"ACK * newOrderRespType enum. Stands for a type of order response in JSON where only the following fields are emitted: symbol , orderId , orderListId , clientOrderId , and transactTime . avgPrice * Represents the volume weighted average price for a set interval of minutes. aggTrade /Aggregate trade * Aggregation of one or more individual trades from the same taker order that got filled at the same time and price. asks * Orders on the SELL side.","title":"A"},{"location":"faqs/spot_glossary/#b","text":"baseAsset * The first asset in the symbol (e.g. BTC is the base asset of symbol BTCUSDT ), which represents the asset being bought and sold (the quantity ). baseAssetPrecision * A field found in GET /api/v3/exchangeInfo that shows the number of decimals allowed on the baseAsset . baseCommissionPrecision * A field found in GET /api/v3/exchangeInfo that represents the number of decimals base asset commission will be calculated to. bids * Orders on the BUY side. BREAK * Symbol's trading status that represents the symbol is not available for trading, which can happen during expected downtime. Market data is not generated during BREAK . BUY * An enum in the side parameter when a user wants to purchase an asset (e.g. BTC ).","title":"B"},{"location":"faqs/spot_glossary/#c","text":"CANCELED * Order status indicating the order has been canceled by the user. clientOrderId * A field, which can be set by the user, in the JSON response for POST /api/v3/order to identify the newly placed order. commission * The fee that was paid on a trade. commissionAsset * The asset the commission fees were deducted from. cancelReplaceMode * Parameter used in Cancel Replace orders (i.e. POST /api/v3/order/cancelReplace ) that define whether the New Order Placement should proceed if the Cancel Request fails. cummulativeQuoteQty * The accumulation of the price * qty for each fill of an order.","title":"C"},{"location":"faqs/spot_glossary/#d","text":"Data Source * Specifies where the endpoint or request is retrieving their data.","title":"D"},{"location":"faqs/spot_glossary/#e","text":"executedQty * The field that shows how much of the quantity was filled in an order. EXPIRED * Order status indicating the order was canceled according to the order type's rules or by the exchange. EXPIRED_IN_MATCH * Order status indicating the order was canceled by the exchange due to STP trigger. (e.g. an order with EXPIRE_TAKER will match with existing orders on the book with the same account or same tradeGroupId )","title":"E"},{"location":"faqs/spot_glossary/#f","text":"filters * Defines the trading rules on the exchange. FOK / Fill or Kill * timeInForce enum where the order will not fill and expire if the order cannot be fully filled. free * The amount of an asset in a user's balances that can be used to trade or withdraw. FULL * newOrderRespType enum. Stands for a type of order response in JSON, where all the order information is emitted, including orders fills field.","title":"F"},{"location":"faqs/spot_glossary/#g","text":"GTC / Good Til Canceled * timeInForce enum where the order will remain active until it is canceled or fully filled.","title":"G"},{"location":"faqs/spot_glossary/#h","text":"HALT * Symbol's trading status that represents the symbol is not available for trading, which can happen during emergency downtime. Market data is still generated during HALT .","title":"H"},{"location":"faqs/spot_glossary/#i","text":"intervalNum * Describes the amount of time in the interval (e.g. if interval is SECOND and intervalNum is 5, then this will be interpreted as every 5 seconds). IOC / Immediate or Canceled * timeInForce enum where the order tries to fill as much as possible, and the remaining unfilled quantity will expire. isBestMatch * Field in the Response JSON that determines if the price of the trade was the best available on the exchange. isBuyerMaker * Field in the Response JSON that indicates if the Buy side (the Buyer) was also the market maker (the Maker). isWorking * Field in the JSON that shows if the order has started working on the order book.","title":"I"},{"location":"faqs/spot_glossary/#k","text":"kline * Identifies the open, close, high, low price, trading volume, and other market data, of a symbol at a specified time for a specific duration. Also known as a Candlestick.","title":"K"},{"location":"faqs/spot_glossary/#l","text":"LIMIT * a type of order where the execution price will be no worse than the order's set price. The execution price is limited to be the set price or better. LIMIT_MAKER * A type of order where the order can only be a maker order (i.e. The order cannot immediately match and take). limitClientOrderId * A parameter used in placing OCO orders (i.e. POST /api/v3/order/oco ) that identifies the LIMIT_MAKER pair of the OCO Order. listClientOrderId * A parameter used in placing OCO Orders (i.e. POST /api/v3/order/oco ) that identifies the pair of orders. listenKey * Individual key used on User Data Stream to get live updates on the associated account. locked * The amount of an asset in a user's balances that are currently locked in open orders and other services by the platform.","title":"L"},{"location":"faqs/spot_glossary/#m","text":"MARKET * A type of order where the user buys or sells an asset at the best available prices and liquidity until the order is fully filled or the order book's liquidity is exhausted. Matching Engine * This can either refer to a Data Source in the documentation which means the response is coming from the engine. * Or this is referred to as the system that handles all the requests and matches orders. Memory * Data Source where the response is coming from the API's internal memory or cache.","title":"M"},{"location":"faqs/spot_glossary/#n","text":"NEW * Order status where a order has been successfully sent to the Matching Engine. newClientOrderId * Parameter used in the SPOT API to assign the clientOrderId for the order being placed or the cancel message. Notional value * The price * qty value.","title":"N"},{"location":"faqs/spot_glossary/#o","text":"OCO * One-Cancels-the-Other type of order that is composed by a pair of orders (i.e. STOP_LOSS or STOP_LOSS_LIMIT paired with a LIMIT_MAKER order) with the condition that if one of the orders execute, the other is automatically expired. Order Book * List of the open bids and asks for a symbol. orderId * A field in the order response that uniquely identifies the order on a symbol. origQty * The original quantity that was sent during order placement. origClientOrderId * Field used when canceling or querying an order by providing the clientOrderId .","title":"O"},{"location":"faqs/spot_glossary/#p","text":"PARTIALLY_FILLED * Order status indicating that part of the order has been partially filled. preventedQuantity * Order quantity expired due to STP events. Prevented Match * Order(s) that have expired due to the STP trigger.","title":"P"},{"location":"faqs/spot_glossary/#q","text":"quantity * Parameter used to specify the amount of the base asset to buy or sell. quoteAsset * The second asset in the symbol (e.g. USDT is the quote asset of symbol BTCUSDT ) which represents the asset being used to quote prices (the price ). quoteAssetPrecision * A field found in GET /api/v3/exchangeInfo that shows the number of decimals allowed on the quoteAsset . quoteCommissionPrecision * A field found in GET /api/v3/exchangeInfo that represents the number of decimals quote asset commission will be calculated to. quoteOrderQty * MARKET order parameter that specifies the amount of the quote asset one wants to spend/receive in a \"Reverse MARKET order\". quoteQty * price * qty ; the notional value.","title":"Q"},{"location":"faqs/spot_glossary/#r","text":"recvWindow * Parameter in the APIs that can be used to specify the number of milliseconds after the timestamp the request is valid for. RESULT * newOrderRespType enum. Stands for a type of order response in JSON, where all the order information is emitted, except order's fills field. Reverse MARKET order * A MARKET order that is specified using the quoteOrderQty instead of the quantity .","title":"R"},{"location":"faqs/spot_glossary/#s","text":"Self Trade Prevention (STP) * Self Trade Prevention is a feature that prevents orders of users, or the user's tradeGroupId from matching against their own. selfTradePreventionMode * A parameter used to specify what the system will do if an order could cause a self-trade. SELL * An enum in the side used when a user wants to sell an asset (e.g. BTC). SPOT * This is to distinguish a type of trading, where the purchase and delivery of a asset is made immediately. stopClientOrderId * A parameter used in placing OCO orders (i.e. POST /api/v3/order/oco ) that identifies the STOP_LOSS or STOP_LOSS_LIMIT pair of the OCO Order. stopPrice * The price used in algorithmic orders (e.g. STOP_LOSS , TAKE_PROFIT ) that determines when an order will be triggered to be placed on the order book. * The price used in trailing algorithmic orders (e.g. STOP_LOSS , TAKE_PROFIT ) to determine when trailing price tracking begins. STOP_LOSS * A type of algorithmic order where once the market price hits the stopPrice , a MARKET order is placed on the order book. STOP_LOSS_LIMIT * A type of algorithmic order where once the market price hits the stopPrice , a LIMIT order is placed on the order book. strategyId * Arbitrary numeric value identifying the order within an order strategy. strategyType * Arbitrary numeric value identifying the order strategy. symbol * A trading pair, composed of a base asset and a quote asset . (e.g. BTCUSDT and BNBBTC)","title":"S"},{"location":"faqs/spot_glossary/#t","text":"TAKE_PROFIT * A type of algorithmic order where once the market price hits the stopPrice , a MARKET order is placed on the order book. TAKE_PROFIT_LIMIT * A type of algorithmic order where once the market price hits the stopPrice , a LIMIT order is placed on the order book. ticker * Reports the price change, and other maker data, of a symbol within a certain rolling interval. timeInForce * Determines the taker behavior of an order, if an order can be a maker order, and how long the order will stay on the order book before it expires. * Supported enums are GTC , IOC , and FOK . tradeGroupId * Group of accounts that belong to the same \"trade group\". TRADING * Trading status where orders can be placed. trailingDelta * Trailing Stop Order parameter that specifies the delta price change required before order activation. trailingTime * The time when the trailing order is now active and tracking price changes. transactTime * The time when the order occurred. This field (as well as all timestamp related fields) will be in milliseconds.","title":"T"},{"location":"faqs/spot_glossary/#u","text":"uiKlines * Modified candlestick data that is optimized for presentation of candlestick charts. updateTime * Last update to the order. This field (as well as all timestamp related fields) will be in milliseconds. User Data Stream * Websocket stream used to get real-time information of a user's account. (e.g. Changes to Balances, Order Updates, etc.)","title":"U"},{"location":"faqs/spot_glossary/#w","text":"weightedAveragePrice * The volume weighted average price in the last x minutes. workingTime * The time when the order started working on the order book.","title":"W"},{"location":"faqs/spot_glossary/#x","text":"X-MBX-ORDER-COUNT-XX * Response header that is emitted when a user places an order, indicating the current order count for the interval XX for that account. X-MBX-USED-WEIGHT-XX * Response header that is emitted when a user sends any request to the API, indicating the current used request weight for the XX interval by the user's IP.","title":"X"},{"location":"faqs/stp_faq/","text":"Self Trade Prevention (STP) FAQ What is Self Trade Prevention? Self Trade Prevention (or STP) prevents orders of users, or the user's tradeGroupId to match against their own. What defines a self-trade? A self-trade can occur in either scenario: The order traded against the same account. The order traded against an account with the same tradeGroupId . What happens when STP is triggered? There are four possible modes for what the system will do if an order could create a self-trade. NONE - This mode exempts the order from self-trade prevention. Accounts or Trade group IDs will not be compared, no orders will be expired, and the trade will occur. EXPIRE_TAKER - This mode prevents a trade by immediately expiring the taker order's remaining quantity. EXPIRE_MAKER - This mode prevents a trade by immediately expiring the potential maker order's remaining quantity. EXPIRE_BOTH - This mode prevents a trade by immediately expiring both the taker and the potential maker orders' remaining quantities. The STP event will occur depending on the STP mode of the taker order . Thus, the STP mode of an order that goes on the book is no longer relevant and will be ignored for all future order processing. What is a Trade Group Id? Different accounts with the same tradeGroupId are considered part of the same \"trade group\". Orders submitted by members of a trade group are eligible for STP according to the taker-order's STP mode. A user can confirm if their accounts are under the same tradeGroupId from the API either from GET /api/v3/account (REST API) or account.status (Websocket API) for each account. The field is also present in the response for GET /api/v3/preventedMatches (Rest API) or myPreventedMatches (Websocket API). If the value is -1 , then the tradeGroupId has not been set for that account, so the STP may only take place between orders of the same account. What is a Prevented Match? When one or more orders are expired due to STP, this creates a prevented match. This is not to be confused with a trade, as no orders will match. This is a record of what orders could have self-traded. This can be queried through the endpoint GET /api/v3/preventedMatches on the Rest API or myPreventedMatches on the Websocket API. This is a sample of the output request for reference: [ { \"symbol\": \"BTCDUSDT\", //Symbol of the orders \"preventedMatchId\": 8, //Identifies the prevented match of the expired order(s) for the symbol. \"takerOrderId\": 12, //Order Id of the Taker Order \"makerOrderId\": 10, //Order Id of the Maker Order \"tradeGroupId\": 1, //Identifies the Trade Group Id. (If the account is not part of a trade group, this will be -1.) \"selfTradePreventionMode\": \"EXPIRE_BOTH\", //STP mode that expired the order(s). \"price\": \"50.00000000\", //Price at which the match occurred. \"takerPreventedQuantity\": \"1.00000000\", //Taker's remaining quantity. Only appears if the STP mode is EXPIRE_TAKER or EXPIRE_BOTH. \"makerPreventedQuantity\": \"10.00000000\", //Maker's remaining quantity. Only appears if the STP mode is EXPIRE_MAKER or EXPIRE_BOTH. \"transactTime\": 1663190634060 //Time the order(s) expired due to STP. } ] What is \"prevented quantity?\" STP events expire quantity from open orders. The STP modes EXPIRE_TAKER , EXPIRE_MAKER , and EXPIRE_BOTH expire all remaining quantity on the affected orders, resulting in the entire open order being expired. Prevented quantity is the amount of quantity that is expired due to STP events for a particular order. User stream execution reports for orders involved in STP may have these fields: { \"A\":\"3.000000\", // Prevented Quantity \"B\":\"3.000000\" // Last Prevented Quantity } B is present for execution type TRADE_PREVENTION , and is the quantity expired due to that individual STP event. A is the cumulative quantity expired due to STP over the lifetime of the order. For EXPIRE_TAKER , EXPIRE_MAKER , and EXPIRE_BOTH modes this will always be the same value as B . While an order is open, the following inequality holds true: executed quantity + prevented quantity < original order quantity When an order has status EXPIRED_IN_MATCH or FILLED , the followiung equation will hold true: executed quantity + prevented quantity = original order quantity How do I know which symbol uses STP? Symbols may be configured to allow different sets of STP modes and take different default STP modes. defaultSelfTradePreventionMode - Orders will use this STP mode if the user does not provide one on order placement. allowedSelfTradePreventionModes - Defines the allowed set of STP modes for order placement on that symbol. For example, if a symbol has the following configuration: \"defaultSelfTradePreventionMode\": \"NONE\", \"allowedSelfTradePreventionModes\": [ \"NONE\", \"EXPIRE_TAKER\", \"EXPIRE_BOTH\" ] Then that means if a user sends an order with no selfTradePreventionMode provided, then the order sent will have the value of NONE . If a user wants to explicitly mention the mode they can pass the enum NONE , EXPIRE_TAKER , or EXPIRE_BOTH . If a user tries to specify EXPIRE_MAKER for orders on this symbol, they will receive an error: { \"code\": -1013, \"msg\": \"This symbol does not allow the specified self-trade prevention mode.\" } How do I know if an order expired due to STP? The order will have the status EXPIRED_IN_MATCH . STP Examples: For all these cases, assume that all orders for these examples are made on the same account. Scenario A- A user sends a new order with selfTradePreventionMode: NONE that will match with another order of theirs that is already on the book. Maker Order: symbol=BTCUSDT side=BUY type=LIMIT quantity=1 price=1 selfTradePreventionMode=NONE Taker Order: symbol=BTCUSDT side=SELL type=LIMIT quantity=1 price=1 selfTradePreventionMode=NONE Result : No STP is triggered and the orders will match. Order Status of the Maker Order { \"symbol\": \"BTCUSDT\", \"orderId\": 2, \"orderListId\": -1, \"clientOrderId\": \"FaDk4LPRxastaICEFE9YTf\", \"price\": \"1.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"1.000000\", \"cummulativeQuoteQty\": \"1.000000\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670217090310, \"updateTime\": 1670217090330, \"isWorking\": true, \"workingTime\": 1670217090310, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\" } Order Status of the Taker Order { \"symbol\": \"BTCUSDT\", \"orderId\": 3, \"orderListId\": -1, \"clientOrderId\": \"Ay48Vtpghnsvy6w8RPQEde\", \"transactTime\": 1670207731263, \"price\": \"1.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"1.000000\", \"cummulativeQuoteQty\": \"1.000000\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"workingTime\": 1670207731263, \"fills\": [ { \"price\": \"1.000000\", \"qty\": \"1.000000\", \"commission\": \"0.000000\", \"commissionAsset\": \"USDT\", \"tradeId\": 1 } ], \"selfTradePreventionMode\": \"NONE\" } Scenario B- A user sends an order with EXPIRE_MAKER that would match with their orders that are already on the book. Maker Order 1: symbol=BTCUSDT side=BUY type=LIMIT quantity=1.2 price=1.2 selfTradePreventionMode=NONE Maker Order 2: symbol=BTCUSDT side=BUY type=LIMIT quantity=1.3 price=1.1 selfTradePreventionMode=NONE Maker Order 3: symbol=BTCUSDT side=BUY type=LIMIT quantity=8.1 price=1 selfTradePreventionMode=NONE Taker Order 1: symbol=BTCUSDT side=SELL type=LIMIT quantity=3 price=1 selfTradePreventionMode=EXPIRE_MAKER Result : The orders that were on the book will expire due to the STP trigger, and the taker order will go on the book. Maker Order 1 { \"symbol\": \"BTCUSDT\", \"orderId\": 2, \"orderListId\": -1, \"clientOrderId\": \"wpNzhSclc16pV8g5THIOR3\", \"price\": \"1.200000\", \"origQty\": \"1.200000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670217957437, \"updateTime\": 1670217957498, \"isWorking\": true, \"workingTime\": 1670217957437, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\", \"preventedMatchId\": 0, \"preventedQuantity\": \"1.200000\" } Maker Order 2 { \"symbol\": \"BTCUSDT\", \"orderId\": 3, \"orderListId\": -1, \"clientOrderId\": \"ZT9emqia99V7x8B6FW0pFF\", \"price\": \"1.100000\", \"origQty\": \"1.300000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670217957458, \"updateTime\": 1670217957498, \"isWorking\": true, \"workingTime\": 1670217957458, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\", \"preventedMatchId\": 1, \"preventedQuantity\": \"1.300000\" } Maker Order 3 { \"symbol\": \"BTCUSDT\", \"orderId\": 4, \"orderListId\": -1, \"clientOrderId\": \"8QZ3taGcU4gND59TxHAcR0\", \"price\": \"1.000000\", \"origQty\": \"8.100000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670217957478, \"updateTime\": 1670217957498, \"isWorking\": true, \"workingTime\": 1670217957478, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\", \"preventedMatchId\": 2, \"preventedQuantity\": \"8.100000\" } Output of the Taker Order { \"symbol\": \"BTCUSDT\", \"orderId\": 5, \"orderListId\": -1, \"clientOrderId\": \"WRzbhp257NhZsIJW4y2Nri\", \"transactTime\": 1670217957498, \"price\": \"1.000000\", \"origQty\": \"3.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"workingTime\": 1670217957498, \"fills\": [], \"preventedMatches\": [ { \"preventedMatchId\": 0, \"makerOrderId\": 2, \"price\": \"1.200000\", \"makerPreventedQuantity\": \"1.200000\" }, { \"preventedMatchId\": 1, \"makerOrderId\": 3, \"price\": \"1.100000\", \"makerPreventedQuantity\": \"1.300000\" }, { \"preventedMatchId\": 2, \"makerOrderId\": 4, \"price\": \"1.000000\", \"makerPreventedQuantity\": \"8.100000\" } ], \"selfTradePreventionMode\": \"EXPIRE_MAKER\" } Scenario C - A user sends an order with EXPIRE_TAKER that would match with their orders already on the book. Maker Order 1: symbol=BTCUSDT side=BUY type=LIMIT quantity=1.2 price=1.2 selfTradePreventionMode=NONE Maker Order 2: symbol=BTCUSDT side=BUY type=LIMIT quantity=1.3 price=1.1 selfTradePreventionMode=NONE Maker Order 3: symbol=BTCUSDT side=BUY type=LIMIT quantity=8.1 price=1 selfTradePreventionMode=NONE Taker Order 1: symbol=BTCUSDT side=SELL type=LIMIT quantity=3 price=1 selfTradePreventionMode=EXPIRE_TAKER Result : The orders already on the book will remain, while the taker order will expire. Maker Order 1 { \"symbol\": \"BTCUSDT\", \"orderId\": 2, \"orderListId\": -1, \"clientOrderId\": \"NpwW2t0L4AGQnCDeNjHIga\", \"price\": \"1.200000\", \"origQty\": \"1.200000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670219811986, \"updateTime\": 1670219811986, \"isWorking\": true, \"workingTime\": 1670219811986, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\" } Maker Order 2 { \"symbol\": \"BTCUSDT\", \"orderId\": 3, \"orderListId\": -1, \"clientOrderId\": \"TSAmJqGWk4YTB2yA9p04UO\", \"price\": \"1.100000\", \"origQty\": \"1.300000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670219812007, \"updateTime\": 1670219812007, \"isWorking\": true, \"workingTime\": 1670219812007, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\" } Maker Order 3 { \"symbol\": \"BTCUSDT\", \"orderId\": 4, \"orderListId\": -1, \"clientOrderId\": \"L6FmpCJJP6q4hCNv4MuZDG\", \"price\": \"1.000000\", \"origQty\": \"8.100000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670219812026, \"updateTime\": 1670219812026, \"isWorking\": true, \"workingTime\": 1670219812026, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\" } Output of the Taker order { \"symbol\": \"BTCUSDT\", \"orderId\": 5, \"orderListId\": -1, \"clientOrderId\": \"kocvDAi4GNN2y1l1Ojg1Ri\", \"price\": \"1.000000\", \"origQty\": \"3.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670219812046, \"updateTime\": 1670219812046, \"isWorking\": true, \"workingTime\": 1670219812046, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"EXPIRE_TAKER\", \"preventedMatchId\": 0, \"preventedQuantity\": \"3.000000\" } Scenario D- A user has an order on the book, and then sends an order with EXPIRE_BOTH that would match with the existing order. Maker Order: symbol=BTCUSDT side=BUY type=LIMIT quantity=1 price=1 selfTradePreventionMode=NONE Taker Order: symbol=BTCUSDT side=SELL type=LIMIT quantity=3 price=1 selfTradePreventionMode=EXPIRE_BOTH Result: Both orders will expire. Maker Order { \"symbol\": \"ABCDEF\", \"orderId\": 2, \"orderListId\": -1, \"clientOrderId\": \"2JPC8xjpLq6Q0665uYWAcs\", \"price\": \"1.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1673842412831, \"updateTime\": 1673842413170, \"isWorking\": true, \"workingTime\": 1673842412831, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\", \"preventedMatchId\": 0, \"preventedQuantity\": \"1.000000\" } Taker Order { \"symbol\": \"ABCDEF\", \"orderId\": 5, \"orderListId\": -1, \"clientOrderId\": \"qMaz8yrOXk2iUIz74cFkiZ\", \"transactTime\": 1673842413170, \"price\": \"1.000000\", \"origQty\": \"3.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"workingTime\": 1673842413170, \"fills\": [], \"preventedMatches\": [ { \"preventedMatchId\": 0, \"makerOrderId\": 2, \"price\": \"1.000000\", \"takerPreventedQuantity\": \"3.000000\", \"makerPreventedQuantity\": \"1.000000\" } ], \"selfTradePreventionMode\": \"EXPIRE_BOTH\", \"tradeGroupId\": 1, \"preventedQuantity\": \"3.000000\" } Scenario E - A user has an order on the book with EXPIRE_MAKER , and then sends a new order with EXPIRE_TAKER which would match with the existing order. Maker Order: symbol=BTCUSDT side=BUY type=LIMIT quantity=1 price=1 selfTradePreventionMode=EXPIRE_MAKER Taker Order: symbol=BTCUSDT side=SELL type=LIMIT quantity=1 price=1 selfTradePreventionMode=EXPIRE_TAKER Result : The taker order's STP mode will be used, so the taker order will be expired. Maker Order { \"symbol\": \"ABCDEF\", \"orderId\": 0, \"orderListId\": -1, \"clientOrderId\": \"jFUap8iFwwgqIpOfAL60GS\", \"price\": \"1.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670220769261, \"updateTime\": 1670220769261, \"isWorking\": true, \"workingTime\": 1670220769261, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"EXPIRE_MAKER\" } Taker Order { \"symbol\": \"ABCDEF\", \"orderId\": 1, \"orderListId\": -1, \"clientOrderId\": \"zxrvnNNm1RXC3rkPLUPrc1\", \"transactTime\": 1670220800315, \"price\": \"1.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"workingTime\": 1670220800315, \"fills\": [], \"preventedMatches\": [ { \"preventedMatchId\": 0, \"makerOrderId\": 0, \"price\": \"1.000000\", \"takerPreventedQuantity\": \"1.000000\" } ], \"selfTradePreventionMode\": \"EXPIRE_TAKER\", \"preventedQuantity\": \"1.000000\" } Scenario F - A user sends a market order with EXPIRE_MAKER which would match with an existing order. Maker Order: symbol=ABCDEF side=BUY type=LIMIT quantity=1 price=1 selfTradePreventionMode=NONE Taker Order: symbol=ABCDEF side=SELL type=MARKET quantity=1 selfTradePreventionMode=EXPIRE_MAKER Result : The existing order expires with the status EXPIRED_IN_MATCH , due to the STP trigger. The new order also expires but with status EXPIRED , due to low liquidity on the order book. Maker Order { \"symbol\": \"ABCDEF\", \"orderId\": 2, \"orderListId\": -1, \"clientOrderId\": \"7sgrQQInL69XDMQpiqMaG2\", \"price\": \"1.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670222557456, \"updateTime\": 1670222557478, \"isWorking\": true, \"workingTime\": 1670222557456, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\", \"preventedMatchId\": 0, \"preventedQuantity\": \"1.000000\" } Taker Order { \"symbol\": \"ABCDEF\", \"orderId\": 3, \"orderListId\": -1, \"clientOrderId\": \"zqhsgGDEcdhxy2oza2Ljxd\", \"transactTime\": 1670222557478, \"price\": \"0.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED\", \"timeInForce\": \"GTC\", \"type\": \"MARKET\", \"side\": \"SELL\", \"workingTime\": 1670222557478, \"fills\": [], \"preventedMatches\": [ { \"preventedMatchId\": 0, \"makerOrderId\": 2, \"price\": \"1.000000\", \"makerPreventedQuantity\": \"1.000000\" } ], \"selfTradePreventionMode\": \"EXPIRE_MAKER\" }","title":"Self Trade Prevention (STP) FAQ"},{"location":"faqs/stp_faq/#self-trade-prevention-stp-faq","text":"","title":"Self Trade Prevention (STP) FAQ"},{"location":"faqs/stp_faq/#what-is-self-trade-prevention","text":"Self Trade Prevention (or STP) prevents orders of users, or the user's tradeGroupId to match against their own.","title":"What is Self Trade Prevention?"},{"location":"faqs/stp_faq/#what-defines-a-self-trade","text":"A self-trade can occur in either scenario: The order traded against the same account. The order traded against an account with the same tradeGroupId .","title":"What defines a self-trade?"},{"location":"faqs/stp_faq/#what-happens-when-stp-is-triggered","text":"There are four possible modes for what the system will do if an order could create a self-trade. NONE - This mode exempts the order from self-trade prevention. Accounts or Trade group IDs will not be compared, no orders will be expired, and the trade will occur. EXPIRE_TAKER - This mode prevents a trade by immediately expiring the taker order's remaining quantity. EXPIRE_MAKER - This mode prevents a trade by immediately expiring the potential maker order's remaining quantity. EXPIRE_BOTH - This mode prevents a trade by immediately expiring both the taker and the potential maker orders' remaining quantities. The STP event will occur depending on the STP mode of the taker order . Thus, the STP mode of an order that goes on the book is no longer relevant and will be ignored for all future order processing.","title":"What happens when STP is triggered?"},{"location":"faqs/stp_faq/#what-is-a-trade-group-id","text":"Different accounts with the same tradeGroupId are considered part of the same \"trade group\". Orders submitted by members of a trade group are eligible for STP according to the taker-order's STP mode. A user can confirm if their accounts are under the same tradeGroupId from the API either from GET /api/v3/account (REST API) or account.status (Websocket API) for each account. The field is also present in the response for GET /api/v3/preventedMatches (Rest API) or myPreventedMatches (Websocket API). If the value is -1 , then the tradeGroupId has not been set for that account, so the STP may only take place between orders of the same account.","title":"What is a Trade Group Id?"},{"location":"faqs/stp_faq/#what-is-a-prevented-match","text":"When one or more orders are expired due to STP, this creates a prevented match. This is not to be confused with a trade, as no orders will match. This is a record of what orders could have self-traded. This can be queried through the endpoint GET /api/v3/preventedMatches on the Rest API or myPreventedMatches on the Websocket API. This is a sample of the output request for reference: [ { \"symbol\": \"BTCDUSDT\", //Symbol of the orders \"preventedMatchId\": 8, //Identifies the prevented match of the expired order(s) for the symbol. \"takerOrderId\": 12, //Order Id of the Taker Order \"makerOrderId\": 10, //Order Id of the Maker Order \"tradeGroupId\": 1, //Identifies the Trade Group Id. (If the account is not part of a trade group, this will be -1.) \"selfTradePreventionMode\": \"EXPIRE_BOTH\", //STP mode that expired the order(s). \"price\": \"50.00000000\", //Price at which the match occurred. \"takerPreventedQuantity\": \"1.00000000\", //Taker's remaining quantity. Only appears if the STP mode is EXPIRE_TAKER or EXPIRE_BOTH. \"makerPreventedQuantity\": \"10.00000000\", //Maker's remaining quantity. Only appears if the STP mode is EXPIRE_MAKER or EXPIRE_BOTH. \"transactTime\": 1663190634060 //Time the order(s) expired due to STP. } ]","title":"What is a Prevented Match?"},{"location":"faqs/stp_faq/#what-is-prevented-quantity","text":"STP events expire quantity from open orders. The STP modes EXPIRE_TAKER , EXPIRE_MAKER , and EXPIRE_BOTH expire all remaining quantity on the affected orders, resulting in the entire open order being expired. Prevented quantity is the amount of quantity that is expired due to STP events for a particular order. User stream execution reports for orders involved in STP may have these fields: { \"A\":\"3.000000\", // Prevented Quantity \"B\":\"3.000000\" // Last Prevented Quantity } B is present for execution type TRADE_PREVENTION , and is the quantity expired due to that individual STP event. A is the cumulative quantity expired due to STP over the lifetime of the order. For EXPIRE_TAKER , EXPIRE_MAKER , and EXPIRE_BOTH modes this will always be the same value as B . While an order is open, the following inequality holds true: executed quantity + prevented quantity < original order quantity When an order has status EXPIRED_IN_MATCH or FILLED , the followiung equation will hold true: executed quantity + prevented quantity = original order quantity","title":"What is \"prevented quantity?\""},{"location":"faqs/stp_faq/#how-do-i-know-which-symbol-uses-stp","text":"Symbols may be configured to allow different sets of STP modes and take different default STP modes. defaultSelfTradePreventionMode - Orders will use this STP mode if the user does not provide one on order placement. allowedSelfTradePreventionModes - Defines the allowed set of STP modes for order placement on that symbol. For example, if a symbol has the following configuration: \"defaultSelfTradePreventionMode\": \"NONE\", \"allowedSelfTradePreventionModes\": [ \"NONE\", \"EXPIRE_TAKER\", \"EXPIRE_BOTH\" ] Then that means if a user sends an order with no selfTradePreventionMode provided, then the order sent will have the value of NONE . If a user wants to explicitly mention the mode they can pass the enum NONE , EXPIRE_TAKER , or EXPIRE_BOTH . If a user tries to specify EXPIRE_MAKER for orders on this symbol, they will receive an error: { \"code\": -1013, \"msg\": \"This symbol does not allow the specified self-trade prevention mode.\" }","title":"How do I know which symbol uses STP?"},{"location":"faqs/stp_faq/#how-do-i-know-if-an-order-expired-due-to-stp","text":"The order will have the status EXPIRED_IN_MATCH .","title":"How do I know if an order expired due to STP?"},{"location":"faqs/stp_faq/#stp-examples","text":"For all these cases, assume that all orders for these examples are made on the same account. Scenario A- A user sends a new order with selfTradePreventionMode: NONE that will match with another order of theirs that is already on the book. Maker Order: symbol=BTCUSDT side=BUY type=LIMIT quantity=1 price=1 selfTradePreventionMode=NONE Taker Order: symbol=BTCUSDT side=SELL type=LIMIT quantity=1 price=1 selfTradePreventionMode=NONE Result : No STP is triggered and the orders will match. Order Status of the Maker Order { \"symbol\": \"BTCUSDT\", \"orderId\": 2, \"orderListId\": -1, \"clientOrderId\": \"FaDk4LPRxastaICEFE9YTf\", \"price\": \"1.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"1.000000\", \"cummulativeQuoteQty\": \"1.000000\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670217090310, \"updateTime\": 1670217090330, \"isWorking\": true, \"workingTime\": 1670217090310, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\" } Order Status of the Taker Order { \"symbol\": \"BTCUSDT\", \"orderId\": 3, \"orderListId\": -1, \"clientOrderId\": \"Ay48Vtpghnsvy6w8RPQEde\", \"transactTime\": 1670207731263, \"price\": \"1.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"1.000000\", \"cummulativeQuoteQty\": \"1.000000\", \"status\": \"FILLED\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"workingTime\": 1670207731263, \"fills\": [ { \"price\": \"1.000000\", \"qty\": \"1.000000\", \"commission\": \"0.000000\", \"commissionAsset\": \"USDT\", \"tradeId\": 1 } ], \"selfTradePreventionMode\": \"NONE\" } Scenario B- A user sends an order with EXPIRE_MAKER that would match with their orders that are already on the book. Maker Order 1: symbol=BTCUSDT side=BUY type=LIMIT quantity=1.2 price=1.2 selfTradePreventionMode=NONE Maker Order 2: symbol=BTCUSDT side=BUY type=LIMIT quantity=1.3 price=1.1 selfTradePreventionMode=NONE Maker Order 3: symbol=BTCUSDT side=BUY type=LIMIT quantity=8.1 price=1 selfTradePreventionMode=NONE Taker Order 1: symbol=BTCUSDT side=SELL type=LIMIT quantity=3 price=1 selfTradePreventionMode=EXPIRE_MAKER Result : The orders that were on the book will expire due to the STP trigger, and the taker order will go on the book. Maker Order 1 { \"symbol\": \"BTCUSDT\", \"orderId\": 2, \"orderListId\": -1, \"clientOrderId\": \"wpNzhSclc16pV8g5THIOR3\", \"price\": \"1.200000\", \"origQty\": \"1.200000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670217957437, \"updateTime\": 1670217957498, \"isWorking\": true, \"workingTime\": 1670217957437, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\", \"preventedMatchId\": 0, \"preventedQuantity\": \"1.200000\" } Maker Order 2 { \"symbol\": \"BTCUSDT\", \"orderId\": 3, \"orderListId\": -1, \"clientOrderId\": \"ZT9emqia99V7x8B6FW0pFF\", \"price\": \"1.100000\", \"origQty\": \"1.300000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670217957458, \"updateTime\": 1670217957498, \"isWorking\": true, \"workingTime\": 1670217957458, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\", \"preventedMatchId\": 1, \"preventedQuantity\": \"1.300000\" } Maker Order 3 { \"symbol\": \"BTCUSDT\", \"orderId\": 4, \"orderListId\": -1, \"clientOrderId\": \"8QZ3taGcU4gND59TxHAcR0\", \"price\": \"1.000000\", \"origQty\": \"8.100000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670217957478, \"updateTime\": 1670217957498, \"isWorking\": true, \"workingTime\": 1670217957478, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\", \"preventedMatchId\": 2, \"preventedQuantity\": \"8.100000\" } Output of the Taker Order { \"symbol\": \"BTCUSDT\", \"orderId\": 5, \"orderListId\": -1, \"clientOrderId\": \"WRzbhp257NhZsIJW4y2Nri\", \"transactTime\": 1670217957498, \"price\": \"1.000000\", \"origQty\": \"3.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"workingTime\": 1670217957498, \"fills\": [], \"preventedMatches\": [ { \"preventedMatchId\": 0, \"makerOrderId\": 2, \"price\": \"1.200000\", \"makerPreventedQuantity\": \"1.200000\" }, { \"preventedMatchId\": 1, \"makerOrderId\": 3, \"price\": \"1.100000\", \"makerPreventedQuantity\": \"1.300000\" }, { \"preventedMatchId\": 2, \"makerOrderId\": 4, \"price\": \"1.000000\", \"makerPreventedQuantity\": \"8.100000\" } ], \"selfTradePreventionMode\": \"EXPIRE_MAKER\" } Scenario C - A user sends an order with EXPIRE_TAKER that would match with their orders already on the book. Maker Order 1: symbol=BTCUSDT side=BUY type=LIMIT quantity=1.2 price=1.2 selfTradePreventionMode=NONE Maker Order 2: symbol=BTCUSDT side=BUY type=LIMIT quantity=1.3 price=1.1 selfTradePreventionMode=NONE Maker Order 3: symbol=BTCUSDT side=BUY type=LIMIT quantity=8.1 price=1 selfTradePreventionMode=NONE Taker Order 1: symbol=BTCUSDT side=SELL type=LIMIT quantity=3 price=1 selfTradePreventionMode=EXPIRE_TAKER Result : The orders already on the book will remain, while the taker order will expire. Maker Order 1 { \"symbol\": \"BTCUSDT\", \"orderId\": 2, \"orderListId\": -1, \"clientOrderId\": \"NpwW2t0L4AGQnCDeNjHIga\", \"price\": \"1.200000\", \"origQty\": \"1.200000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670219811986, \"updateTime\": 1670219811986, \"isWorking\": true, \"workingTime\": 1670219811986, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\" } Maker Order 2 { \"symbol\": \"BTCUSDT\", \"orderId\": 3, \"orderListId\": -1, \"clientOrderId\": \"TSAmJqGWk4YTB2yA9p04UO\", \"price\": \"1.100000\", \"origQty\": \"1.300000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670219812007, \"updateTime\": 1670219812007, \"isWorking\": true, \"workingTime\": 1670219812007, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\" } Maker Order 3 { \"symbol\": \"BTCUSDT\", \"orderId\": 4, \"orderListId\": -1, \"clientOrderId\": \"L6FmpCJJP6q4hCNv4MuZDG\", \"price\": \"1.000000\", \"origQty\": \"8.100000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670219812026, \"updateTime\": 1670219812026, \"isWorking\": true, \"workingTime\": 1670219812026, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\" } Output of the Taker order { \"symbol\": \"BTCUSDT\", \"orderId\": 5, \"orderListId\": -1, \"clientOrderId\": \"kocvDAi4GNN2y1l1Ojg1Ri\", \"price\": \"1.000000\", \"origQty\": \"3.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670219812046, \"updateTime\": 1670219812046, \"isWorking\": true, \"workingTime\": 1670219812046, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"EXPIRE_TAKER\", \"preventedMatchId\": 0, \"preventedQuantity\": \"3.000000\" } Scenario D- A user has an order on the book, and then sends an order with EXPIRE_BOTH that would match with the existing order. Maker Order: symbol=BTCUSDT side=BUY type=LIMIT quantity=1 price=1 selfTradePreventionMode=NONE Taker Order: symbol=BTCUSDT side=SELL type=LIMIT quantity=3 price=1 selfTradePreventionMode=EXPIRE_BOTH Result: Both orders will expire. Maker Order { \"symbol\": \"ABCDEF\", \"orderId\": 2, \"orderListId\": -1, \"clientOrderId\": \"2JPC8xjpLq6Q0665uYWAcs\", \"price\": \"1.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1673842412831, \"updateTime\": 1673842413170, \"isWorking\": true, \"workingTime\": 1673842412831, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\", \"preventedMatchId\": 0, \"preventedQuantity\": \"1.000000\" } Taker Order { \"symbol\": \"ABCDEF\", \"orderId\": 5, \"orderListId\": -1, \"clientOrderId\": \"qMaz8yrOXk2iUIz74cFkiZ\", \"transactTime\": 1673842413170, \"price\": \"1.000000\", \"origQty\": \"3.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"workingTime\": 1673842413170, \"fills\": [], \"preventedMatches\": [ { \"preventedMatchId\": 0, \"makerOrderId\": 2, \"price\": \"1.000000\", \"takerPreventedQuantity\": \"3.000000\", \"makerPreventedQuantity\": \"1.000000\" } ], \"selfTradePreventionMode\": \"EXPIRE_BOTH\", \"tradeGroupId\": 1, \"preventedQuantity\": \"3.000000\" } Scenario E - A user has an order on the book with EXPIRE_MAKER , and then sends a new order with EXPIRE_TAKER which would match with the existing order. Maker Order: symbol=BTCUSDT side=BUY type=LIMIT quantity=1 price=1 selfTradePreventionMode=EXPIRE_MAKER Taker Order: symbol=BTCUSDT side=SELL type=LIMIT quantity=1 price=1 selfTradePreventionMode=EXPIRE_TAKER Result : The taker order's STP mode will be used, so the taker order will be expired. Maker Order { \"symbol\": \"ABCDEF\", \"orderId\": 0, \"orderListId\": -1, \"clientOrderId\": \"jFUap8iFwwgqIpOfAL60GS\", \"price\": \"1.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"NEW\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670220769261, \"updateTime\": 1670220769261, \"isWorking\": true, \"workingTime\": 1670220769261, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"EXPIRE_MAKER\" } Taker Order { \"symbol\": \"ABCDEF\", \"orderId\": 1, \"orderListId\": -1, \"clientOrderId\": \"zxrvnNNm1RXC3rkPLUPrc1\", \"transactTime\": 1670220800315, \"price\": \"1.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"SELL\", \"workingTime\": 1670220800315, \"fills\": [], \"preventedMatches\": [ { \"preventedMatchId\": 0, \"makerOrderId\": 0, \"price\": \"1.000000\", \"takerPreventedQuantity\": \"1.000000\" } ], \"selfTradePreventionMode\": \"EXPIRE_TAKER\", \"preventedQuantity\": \"1.000000\" } Scenario F - A user sends a market order with EXPIRE_MAKER which would match with an existing order. Maker Order: symbol=ABCDEF side=BUY type=LIMIT quantity=1 price=1 selfTradePreventionMode=NONE Taker Order: symbol=ABCDEF side=SELL type=MARKET quantity=1 selfTradePreventionMode=EXPIRE_MAKER Result : The existing order expires with the status EXPIRED_IN_MATCH , due to the STP trigger. The new order also expires but with status EXPIRED , due to low liquidity on the order book. Maker Order { \"symbol\": \"ABCDEF\", \"orderId\": 2, \"orderListId\": -1, \"clientOrderId\": \"7sgrQQInL69XDMQpiqMaG2\", \"price\": \"1.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED_IN_MATCH\", \"timeInForce\": \"GTC\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"stopPrice\": \"0.000000\", \"icebergQty\": \"0.000000\", \"time\": 1670222557456, \"updateTime\": 1670222557478, \"isWorking\": true, \"workingTime\": 1670222557456, \"origQuoteOrderQty\": \"0.000000\", \"selfTradePreventionMode\": \"NONE\", \"preventedMatchId\": 0, \"preventedQuantity\": \"1.000000\" } Taker Order { \"symbol\": \"ABCDEF\", \"orderId\": 3, \"orderListId\": -1, \"clientOrderId\": \"zqhsgGDEcdhxy2oza2Ljxd\", \"transactTime\": 1670222557478, \"price\": \"0.000000\", \"origQty\": \"1.000000\", \"executedQty\": \"0.000000\", \"cummulativeQuoteQty\": \"0.000000\", \"status\": \"EXPIRED\", \"timeInForce\": \"GTC\", \"type\": \"MARKET\", \"side\": \"SELL\", \"workingTime\": 1670222557478, \"fills\": [], \"preventedMatches\": [ { \"preventedMatchId\": 0, \"makerOrderId\": 2, \"price\": \"1.000000\", \"makerPreventedQuantity\": \"1.000000\" } ], \"selfTradePreventionMode\": \"EXPIRE_MAKER\" }","title":"STP Examples:"},{"location":"faqs/trailing-stop-faq/","text":"Spot Trailing Stop order FAQ What is a trailing stop order? Trailing stop is a type of contingent order with a dynamic trigger price influenced by price changes in the market. For the SPOT API, the change required to trigger order entry is specified in the trailingDelta parameter, and is defined in BIPS. Intuitively, trailing stop orders allow unlimited price movement in a direction that is beneficial for the order, and limited movement in a detrimental direction. Buy orders: low prices are good. Unlimited price decreases are allowed but the order will trigger after a price increase of the supplied delta, relative to the lowest trade price since submission. Sell orders: high prices are good. Unlimited price increases are allowed but the order will trigger after a price decrease of the supplied delta, relative to the highest trade price since submission. What are BIPs? Basis Points, also known as BIP or BIPS, are used to indicate a percentage change. BIPS conversion reference: BIPS Percentage Multiplier 1 0.01% 0.0001 10 0.1% 0.001 100 1% 0.01 1000 10% 0.1 For example, a STOP_LOSS SELL order with a trailingDelta of 100 is a trailing stop order which will be triggered after a price decrease of 1% from the highest price after placing the order. What order types can be trailing stop orders? Trailing stop orders are supported for contingent orders such as STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , and TAKE_PROFIT_LIMIT . OCO orders also support trailing stop orders in the contingent leg. In this scenario if the trailing stop condition is triggered, the limit leg of the OCO order will be canceled. How do I place a trailing stop order? Trailing stop orders are entered the same way as regular STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , or TAKE_PROFIT_LIMIT orders, but with an additional trailingDelta parameter. This parameter must be within the range of the TRAILING_DELTA filter for that symbol. Unlike regular contingent orders, the stopPrice parameter is optional for trailing stop orders. If it is provided then the order will only start tracking price changes after the stopPrice condition is met. If the stopPrice parameter is omitted then the order starts tracking price changes from the next trade. What kind of price changes will trigger my trailing stop order? Trailing order type Side Stop price condition Market price movement required to trigger TAKE_PROFIT SELL market price >= stop price decrease from maximum TAKE_PROFIT_LIMIT SELL market price >= stop price decrease from maximum STOP_LOSS SELL market price <= stop price decrease from maximum STOP_LOSS_LIMIT SELL market price <= stop price decrease from maximum STOP_LOSS BUY market price >= stop price increase from minimum STOP_LOSS_LIMIT BUY market price >= stop price increase from minimum TAKE_PROFIT BUY market price <= stop price increase from minimum TAKE_PROFIT_LIMIT BUY market price <= stop price increase from minimum How do I pass the TRAILING_DELTA filter? For STOP_LOSS BUY , STOP_LOSS_LIMIT BUY , TAKE_PROFIT SELL , and TAKE_PROFIT_LIMIT SELL orders: trailingDelta >= minTrailingAboveDelta trailingDelta <= maxTrailingAboveDelta For STOP_LOSS SELL , STOP_LOSS_LIMIT SELL , TAKE_PROFIT BUY , and TAKE_PROFIT_LIMIT BUY orders: trailingDelta >= minTrailingBelowDelta trailingDelta <= maxTrailingBelowDelta Trailing Stop Order Scenarios Scenario A - Trailing Stop Loss Limit Buy Order At 12:01:00 there is a trade at a price of 40,000 and a STOP_LOSS_LIMIT order is placed on the BUY side of the exchange. The order has of a stopPrice of 44,000, a trailingDelta of 500 (5%), and a limit price of 45,000. Between 12:01:00 and 12:02:00 a series of linear trades lead to a decrease in last price, ending at 37,000. This is a price decrease of 7.5% or 750 BIPS, well exceeding the order's trailingDelta . However since the order has not started price tracking, the price movement is ignored and the order remains contingent. Between 12:02:00 and 12:03:00 a series of linear trades lead to an increase in last price. When a trade is equal to, or surpasses, the stopPrice the order starts tracking price changes immediately; the first trade that meets this condition sets the \"lowest price\". In this case, the lowest price is 44,000 and if there is a 500 BIPS increase from 44,000 then the order will trigger. The series of linear trades continue to increase the last price, ending at 45,000. Between 12:03:00 and 12:04:00 a series of linear trades lead to an increase in last price, ending at 46,000. This is an increase of ~454 BIPS from the order's previously noted lowest price, but it's not large enough to trigger the order. Between 12:04:00 and 12:05:00 a series of linear trades lead to a decrease in last price, ending at 42,000. This is a decrease from the order's previously noted lowest price. If there is a 500 BIPS increase from 42,000 then the order will trigger. Between 12:05:00 and 12:05:30 a series of linear trades lead to an increase in last price to 44,100. This trade is equal to, or surpasses, the order's requirement of 500 BIPS, as 44,100 = 42,000 * 1.05 . This causes the order to trigger and start working against the order book at its limit price of 45,000. Scenario B - Trailing Stop Loss Limit Sell Order At 12:01:00 there is a trade at a price of 40,000 and a STOP_LOSS_LIMIT order is placed on the SELL side of the exchange. The order has of a stopPrice of 39,000, a trailingDelta of 1000 (10%), and a limit price of 38,000. Between 12:01:00 and 12:02:00 a series of linear trades lead to an increase in last price, ending at 41,500. Between 12:02:00 and 12:03:00 a series of linear trades lead to a decrease in last price. When a trade is equal to, or surpasses, the stopPrice the order starts tracking price changes immediately; the first trade that meets this condition sets the \"highest price\". In this case, the highest price is 39,000 and if there is a 1000 BIPS decrease from 39,000 then the order will trigger. Between 12:03:00 and 12:04:00 a series of linear trades lead to a decrease in last price, ending at 37,000. This is a decrease of ~512 BIPS from the order's previously noted highest price, but it's not large enough to trigger the order. Between 12:04:00 and 12:05:00 a series of linear trades lead to an increase in last price, ending at 41,000. This is an increase from the order's previously noted highest price. If there is a 1000 BIPS decrease from 41,000 then the order will trigger. Between 12:05:00 and 12:05:30 a series of linear trades lead to a decrease in last price to 36,900. This trade is equal to, or surpasses, the order's requirement of 1000 BIPS, as 36,900 = 41,000 * 0.90 . This causes the order to trigger and start working against the order book at its limit price of 38,000. Scenario C - Trailing Take Profit Limit Buy Order At 12:01:00 there is a trade at a price of 40,000 and a TAKE_PROFIT_LIMIT order is placed on the BUY side of the exchange. The order has of a stopPrice of 38,000, a trailingDelta of 850 (8.5%), and a limit price of 38,500. Between 12:01:00 and 12:02:00 a series of linear trades lead to an increase in last price, ending at 42,000. Between 12:02:00 and 12:03:00 a series of linear trades lead to a decrease in last price. When a trade is equal to, or surpasses, the stopPrice the order starts tracking price changes immediately; the first trade that meets this condition sets the \"lowest price\". In this case, the lowest price is 38,000 and if there is a 850 BIPS increase from 38,000 then the order will trigger. The series of linear trades continues to decrease the last price, ending at 37,000. If there is a 850 BIPS increase from 37,000 then the order will trigger. Between 12:03:00 and 12:04:00 a series of linear trades lead to an increase in last price, ending at 39,000. This is an increase of ~540 BIPS from the order's previously noted lowest price, but it's not large enough to trigger the order. Between 12:04:00 and 12:05:00 a series of linear trades lead to a decrease in last price, ending at 38,000. It does not surpass the order's previously noted lowest price, resulting in no change to the order's trigger price. Between 12:05:00 and 12:05:30 a series of linear trades lead to an increase in last price to 40,145. This trade is equal to, or surpasses, the order's requirement of 850 BIPS, as 40,145 = 37,000 * 1.085 . This causes the order to trigger and start working against the order book at its limit price of 38,500. Scenario D - Trailing Take Profit Limit Sell Order At 12:01:00 there is a trade at a price of 40,000 and a TAKE_PROFIT_LIMIT order is placed on the SELL side of the exchange. The order has of a stopPrice of 42,000, a trailingDelta of 750 (7.5%), and a limit price of 41,000. Between 12:01:00 and 12:02:00 a series of linear trades lead to an increase in last price, ending at 41,500. Between 12:02:00 and 12:03:00 a series of linear trades lead to a decrease in last price, ending at 39,000. Between 12:03:00 and 12:04:00 a series of linear trades lead to an increase in last price. When a trade is equal to, or surpasses, the stopPrice the order starts tracking price changes immediately; the first trade that meets this condition sets the \"highest price\". In this case, the highest price is 42,000 and if there is a 750 BIPS decrease from 42,000 then the order will trigger. The series of linear trades continues to increase the last price, ending at 45,000. If there is a 750 BIPS decrease from 45,000 then the order will trigger. Between 12:04:00 and 12:05:00 a series of linear trades lead to a decrease in last price, ending at 44,000. This is a decrease of ~222 BIPS from the order's previously noted highest price, but it's not large enough to trigger the order. Between 12:05:00 and 12:06:00 a series of linear trades lead to an increase in last price, ending at 46,500. This is an increase from the order's previously noted highest price. If there is a 750 BIPS decrease from 46,500 then the order will trigger. Between 12:06:00 and 12:06:50 a series of linear trades lead to a decrease in last price to 43,012.5. This trade is equal to, or surpasses, the order's requirement of 750 BIPS, as 43,012.5 = 46,500 * 0.925 . This causes the order to trigger and start working against the order book at its limit price of 41,000. Scenario E - Trailing Stop Order Without A Stop Price At 12:01:00 there is a trade at a price of 40,000 and a STOP_LOSS_LIMIT order is placed on the SELL side of the exchange. The order has a trailingDelta of 700 (7%), a limit price of 39,000 and no stopPrice . The order starts tracking price changes once placed. If there is a 700 BIPS decrease from 40,000 then the order will trigger. Between 12:01:00 and 12:02:00 a series of linear trades lead to an increase in last price, ending at 42,000. This is an increase from the order's previously noted highest price. If there is a 700 BIPS decrease from 42,000 then the order will trigger. Between 12:02:00 and 12:03:00 a series of linear trades lead to a decrease in last price, ending at 39,500. This is a decrease of ~595 BIPS from the order's previously noted highest price, but it's not large enough to trigger the order. Between 12:03:00 and 12:04:00 a series of linear trades lead to an increase in last price, ending at 45,500. This is an increase from the order's previously noted highest price. If there is a 700 BIPS decrease from 45,500 then the order will trigger. Between 12:04:00 and 12:04:45 a series of linear trades lead to a decrease in last price to 42,315. This trade is equal to, or surpasses, the order's requirement of 700 BIPS, as 42,315 = 45,500 * 0.93 . This causes the order to trigger and start working against the order book at its limit price of 39,000. Trailing Stop Order Examples Assuming a last price of 40,000. Placing a trailing stop STOP_LOSS_LIMIT BUY order, with a price of 42,000.0 and a trailing stop of 5%. # Excluding stop price POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=BUY&type=STOP_LOSS_LIMIT&timeInForce=GTC&quantity=0.01&price=42000&trailingDelta=500&timestamp=<timestamp>&signature=<signature>' # Including stop price of 43,000 POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=BUY&type=STOP_LOSS_LIMIT&timeInForce=GTC&quantity=0.01&price=42000&stopPrice=43000&trailingDelta=500&timestamp=<timestamp>&signature=<signature>' Placing a trailing stop STOP_LOSS_LIMIT SELL order, with a price of 37,500.0 and a trailing stop of 2.5%. # Excluding stop price POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=SELL&type=STOP_LOSS_LIMIT&timeInForce=GTC&quantity=0.01&price=37500&trailingDelta=250&timestamp=<timestamp>&signature=<signature>' # Including stop price of 39,000 POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=SELL&type=STOP_LOSS_LIMIT&timeInForce=GTC&quantity=0.01&price=37500&stopPrice=39000&trailingDelta=250&timestamp=<timestamp>&signature=<signature>' Placing a trailing stop TAKE_PROFIT_LIMIT BUY order, with a price of 38,000.0 and a trailing stop of 5%. # Excluding stop price POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=BUY&type=TAKE_PROFIT_LIMIT&timeInForce=GTC&quantity=0.01&price=38000&trailingDelta=500&timestamp=<timestamp>&signature=<signature>' # Including stop price of 36,000 POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=BUY&type=TAKE_PROFIT_LIMIT&timeInForce=GTC&quantity=0.01&price=38000&stopPrice=36000&trailingDelta=500&timestamp=<timestamp>&signature=<signature>' Placing a trailing stop TAKE_PROFIT_LIMIT SELL order, with a price of 41,500.0 and a trailing stop of 1.75%. # Excluding stop price POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=SELL&type=TAKE_PROFIT_LIMIT&timeInForce=GTC&quantity=0.01&price=41500&trailingDelta=175&timestamp=<timestamp>&signature=<signature>' # Including stop price of 42,500 POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=SELL&type=TAKE_PROFIT_LIMIT&timeInForce=GTC&quantity=0.01&price=41500&stopPrice=42500&trailingDelta=175&timestamp=<timestamp>&signature=<signature>'","title":"Spot Trailing Stop order FAQ"},{"location":"faqs/trailing-stop-faq/#spot-trailing-stop-order-faq","text":"","title":"Spot Trailing Stop order FAQ"},{"location":"faqs/trailing-stop-faq/#what-is-a-trailing-stop-order","text":"Trailing stop is a type of contingent order with a dynamic trigger price influenced by price changes in the market. For the SPOT API, the change required to trigger order entry is specified in the trailingDelta parameter, and is defined in BIPS. Intuitively, trailing stop orders allow unlimited price movement in a direction that is beneficial for the order, and limited movement in a detrimental direction. Buy orders: low prices are good. Unlimited price decreases are allowed but the order will trigger after a price increase of the supplied delta, relative to the lowest trade price since submission. Sell orders: high prices are good. Unlimited price increases are allowed but the order will trigger after a price decrease of the supplied delta, relative to the highest trade price since submission.","title":"What is a trailing stop order?"},{"location":"faqs/trailing-stop-faq/#what-are-bips","text":"Basis Points, also known as BIP or BIPS, are used to indicate a percentage change. BIPS conversion reference: BIPS Percentage Multiplier 1 0.01% 0.0001 10 0.1% 0.001 100 1% 0.01 1000 10% 0.1 For example, a STOP_LOSS SELL order with a trailingDelta of 100 is a trailing stop order which will be triggered after a price decrease of 1% from the highest price after placing the order.","title":"What are BIPs?"},{"location":"faqs/trailing-stop-faq/#what-order-types-can-be-trailing-stop-orders","text":"Trailing stop orders are supported for contingent orders such as STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , and TAKE_PROFIT_LIMIT . OCO orders also support trailing stop orders in the contingent leg. In this scenario if the trailing stop condition is triggered, the limit leg of the OCO order will be canceled.","title":"What order types can be trailing stop orders?"},{"location":"faqs/trailing-stop-faq/#how-do-i-place-a-trailing-stop-order","text":"Trailing stop orders are entered the same way as regular STOP_LOSS , STOP_LOSS_LIMIT , TAKE_PROFIT , or TAKE_PROFIT_LIMIT orders, but with an additional trailingDelta parameter. This parameter must be within the range of the TRAILING_DELTA filter for that symbol. Unlike regular contingent orders, the stopPrice parameter is optional for trailing stop orders. If it is provided then the order will only start tracking price changes after the stopPrice condition is met. If the stopPrice parameter is omitted then the order starts tracking price changes from the next trade.","title":"How do I place a trailing stop order?"},{"location":"faqs/trailing-stop-faq/#what-kind-of-price-changes-will-trigger-my-trailing-stop-order","text":"Trailing order type Side Stop price condition Market price movement required to trigger TAKE_PROFIT SELL market price >= stop price decrease from maximum TAKE_PROFIT_LIMIT SELL market price >= stop price decrease from maximum STOP_LOSS SELL market price <= stop price decrease from maximum STOP_LOSS_LIMIT SELL market price <= stop price decrease from maximum STOP_LOSS BUY market price >= stop price increase from minimum STOP_LOSS_LIMIT BUY market price >= stop price increase from minimum TAKE_PROFIT BUY market price <= stop price increase from minimum TAKE_PROFIT_LIMIT BUY market price <= stop price increase from minimum","title":"What kind of price changes will trigger my trailing stop order?"},{"location":"faqs/trailing-stop-faq/#how-do-i-pass-the-trailing_delta-filter","text":"For STOP_LOSS BUY , STOP_LOSS_LIMIT BUY , TAKE_PROFIT SELL , and TAKE_PROFIT_LIMIT SELL orders: trailingDelta >= minTrailingAboveDelta trailingDelta <= maxTrailingAboveDelta For STOP_LOSS SELL , STOP_LOSS_LIMIT SELL , TAKE_PROFIT BUY , and TAKE_PROFIT_LIMIT BUY orders: trailingDelta >= minTrailingBelowDelta trailingDelta <= maxTrailingBelowDelta","title":"How do I pass the TRAILING_DELTA filter?"},{"location":"faqs/trailing-stop-faq/#trailing-stop-order-scenarios","text":"","title":"Trailing Stop Order Scenarios"},{"location":"faqs/trailing-stop-faq/#scenario-a-trailing-stop-loss-limit-buy-order","text":"At 12:01:00 there is a trade at a price of 40,000 and a STOP_LOSS_LIMIT order is placed on the BUY side of the exchange. The order has of a stopPrice of 44,000, a trailingDelta of 500 (5%), and a limit price of 45,000. Between 12:01:00 and 12:02:00 a series of linear trades lead to a decrease in last price, ending at 37,000. This is a price decrease of 7.5% or 750 BIPS, well exceeding the order's trailingDelta . However since the order has not started price tracking, the price movement is ignored and the order remains contingent. Between 12:02:00 and 12:03:00 a series of linear trades lead to an increase in last price. When a trade is equal to, or surpasses, the stopPrice the order starts tracking price changes immediately; the first trade that meets this condition sets the \"lowest price\". In this case, the lowest price is 44,000 and if there is a 500 BIPS increase from 44,000 then the order will trigger. The series of linear trades continue to increase the last price, ending at 45,000. Between 12:03:00 and 12:04:00 a series of linear trades lead to an increase in last price, ending at 46,000. This is an increase of ~454 BIPS from the order's previously noted lowest price, but it's not large enough to trigger the order. Between 12:04:00 and 12:05:00 a series of linear trades lead to a decrease in last price, ending at 42,000. This is a decrease from the order's previously noted lowest price. If there is a 500 BIPS increase from 42,000 then the order will trigger. Between 12:05:00 and 12:05:30 a series of linear trades lead to an increase in last price to 44,100. This trade is equal to, or surpasses, the order's requirement of 500 BIPS, as 44,100 = 42,000 * 1.05 . This causes the order to trigger and start working against the order book at its limit price of 45,000.","title":"Scenario A - Trailing Stop Loss Limit Buy Order"},{"location":"faqs/trailing-stop-faq/#scenario-b-trailing-stop-loss-limit-sell-order","text":"At 12:01:00 there is a trade at a price of 40,000 and a STOP_LOSS_LIMIT order is placed on the SELL side of the exchange. The order has of a stopPrice of 39,000, a trailingDelta of 1000 (10%), and a limit price of 38,000. Between 12:01:00 and 12:02:00 a series of linear trades lead to an increase in last price, ending at 41,500. Between 12:02:00 and 12:03:00 a series of linear trades lead to a decrease in last price. When a trade is equal to, or surpasses, the stopPrice the order starts tracking price changes immediately; the first trade that meets this condition sets the \"highest price\". In this case, the highest price is 39,000 and if there is a 1000 BIPS decrease from 39,000 then the order will trigger. Between 12:03:00 and 12:04:00 a series of linear trades lead to a decrease in last price, ending at 37,000. This is a decrease of ~512 BIPS from the order's previously noted highest price, but it's not large enough to trigger the order. Between 12:04:00 and 12:05:00 a series of linear trades lead to an increase in last price, ending at 41,000. This is an increase from the order's previously noted highest price. If there is a 1000 BIPS decrease from 41,000 then the order will trigger. Between 12:05:00 and 12:05:30 a series of linear trades lead to a decrease in last price to 36,900. This trade is equal to, or surpasses, the order's requirement of 1000 BIPS, as 36,900 = 41,000 * 0.90 . This causes the order to trigger and start working against the order book at its limit price of 38,000.","title":"Scenario B - Trailing Stop Loss Limit Sell Order"},{"location":"faqs/trailing-stop-faq/#scenario-c-trailing-take-profit-limit-buy-order","text":"At 12:01:00 there is a trade at a price of 40,000 and a TAKE_PROFIT_LIMIT order is placed on the BUY side of the exchange. The order has of a stopPrice of 38,000, a trailingDelta of 850 (8.5%), and a limit price of 38,500. Between 12:01:00 and 12:02:00 a series of linear trades lead to an increase in last price, ending at 42,000. Between 12:02:00 and 12:03:00 a series of linear trades lead to a decrease in last price. When a trade is equal to, or surpasses, the stopPrice the order starts tracking price changes immediately; the first trade that meets this condition sets the \"lowest price\". In this case, the lowest price is 38,000 and if there is a 850 BIPS increase from 38,000 then the order will trigger. The series of linear trades continues to decrease the last price, ending at 37,000. If there is a 850 BIPS increase from 37,000 then the order will trigger. Between 12:03:00 and 12:04:00 a series of linear trades lead to an increase in last price, ending at 39,000. This is an increase of ~540 BIPS from the order's previously noted lowest price, but it's not large enough to trigger the order. Between 12:04:00 and 12:05:00 a series of linear trades lead to a decrease in last price, ending at 38,000. It does not surpass the order's previously noted lowest price, resulting in no change to the order's trigger price. Between 12:05:00 and 12:05:30 a series of linear trades lead to an increase in last price to 40,145. This trade is equal to, or surpasses, the order's requirement of 850 BIPS, as 40,145 = 37,000 * 1.085 . This causes the order to trigger and start working against the order book at its limit price of 38,500.","title":"Scenario C - Trailing Take Profit Limit Buy Order"},{"location":"faqs/trailing-stop-faq/#scenario-d-trailing-take-profit-limit-sell-order","text":"At 12:01:00 there is a trade at a price of 40,000 and a TAKE_PROFIT_LIMIT order is placed on the SELL side of the exchange. The order has of a stopPrice of 42,000, a trailingDelta of 750 (7.5%), and a limit price of 41,000. Between 12:01:00 and 12:02:00 a series of linear trades lead to an increase in last price, ending at 41,500. Between 12:02:00 and 12:03:00 a series of linear trades lead to a decrease in last price, ending at 39,000. Between 12:03:00 and 12:04:00 a series of linear trades lead to an increase in last price. When a trade is equal to, or surpasses, the stopPrice the order starts tracking price changes immediately; the first trade that meets this condition sets the \"highest price\". In this case, the highest price is 42,000 and if there is a 750 BIPS decrease from 42,000 then the order will trigger. The series of linear trades continues to increase the last price, ending at 45,000. If there is a 750 BIPS decrease from 45,000 then the order will trigger. Between 12:04:00 and 12:05:00 a series of linear trades lead to a decrease in last price, ending at 44,000. This is a decrease of ~222 BIPS from the order's previously noted highest price, but it's not large enough to trigger the order. Between 12:05:00 and 12:06:00 a series of linear trades lead to an increase in last price, ending at 46,500. This is an increase from the order's previously noted highest price. If there is a 750 BIPS decrease from 46,500 then the order will trigger. Between 12:06:00 and 12:06:50 a series of linear trades lead to a decrease in last price to 43,012.5. This trade is equal to, or surpasses, the order's requirement of 750 BIPS, as 43,012.5 = 46,500 * 0.925 . This causes the order to trigger and start working against the order book at its limit price of 41,000.","title":"Scenario D - Trailing Take Profit Limit Sell Order"},{"location":"faqs/trailing-stop-faq/#scenario-e-trailing-stop-order-without-a-stop-price","text":"At 12:01:00 there is a trade at a price of 40,000 and a STOP_LOSS_LIMIT order is placed on the SELL side of the exchange. The order has a trailingDelta of 700 (7%), a limit price of 39,000 and no stopPrice . The order starts tracking price changes once placed. If there is a 700 BIPS decrease from 40,000 then the order will trigger. Between 12:01:00 and 12:02:00 a series of linear trades lead to an increase in last price, ending at 42,000. This is an increase from the order's previously noted highest price. If there is a 700 BIPS decrease from 42,000 then the order will trigger. Between 12:02:00 and 12:03:00 a series of linear trades lead to a decrease in last price, ending at 39,500. This is a decrease of ~595 BIPS from the order's previously noted highest price, but it's not large enough to trigger the order. Between 12:03:00 and 12:04:00 a series of linear trades lead to an increase in last price, ending at 45,500. This is an increase from the order's previously noted highest price. If there is a 700 BIPS decrease from 45,500 then the order will trigger. Between 12:04:00 and 12:04:45 a series of linear trades lead to a decrease in last price to 42,315. This trade is equal to, or surpasses, the order's requirement of 700 BIPS, as 42,315 = 45,500 * 0.93 . This causes the order to trigger and start working against the order book at its limit price of 39,000.","title":"Scenario E - Trailing Stop Order Without A Stop Price"},{"location":"faqs/trailing-stop-faq/#trailing-stop-order-examples","text":"Assuming a last price of 40,000. Placing a trailing stop STOP_LOSS_LIMIT BUY order, with a price of 42,000.0 and a trailing stop of 5%. # Excluding stop price POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=BUY&type=STOP_LOSS_LIMIT&timeInForce=GTC&quantity=0.01&price=42000&trailingDelta=500&timestamp=<timestamp>&signature=<signature>' # Including stop price of 43,000 POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=BUY&type=STOP_LOSS_LIMIT&timeInForce=GTC&quantity=0.01&price=42000&stopPrice=43000&trailingDelta=500&timestamp=<timestamp>&signature=<signature>' Placing a trailing stop STOP_LOSS_LIMIT SELL order, with a price of 37,500.0 and a trailing stop of 2.5%. # Excluding stop price POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=SELL&type=STOP_LOSS_LIMIT&timeInForce=GTC&quantity=0.01&price=37500&trailingDelta=250&timestamp=<timestamp>&signature=<signature>' # Including stop price of 39,000 POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=SELL&type=STOP_LOSS_LIMIT&timeInForce=GTC&quantity=0.01&price=37500&stopPrice=39000&trailingDelta=250&timestamp=<timestamp>&signature=<signature>' Placing a trailing stop TAKE_PROFIT_LIMIT BUY order, with a price of 38,000.0 and a trailing stop of 5%. # Excluding stop price POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=BUY&type=TAKE_PROFIT_LIMIT&timeInForce=GTC&quantity=0.01&price=38000&trailingDelta=500&timestamp=<timestamp>&signature=<signature>' # Including stop price of 36,000 POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=BUY&type=TAKE_PROFIT_LIMIT&timeInForce=GTC&quantity=0.01&price=38000&stopPrice=36000&trailingDelta=500&timestamp=<timestamp>&signature=<signature>' Placing a trailing stop TAKE_PROFIT_LIMIT SELL order, with a price of 41,500.0 and a trailing stop of 1.75%. # Excluding stop price POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=SELL&type=TAKE_PROFIT_LIMIT&timeInForce=GTC&quantity=0.01&price=41500&trailingDelta=175&timestamp=<timestamp>&signature=<signature>' # Including stop price of 42,500 POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=SELL&type=TAKE_PROFIT_LIMIT&timeInForce=GTC&quantity=0.01&price=41500&stopPrice=42500&trailingDelta=175&timestamp=<timestamp>&signature=<signature>'","title":"Trailing Stop Order Examples"}]}